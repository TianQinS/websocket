// Code generated by automatic for 'github.com/go-redis/redis'. DO NOT EDIT.

// +build go1.12,!go1.13

package stdlibs

import (
	"context"
	"github.com/go-redis/redis"
	"reflect"
	"time"
)

func init() {
	Symbols["github.com/go-redis/redis"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"NewBoolCmd":               reflect.ValueOf(redis.NewBoolCmd),
		"NewBoolResult":            reflect.ValueOf(redis.NewBoolResult),
		"NewBoolSliceCmd":          reflect.ValueOf(redis.NewBoolSliceCmd),
		"NewBoolSliceResult":       reflect.ValueOf(redis.NewBoolSliceResult),
		"NewClient":                reflect.ValueOf(redis.NewClient),
		"NewClusterClient":         reflect.ValueOf(redis.NewClusterClient),
		"NewClusterSlotsCmd":       reflect.ValueOf(redis.NewClusterSlotsCmd),
		"NewClusterSlotsCmdResult": reflect.ValueOf(redis.NewClusterSlotsCmdResult),
		"NewCmd":                   reflect.ValueOf(redis.NewCmd),
		"NewCmdResult":             reflect.ValueOf(redis.NewCmdResult),
		"NewCommandsInfoCmd":       reflect.ValueOf(redis.NewCommandsInfoCmd),
		"NewCommandsInfoCmdResult": reflect.ValueOf(redis.NewCommandsInfoCmdResult),
		"NewDurationCmd":           reflect.ValueOf(redis.NewDurationCmd),
		"NewDurationResult":        reflect.ValueOf(redis.NewDurationResult),
		"NewFailoverClient":        reflect.ValueOf(redis.NewFailoverClient),
		"NewFloatCmd":              reflect.ValueOf(redis.NewFloatCmd),
		"NewFloatResult":           reflect.ValueOf(redis.NewFloatResult),
		"NewGeoLocationCmd":        reflect.ValueOf(redis.NewGeoLocationCmd),
		"NewGeoLocationCmdResult":  reflect.ValueOf(redis.NewGeoLocationCmdResult),
		"NewGeoPosCmd":             reflect.ValueOf(redis.NewGeoPosCmd),
		"NewIntCmd":                reflect.ValueOf(redis.NewIntCmd),
		"NewIntResult":             reflect.ValueOf(redis.NewIntResult),
		"NewIntSliceCmd":           reflect.ValueOf(redis.NewIntSliceCmd),
		"NewRing":                  reflect.ValueOf(redis.NewRing),
		"NewScanCmd":               reflect.ValueOf(redis.NewScanCmd),
		"NewScanCmdResult":         reflect.ValueOf(redis.NewScanCmdResult),
		"NewScript":                reflect.ValueOf(redis.NewScript),
		"NewSentinelClient":        reflect.ValueOf(redis.NewSentinelClient),
		"NewSliceCmd":              reflect.ValueOf(redis.NewSliceCmd),
		"NewSliceResult":           reflect.ValueOf(redis.NewSliceResult),
		"NewStatusCmd":             reflect.ValueOf(redis.NewStatusCmd),
		"NewStatusResult":          reflect.ValueOf(redis.NewStatusResult),
		"NewStringCmd":             reflect.ValueOf(redis.NewStringCmd),
		"NewStringIntMapCmd":       reflect.ValueOf(redis.NewStringIntMapCmd),
		"NewStringIntMapCmdResult": reflect.ValueOf(redis.NewStringIntMapCmdResult),
		"NewStringResult":          reflect.ValueOf(redis.NewStringResult),
		"NewStringSliceCmd":        reflect.ValueOf(redis.NewStringSliceCmd),
		"NewStringSliceResult":     reflect.ValueOf(redis.NewStringSliceResult),
		"NewStringStringMapCmd":    reflect.ValueOf(redis.NewStringStringMapCmd),
		"NewStringStringMapResult": reflect.ValueOf(redis.NewStringStringMapResult),
		"NewStringStructMapCmd":    reflect.ValueOf(redis.NewStringStructMapCmd),
		"NewTimeCmd":               reflect.ValueOf(redis.NewTimeCmd),
		"NewUniversalClient":       reflect.ValueOf(redis.NewUniversalClient),
		"NewXMessageSliceCmd":      reflect.ValueOf(redis.NewXMessageSliceCmd),
		"NewXPendingCmd":           reflect.ValueOf(redis.NewXPendingCmd),
		"NewXPendingExtCmd":        reflect.ValueOf(redis.NewXPendingExtCmd),
		"NewXStreamSliceCmd":       reflect.ValueOf(redis.NewXStreamSliceCmd),
		"NewZSliceCmd":             reflect.ValueOf(redis.NewZSliceCmd),
		"NewZSliceCmdResult":       reflect.ValueOf(redis.NewZSliceCmdResult),
		"NewZWithKeyCmd":           reflect.ValueOf(redis.NewZWithKeyCmd),
		"NewZWithKeyCmdResult":     reflect.ValueOf(redis.NewZWithKeyCmdResult),
		"Nil":                      reflect.ValueOf(redis.Nil),
		"ParseURL":                 reflect.ValueOf(redis.ParseURL),
		"SetLogger":                reflect.ValueOf(redis.SetLogger),
		"TxFailedErr":              reflect.ValueOf(redis.TxFailedErr),

		// type definitions
		"BitCount":           reflect.ValueOf((*redis.BitCount)(nil)),
		"BoolCmd":            reflect.ValueOf((*redis.BoolCmd)(nil)),
		"BoolSliceCmd":       reflect.ValueOf((*redis.BoolSliceCmd)(nil)),
		"Client":             reflect.ValueOf((*redis.Client)(nil)),
		"ClusterClient":      reflect.ValueOf((*redis.ClusterClient)(nil)),
		"ClusterNode":        reflect.ValueOf((*redis.ClusterNode)(nil)),
		"ClusterOptions":     reflect.ValueOf((*redis.ClusterOptions)(nil)),
		"ClusterSlot":        reflect.ValueOf((*redis.ClusterSlot)(nil)),
		"ClusterSlotsCmd":    reflect.ValueOf((*redis.ClusterSlotsCmd)(nil)),
		"Cmd":                reflect.ValueOf((*redis.Cmd)(nil)),
		"Cmdable":            reflect.ValueOf((*redis.Cmdable)(nil)),
		"Cmder":              reflect.ValueOf((*redis.Cmder)(nil)),
		"CommandInfo":        reflect.ValueOf((*redis.CommandInfo)(nil)),
		"CommandsInfoCmd":    reflect.ValueOf((*redis.CommandsInfoCmd)(nil)),
		"Conn":               reflect.ValueOf((*redis.Conn)(nil)),
		"DurationCmd":        reflect.ValueOf((*redis.DurationCmd)(nil)),
		"FailoverOptions":    reflect.ValueOf((*redis.FailoverOptions)(nil)),
		"FloatCmd":           reflect.ValueOf((*redis.FloatCmd)(nil)),
		"GeoLocation":        reflect.ValueOf((*redis.GeoLocation)(nil)),
		"GeoLocationCmd":     reflect.ValueOf((*redis.GeoLocationCmd)(nil)),
		"GeoPos":             reflect.ValueOf((*redis.GeoPos)(nil)),
		"GeoPosCmd":          reflect.ValueOf((*redis.GeoPosCmd)(nil)),
		"GeoRadiusQuery":     reflect.ValueOf((*redis.GeoRadiusQuery)(nil)),
		"Hash":               reflect.ValueOf((*redis.Hash)(nil)),
		"Hook":               reflect.ValueOf((*redis.Hook)(nil)),
		"IntCmd":             reflect.ValueOf((*redis.IntCmd)(nil)),
		"IntSliceCmd":        reflect.ValueOf((*redis.IntSliceCmd)(nil)),
		"Limiter":            reflect.ValueOf((*redis.Limiter)(nil)),
		"Message":            reflect.ValueOf((*redis.Message)(nil)),
		"Options":            reflect.ValueOf((*redis.Options)(nil)),
		"Pipeline":           reflect.ValueOf((*redis.Pipeline)(nil)),
		"Pipeliner":          reflect.ValueOf((*redis.Pipeliner)(nil)),
		"Pong":               reflect.ValueOf((*redis.Pong)(nil)),
		"PoolStats":          reflect.ValueOf((*redis.PoolStats)(nil)),
		"PubSub":             reflect.ValueOf((*redis.PubSub)(nil)),
		"Ring":               reflect.ValueOf((*redis.Ring)(nil)),
		"RingOptions":        reflect.ValueOf((*redis.RingOptions)(nil)),
		"ScanCmd":            reflect.ValueOf((*redis.ScanCmd)(nil)),
		"ScanIterator":       reflect.ValueOf((*redis.ScanIterator)(nil)),
		"Script":             reflect.ValueOf((*redis.Script)(nil)),
		"SentinelClient":     reflect.ValueOf((*redis.SentinelClient)(nil)),
		"SliceCmd":           reflect.ValueOf((*redis.SliceCmd)(nil)),
		"Sort":               reflect.ValueOf((*redis.Sort)(nil)),
		"StatefulCmdable":    reflect.ValueOf((*redis.StatefulCmdable)(nil)),
		"StatusCmd":          reflect.ValueOf((*redis.StatusCmd)(nil)),
		"StringCmd":          reflect.ValueOf((*redis.StringCmd)(nil)),
		"StringIntMapCmd":    reflect.ValueOf((*redis.StringIntMapCmd)(nil)),
		"StringSliceCmd":     reflect.ValueOf((*redis.StringSliceCmd)(nil)),
		"StringStringMapCmd": reflect.ValueOf((*redis.StringStringMapCmd)(nil)),
		"StringStructMapCmd": reflect.ValueOf((*redis.StringStructMapCmd)(nil)),
		"Subscription":       reflect.ValueOf((*redis.Subscription)(nil)),
		"TimeCmd":            reflect.ValueOf((*redis.TimeCmd)(nil)),
		"Tx":                 reflect.ValueOf((*redis.Tx)(nil)),
		"UniversalClient":    reflect.ValueOf((*redis.UniversalClient)(nil)),
		"UniversalOptions":   reflect.ValueOf((*redis.UniversalOptions)(nil)),
		"XAddArgs":           reflect.ValueOf((*redis.XAddArgs)(nil)),
		"XClaimArgs":         reflect.ValueOf((*redis.XClaimArgs)(nil)),
		"XMessage":           reflect.ValueOf((*redis.XMessage)(nil)),
		"XMessageSliceCmd":   reflect.ValueOf((*redis.XMessageSliceCmd)(nil)),
		"XPending":           reflect.ValueOf((*redis.XPending)(nil)),
		"XPendingCmd":        reflect.ValueOf((*redis.XPendingCmd)(nil)),
		"XPendingExt":        reflect.ValueOf((*redis.XPendingExt)(nil)),
		"XPendingExtArgs":    reflect.ValueOf((*redis.XPendingExtArgs)(nil)),
		"XPendingExtCmd":     reflect.ValueOf((*redis.XPendingExtCmd)(nil)),
		"XReadArgs":          reflect.ValueOf((*redis.XReadArgs)(nil)),
		"XReadGroupArgs":     reflect.ValueOf((*redis.XReadGroupArgs)(nil)),
		"XStream":            reflect.ValueOf((*redis.XStream)(nil)),
		"XStreamSliceCmd":    reflect.ValueOf((*redis.XStreamSliceCmd)(nil)),
		"Z":                  reflect.ValueOf((*redis.Z)(nil)),
		"ZRangeBy":           reflect.ValueOf((*redis.ZRangeBy)(nil)),
		"ZSliceCmd":          reflect.ValueOf((*redis.ZSliceCmd)(nil)),
		"ZStore":             reflect.ValueOf((*redis.ZStore)(nil)),
		"ZWithKey":           reflect.ValueOf((*redis.ZWithKey)(nil)),
		"ZWithKeyCmd":        reflect.ValueOf((*redis.ZWithKeyCmd)(nil)),

		// interface wrapper definitions
		"_Cmdable":         reflect.ValueOf((*_github_com_go_redis_redis_Cmdable)(nil)),
		"_Cmder":           reflect.ValueOf((*_github_com_go_redis_redis_Cmder)(nil)),
		"_Hook":            reflect.ValueOf((*_github_com_go_redis_redis_Hook)(nil)),
		"_Limiter":         reflect.ValueOf((*_github_com_go_redis_redis_Limiter)(nil)),
		"_Pipeliner":       reflect.ValueOf((*_github_com_go_redis_redis_Pipeliner)(nil)),
		"_StatefulCmdable": reflect.ValueOf((*_github_com_go_redis_redis_StatefulCmdable)(nil)),
		"_UniversalClient": reflect.ValueOf((*_github_com_go_redis_redis_UniversalClient)(nil)),
	}
}

// _github_com_go_redis_redis_Cmdable is an interface wrapper for Cmdable type
type _github_com_go_redis_redis_Cmdable struct {
	WAppend                     func(key string, value string) *redis.IntCmd
	WBLPop                      func(timeout time.Duration, keys []string) *redis.StringSliceCmd
	WBRPop                      func(timeout time.Duration, keys []string) *redis.StringSliceCmd
	WBRPopLPush                 func(source string, destination string, timeout time.Duration) *redis.StringCmd
	WBZPopMax                   func(timeout time.Duration, keys []string) *redis.ZWithKeyCmd
	WBZPopMin                   func(timeout time.Duration, keys []string) *redis.ZWithKeyCmd
	WBgRewriteAOF               func() *redis.StatusCmd
	WBgSave                     func() *redis.StatusCmd
	WBitCount                   func(key string, bitCount *redis.BitCount) *redis.IntCmd
	WBitField                   func(key string, args []interface{}) *redis.IntSliceCmd
	WBitOpAnd                   func(destKey string, keys []string) *redis.IntCmd
	WBitOpNot                   func(destKey string, key string) *redis.IntCmd
	WBitOpOr                    func(destKey string, keys []string) *redis.IntCmd
	WBitOpXor                   func(destKey string, keys []string) *redis.IntCmd
	WBitPos                     func(key string, bit int64, pos []int64) *redis.IntCmd
	WClientGetName              func() *redis.StringCmd
	WClientID                   func() *redis.IntCmd
	WClientKill                 func(ipPort string) *redis.StatusCmd
	WClientKillByFilter         func(keys []string) *redis.IntCmd
	WClientList                 func() *redis.StringCmd
	WClientPause                func(dur time.Duration) *redis.BoolCmd
	WClusterAddSlots            func(slots []int) *redis.StatusCmd
	WClusterAddSlotsRange       func(min int, max int) *redis.StatusCmd
	WClusterCountFailureReports func(nodeID string) *redis.IntCmd
	WClusterCountKeysInSlot     func(slot int) *redis.IntCmd
	WClusterDelSlots            func(slots []int) *redis.StatusCmd
	WClusterDelSlotsRange       func(min int, max int) *redis.StatusCmd
	WClusterFailover            func() *redis.StatusCmd
	WClusterForget              func(nodeID string) *redis.StatusCmd
	WClusterGetKeysInSlot       func(slot int, count int) *redis.StringSliceCmd
	WClusterInfo                func() *redis.StringCmd
	WClusterKeySlot             func(key string) *redis.IntCmd
	WClusterMeet                func(host string, port string) *redis.StatusCmd
	WClusterNodes               func() *redis.StringCmd
	WClusterReplicate           func(nodeID string) *redis.StatusCmd
	WClusterResetHard           func() *redis.StatusCmd
	WClusterResetSoft           func() *redis.StatusCmd
	WClusterSaveConfig          func() *redis.StatusCmd
	WClusterSlaves              func(nodeID string) *redis.StringSliceCmd
	WClusterSlots               func() *redis.ClusterSlotsCmd
	WCommand                    func() *redis.CommandsInfoCmd
	WConfigGet                  func(parameter string) *redis.SliceCmd
	WConfigResetStat            func() *redis.StatusCmd
	WConfigRewrite              func() *redis.StatusCmd
	WConfigSet                  func(parameter string, value string) *redis.StatusCmd
	WDBSize                     func() *redis.IntCmd
	WDebugObject                func(key string) *redis.StringCmd
	WDecr                       func(key string) *redis.IntCmd
	WDecrBy                     func(key string, decrement int64) *redis.IntCmd
	WDel                        func(keys []string) *redis.IntCmd
	WDump                       func(key string) *redis.StringCmd
	WEcho                       func(message interface{}) *redis.StringCmd
	WEval                       func(script string, keys []string, args []interface{}) *redis.Cmd
	WEvalSha                    func(sha1 string, keys []string, args []interface{}) *redis.Cmd
	WExists                     func(keys []string) *redis.IntCmd
	WExpire                     func(key string, expiration time.Duration) *redis.BoolCmd
	WExpireAt                   func(key string, tm time.Time) *redis.BoolCmd
	WFlushAll                   func() *redis.StatusCmd
	WFlushAllAsync              func() *redis.StatusCmd
	WFlushDB                    func() *redis.StatusCmd
	WFlushDBAsync               func() *redis.StatusCmd
	WGeoAdd                     func(key string, geoLocation []*redis.GeoLocation) *redis.IntCmd
	WGeoDist                    func(key string, member1 string, member2 string, unit string) *redis.FloatCmd
	WGeoHash                    func(key string, members []string) *redis.StringSliceCmd
	WGeoPos                     func(key string, members []string) *redis.GeoPosCmd
	WGeoRadius                  func(key string, longitude float64, latitude float64, query *redis.GeoRadiusQuery) *redis.GeoLocationCmd
	WGeoRadiusByMember          func(key string, member string, query *redis.GeoRadiusQuery) *redis.GeoLocationCmd
	WGeoRadiusByMemberStore     func(key string, member string, query *redis.GeoRadiusQuery) *redis.IntCmd
	WGeoRadiusStore             func(key string, longitude float64, latitude float64, query *redis.GeoRadiusQuery) *redis.IntCmd
	WGet                        func(key string) *redis.StringCmd
	WGetBit                     func(key string, offset int64) *redis.IntCmd
	WGetRange                   func(key string, start int64, end int64) *redis.StringCmd
	WGetSet                     func(key string, value interface{}) *redis.StringCmd
	WHDel                       func(key string, fields []string) *redis.IntCmd
	WHExists                    func(key string, field string) *redis.BoolCmd
	WHGet                       func(key string, field string) *redis.StringCmd
	WHGetAll                    func(key string) *redis.StringStringMapCmd
	WHIncrBy                    func(key string, field string, incr int64) *redis.IntCmd
	WHIncrByFloat               func(key string, field string, incr float64) *redis.FloatCmd
	WHKeys                      func(key string) *redis.StringSliceCmd
	WHLen                       func(key string) *redis.IntCmd
	WHMGet                      func(key string, fields []string) *redis.SliceCmd
	WHMSet                      func(key string, fields map[string]interface{}) *redis.StatusCmd
	WHScan                      func(key string, cursor uint64, match string, count int64) *redis.ScanCmd
	WHSet                       func(key string, field string, value interface{}) *redis.BoolCmd
	WHSetNX                     func(key string, field string, value interface{}) *redis.BoolCmd
	WHVals                      func(key string) *redis.StringSliceCmd
	WIncr                       func(key string) *redis.IntCmd
	WIncrBy                     func(key string, value int64) *redis.IntCmd
	WIncrByFloat                func(key string, value float64) *redis.FloatCmd
	WInfo                       func(section []string) *redis.StringCmd
	WKeys                       func(pattern string) *redis.StringSliceCmd
	WLIndex                     func(key string, index int64) *redis.StringCmd
	WLInsert                    func(key string, op string, pivot interface{}, value interface{}) *redis.IntCmd
	WLInsertAfter               func(key string, pivot interface{}, value interface{}) *redis.IntCmd
	WLInsertBefore              func(key string, pivot interface{}, value interface{}) *redis.IntCmd
	WLLen                       func(key string) *redis.IntCmd
	WLPop                       func(key string) *redis.StringCmd
	WLPush                      func(key string, values []interface{}) *redis.IntCmd
	WLPushX                     func(key string, values []interface{}) *redis.IntCmd
	WLRange                     func(key string, start int64, stop int64) *redis.StringSliceCmd
	WLRem                       func(key string, count int64, value interface{}) *redis.IntCmd
	WLSet                       func(key string, index int64, value interface{}) *redis.StatusCmd
	WLTrim                      func(key string, start int64, stop int64) *redis.StatusCmd
	WLastSave                   func() *redis.IntCmd
	WMGet                       func(keys []string) *redis.SliceCmd
	WMSet                       func(pairs []interface{}) *redis.StatusCmd
	WMSetNX                     func(pairs []interface{}) *redis.BoolCmd
	WMemoryUsage                func(key string, samples []int) *redis.IntCmd
	WMigrate                    func(host string, port string, key string, db int, timeout time.Duration) *redis.StatusCmd
	WMove                       func(key string, db int) *redis.BoolCmd
	WObjectEncoding             func(key string) *redis.StringCmd
	WObjectIdleTime             func(key string) *redis.DurationCmd
	WObjectRefCount             func(key string) *redis.IntCmd
	WPExpire                    func(key string, expiration time.Duration) *redis.BoolCmd
	WPExpireAt                  func(key string, tm time.Time) *redis.BoolCmd
	WPFAdd                      func(key string, els []interface{}) *redis.IntCmd
	WPFCount                    func(keys []string) *redis.IntCmd
	WPFMerge                    func(dest string, keys []string) *redis.StatusCmd
	WPTTL                       func(key string) *redis.DurationCmd
	WPersist                    func(key string) *redis.BoolCmd
	WPing                       func() *redis.StatusCmd
	WPipeline                   func() redis.Pipeliner
	WPipelined                  func(fn func(redis.Pipeliner) error) ([]redis.Cmder, error)
	WPubSubChannels             func(pattern string) *redis.StringSliceCmd
	WPubSubNumPat               func() *redis.IntCmd
	WPubSubNumSub               func(channels []string) *redis.StringIntMapCmd
	WPublish                    func(channel string, message interface{}) *redis.IntCmd
	WQuit                       func() *redis.StatusCmd
	WRPop                       func(key string) *redis.StringCmd
	WRPopLPush                  func(source string, destination string) *redis.StringCmd
	WRPush                      func(key string, values []interface{}) *redis.IntCmd
	WRPushX                     func(key string, values []interface{}) *redis.IntCmd
	WRandomKey                  func() *redis.StringCmd
	WReadOnly                   func() *redis.StatusCmd
	WReadWrite                  func() *redis.StatusCmd
	WRename                     func(key string, newkey string) *redis.StatusCmd
	WRenameNX                   func(key string, newkey string) *redis.BoolCmd
	WRestore                    func(key string, ttl time.Duration, value string) *redis.StatusCmd
	WRestoreReplace             func(key string, ttl time.Duration, value string) *redis.StatusCmd
	WSAdd                       func(key string, members []interface{}) *redis.IntCmd
	WSCard                      func(key string) *redis.IntCmd
	WSDiff                      func(keys []string) *redis.StringSliceCmd
	WSDiffStore                 func(destination string, keys []string) *redis.IntCmd
	WSInter                     func(keys []string) *redis.StringSliceCmd
	WSInterStore                func(destination string, keys []string) *redis.IntCmd
	WSIsMember                  func(key string, member interface{}) *redis.BoolCmd
	WSMembers                   func(key string) *redis.StringSliceCmd
	WSMembersMap                func(key string) *redis.StringStructMapCmd
	WSMove                      func(source string, destination string, member interface{}) *redis.BoolCmd
	WSPop                       func(key string) *redis.StringCmd
	WSPopN                      func(key string, count int64) *redis.StringSliceCmd
	WSRandMember                func(key string) *redis.StringCmd
	WSRandMemberN               func(key string, count int64) *redis.StringSliceCmd
	WSRem                       func(key string, members []interface{}) *redis.IntCmd
	WSScan                      func(key string, cursor uint64, match string, count int64) *redis.ScanCmd
	WSUnion                     func(keys []string) *redis.StringSliceCmd
	WSUnionStore                func(destination string, keys []string) *redis.IntCmd
	WSave                       func() *redis.StatusCmd
	WScan                       func(cursor uint64, match string, count int64) *redis.ScanCmd
	WScriptExists               func(hashes []string) *redis.BoolSliceCmd
	WScriptFlush                func() *redis.StatusCmd
	WScriptKill                 func() *redis.StatusCmd
	WScriptLoad                 func(script string) *redis.StringCmd
	WSet                        func(key string, value interface{}, expiration time.Duration) *redis.StatusCmd
	WSetBit                     func(key string, offset int64, value int) *redis.IntCmd
	WSetNX                      func(key string, value interface{}, expiration time.Duration) *redis.BoolCmd
	WSetRange                   func(key string, offset int64, value string) *redis.IntCmd
	WSetXX                      func(key string, value interface{}, expiration time.Duration) *redis.BoolCmd
	WShutdown                   func() *redis.StatusCmd
	WShutdownNoSave             func() *redis.StatusCmd
	WShutdownSave               func() *redis.StatusCmd
	WSlaveOf                    func(host string, port string) *redis.StatusCmd
	WSort                       func(key string, sort *redis.Sort) *redis.StringSliceCmd
	WSortInterfaces             func(key string, sort *redis.Sort) *redis.SliceCmd
	WSortStore                  func(key string, store string, sort *redis.Sort) *redis.IntCmd
	WStrLen                     func(key string) *redis.IntCmd
	WTTL                        func(key string) *redis.DurationCmd
	WTime                       func() *redis.TimeCmd
	WTouch                      func(keys []string) *redis.IntCmd
	WTxPipeline                 func() redis.Pipeliner
	WTxPipelined                func(fn func(redis.Pipeliner) error) ([]redis.Cmder, error)
	WType                       func(key string) *redis.StatusCmd
	WUnlink                     func(keys []string) *redis.IntCmd
	WXAck                       func(stream string, group string, ids []string) *redis.IntCmd
	WXAdd                       func(a *redis.XAddArgs) *redis.StringCmd
	WXClaim                     func(a *redis.XClaimArgs) *redis.XMessageSliceCmd
	WXClaimJustID               func(a *redis.XClaimArgs) *redis.StringSliceCmd
	WXDel                       func(stream string, ids []string) *redis.IntCmd
	WXGroupCreate               func(stream string, group string, start string) *redis.StatusCmd
	WXGroupCreateMkStream       func(stream string, group string, start string) *redis.StatusCmd
	WXGroupDelConsumer          func(stream string, group string, consumer string) *redis.IntCmd
	WXGroupDestroy              func(stream string, group string) *redis.IntCmd
	WXGroupSetID                func(stream string, group string, start string) *redis.StatusCmd
	WXLen                       func(stream string) *redis.IntCmd
	WXPending                   func(stream string, group string) *redis.XPendingCmd
	WXPendingExt                func(a *redis.XPendingExtArgs) *redis.XPendingExtCmd
	WXRange                     func(stream string, start string, stop string) *redis.XMessageSliceCmd
	WXRangeN                    func(stream string, start string, stop string, count int64) *redis.XMessageSliceCmd
	WXRead                      func(a *redis.XReadArgs) *redis.XStreamSliceCmd
	WXReadGroup                 func(a *redis.XReadGroupArgs) *redis.XStreamSliceCmd
	WXReadStreams               func(streams []string) *redis.XStreamSliceCmd
	WXRevRange                  func(stream string, start string, stop string) *redis.XMessageSliceCmd
	WXRevRangeN                 func(stream string, start string, stop string, count int64) *redis.XMessageSliceCmd
	WXTrim                      func(key string, maxLen int64) *redis.IntCmd
	WXTrimApprox                func(key string, maxLen int64) *redis.IntCmd
	WZAdd                       func(key string, members []*redis.Z) *redis.IntCmd
	WZAddCh                     func(key string, members []*redis.Z) *redis.IntCmd
	WZAddNX                     func(key string, members []*redis.Z) *redis.IntCmd
	WZAddNXCh                   func(key string, members []*redis.Z) *redis.IntCmd
	WZAddXX                     func(key string, members []*redis.Z) *redis.IntCmd
	WZAddXXCh                   func(key string, members []*redis.Z) *redis.IntCmd
	WZCard                      func(key string) *redis.IntCmd
	WZCount                     func(key string, min string, max string) *redis.IntCmd
	WZIncr                      func(key string, member *redis.Z) *redis.FloatCmd
	WZIncrBy                    func(key string, increment float64, member string) *redis.FloatCmd
	WZIncrNX                    func(key string, member *redis.Z) *redis.FloatCmd
	WZIncrXX                    func(key string, member *redis.Z) *redis.FloatCmd
	WZInterStore                func(destination string, store *redis.ZStore) *redis.IntCmd
	WZLexCount                  func(key string, min string, max string) *redis.IntCmd
	WZPopMax                    func(key string, count []int64) *redis.ZSliceCmd
	WZPopMin                    func(key string, count []int64) *redis.ZSliceCmd
	WZRange                     func(key string, start int64, stop int64) *redis.StringSliceCmd
	WZRangeByLex                func(key string, opt *redis.ZRangeBy) *redis.StringSliceCmd
	WZRangeByScore              func(key string, opt *redis.ZRangeBy) *redis.StringSliceCmd
	WZRangeByScoreWithScores    func(key string, opt *redis.ZRangeBy) *redis.ZSliceCmd
	WZRangeWithScores           func(key string, start int64, stop int64) *redis.ZSliceCmd
	WZRank                      func(key string, member string) *redis.IntCmd
	WZRem                       func(key string, members []interface{}) *redis.IntCmd
	WZRemRangeByLex             func(key string, min string, max string) *redis.IntCmd
	WZRemRangeByRank            func(key string, start int64, stop int64) *redis.IntCmd
	WZRemRangeByScore           func(key string, min string, max string) *redis.IntCmd
	WZRevRange                  func(key string, start int64, stop int64) *redis.StringSliceCmd
	WZRevRangeByLex             func(key string, opt *redis.ZRangeBy) *redis.StringSliceCmd
	WZRevRangeByScore           func(key string, opt *redis.ZRangeBy) *redis.StringSliceCmd
	WZRevRangeByScoreWithScores func(key string, opt *redis.ZRangeBy) *redis.ZSliceCmd
	WZRevRangeWithScores        func(key string, start int64, stop int64) *redis.ZSliceCmd
	WZRevRank                   func(key string, member string) *redis.IntCmd
	WZScan                      func(key string, cursor uint64, match string, count int64) *redis.ScanCmd
	WZScore                     func(key string, member string) *redis.FloatCmd
	WZUnionStore                func(dest string, store *redis.ZStore) *redis.IntCmd
}

func (W _github_com_go_redis_redis_Cmdable) Append(key string, value string) *redis.IntCmd {
	return W.WAppend(key, value)
}
func (W _github_com_go_redis_redis_Cmdable) BLPop(timeout time.Duration, keys []string) *redis.StringSliceCmd {
	return W.WBLPop(timeout, keys)
}
func (W _github_com_go_redis_redis_Cmdable) BRPop(timeout time.Duration, keys []string) *redis.StringSliceCmd {
	return W.WBRPop(timeout, keys)
}
func (W _github_com_go_redis_redis_Cmdable) BRPopLPush(source string, destination string, timeout time.Duration) *redis.StringCmd {
	return W.WBRPopLPush(source, destination, timeout)
}
func (W _github_com_go_redis_redis_Cmdable) BZPopMax(timeout time.Duration, keys []string) *redis.ZWithKeyCmd {
	return W.WBZPopMax(timeout, keys)
}
func (W _github_com_go_redis_redis_Cmdable) BZPopMin(timeout time.Duration, keys []string) *redis.ZWithKeyCmd {
	return W.WBZPopMin(timeout, keys)
}
func (W _github_com_go_redis_redis_Cmdable) BgRewriteAOF() *redis.StatusCmd {
	return W.WBgRewriteAOF()
}
func (W _github_com_go_redis_redis_Cmdable) BgSave() *redis.StatusCmd { return W.WBgSave() }
func (W _github_com_go_redis_redis_Cmdable) BitCount(key string, bitCount *redis.BitCount) *redis.IntCmd {
	return W.WBitCount(key, bitCount)
}
func (W _github_com_go_redis_redis_Cmdable) BitField(key string, args []interface{}) *redis.IntSliceCmd {
	return W.WBitField(key, args)
}
func (W _github_com_go_redis_redis_Cmdable) BitOpAnd(destKey string, keys []string) *redis.IntCmd {
	return W.WBitOpAnd(destKey, keys)
}
func (W _github_com_go_redis_redis_Cmdable) BitOpNot(destKey string, key string) *redis.IntCmd {
	return W.WBitOpNot(destKey, key)
}
func (W _github_com_go_redis_redis_Cmdable) BitOpOr(destKey string, keys []string) *redis.IntCmd {
	return W.WBitOpOr(destKey, keys)
}
func (W _github_com_go_redis_redis_Cmdable) BitOpXor(destKey string, keys []string) *redis.IntCmd {
	return W.WBitOpXor(destKey, keys)
}
func (W _github_com_go_redis_redis_Cmdable) BitPos(key string, bit int64, pos []int64) *redis.IntCmd {
	return W.WBitPos(key, bit, pos)
}
func (W _github_com_go_redis_redis_Cmdable) ClientGetName() *redis.StringCmd {
	return W.WClientGetName()
}
func (W _github_com_go_redis_redis_Cmdable) ClientID() *redis.IntCmd { return W.WClientID() }
func (W _github_com_go_redis_redis_Cmdable) ClientKill(ipPort string) *redis.StatusCmd {
	return W.WClientKill(ipPort)
}
func (W _github_com_go_redis_redis_Cmdable) ClientKillByFilter(keys []string) *redis.IntCmd {
	return W.WClientKillByFilter(keys)
}
func (W _github_com_go_redis_redis_Cmdable) ClientList() *redis.StringCmd { return W.WClientList() }
func (W _github_com_go_redis_redis_Cmdable) ClientPause(dur time.Duration) *redis.BoolCmd {
	return W.WClientPause(dur)
}
func (W _github_com_go_redis_redis_Cmdable) ClusterAddSlots(slots []int) *redis.StatusCmd {
	return W.WClusterAddSlots(slots)
}
func (W _github_com_go_redis_redis_Cmdable) ClusterAddSlotsRange(min int, max int) *redis.StatusCmd {
	return W.WClusterAddSlotsRange(min, max)
}
func (W _github_com_go_redis_redis_Cmdable) ClusterCountFailureReports(nodeID string) *redis.IntCmd {
	return W.WClusterCountFailureReports(nodeID)
}
func (W _github_com_go_redis_redis_Cmdable) ClusterCountKeysInSlot(slot int) *redis.IntCmd {
	return W.WClusterCountKeysInSlot(slot)
}
func (W _github_com_go_redis_redis_Cmdable) ClusterDelSlots(slots []int) *redis.StatusCmd {
	return W.WClusterDelSlots(slots)
}
func (W _github_com_go_redis_redis_Cmdable) ClusterDelSlotsRange(min int, max int) *redis.StatusCmd {
	return W.WClusterDelSlotsRange(min, max)
}
func (W _github_com_go_redis_redis_Cmdable) ClusterFailover() *redis.StatusCmd {
	return W.WClusterFailover()
}
func (W _github_com_go_redis_redis_Cmdable) ClusterForget(nodeID string) *redis.StatusCmd {
	return W.WClusterForget(nodeID)
}
func (W _github_com_go_redis_redis_Cmdable) ClusterGetKeysInSlot(slot int, count int) *redis.StringSliceCmd {
	return W.WClusterGetKeysInSlot(slot, count)
}
func (W _github_com_go_redis_redis_Cmdable) ClusterInfo() *redis.StringCmd { return W.WClusterInfo() }
func (W _github_com_go_redis_redis_Cmdable) ClusterKeySlot(key string) *redis.IntCmd {
	return W.WClusterKeySlot(key)
}
func (W _github_com_go_redis_redis_Cmdable) ClusterMeet(host string, port string) *redis.StatusCmd {
	return W.WClusterMeet(host, port)
}
func (W _github_com_go_redis_redis_Cmdable) ClusterNodes() *redis.StringCmd {
	return W.WClusterNodes()
}
func (W _github_com_go_redis_redis_Cmdable) ClusterReplicate(nodeID string) *redis.StatusCmd {
	return W.WClusterReplicate(nodeID)
}
func (W _github_com_go_redis_redis_Cmdable) ClusterResetHard() *redis.StatusCmd {
	return W.WClusterResetHard()
}
func (W _github_com_go_redis_redis_Cmdable) ClusterResetSoft() *redis.StatusCmd {
	return W.WClusterResetSoft()
}
func (W _github_com_go_redis_redis_Cmdable) ClusterSaveConfig() *redis.StatusCmd {
	return W.WClusterSaveConfig()
}
func (W _github_com_go_redis_redis_Cmdable) ClusterSlaves(nodeID string) *redis.StringSliceCmd {
	return W.WClusterSlaves(nodeID)
}
func (W _github_com_go_redis_redis_Cmdable) ClusterSlots() *redis.ClusterSlotsCmd {
	return W.WClusterSlots()
}
func (W _github_com_go_redis_redis_Cmdable) Command() *redis.CommandsInfoCmd { return W.WCommand() }
func (W _github_com_go_redis_redis_Cmdable) ConfigGet(parameter string) *redis.SliceCmd {
	return W.WConfigGet(parameter)
}
func (W _github_com_go_redis_redis_Cmdable) ConfigResetStat() *redis.StatusCmd {
	return W.WConfigResetStat()
}
func (W _github_com_go_redis_redis_Cmdable) ConfigRewrite() *redis.StatusCmd {
	return W.WConfigRewrite()
}
func (W _github_com_go_redis_redis_Cmdable) ConfigSet(parameter string, value string) *redis.StatusCmd {
	return W.WConfigSet(parameter, value)
}
func (W _github_com_go_redis_redis_Cmdable) DBSize() *redis.IntCmd { return W.WDBSize() }
func (W _github_com_go_redis_redis_Cmdable) DebugObject(key string) *redis.StringCmd {
	return W.WDebugObject(key)
}
func (W _github_com_go_redis_redis_Cmdable) Decr(key string) *redis.IntCmd { return W.WDecr(key) }
func (W _github_com_go_redis_redis_Cmdable) DecrBy(key string, decrement int64) *redis.IntCmd {
	return W.WDecrBy(key, decrement)
}
func (W _github_com_go_redis_redis_Cmdable) Del(keys []string) *redis.IntCmd  { return W.WDel(keys) }
func (W _github_com_go_redis_redis_Cmdable) Dump(key string) *redis.StringCmd { return W.WDump(key) }
func (W _github_com_go_redis_redis_Cmdable) Echo(message interface{}) *redis.StringCmd {
	return W.WEcho(message)
}
func (W _github_com_go_redis_redis_Cmdable) Eval(script string, keys []string, args []interface{}) *redis.Cmd {
	return W.WEval(script, keys, args)
}
func (W _github_com_go_redis_redis_Cmdable) EvalSha(sha1 string, keys []string, args []interface{}) *redis.Cmd {
	return W.WEvalSha(sha1, keys, args)
}
func (W _github_com_go_redis_redis_Cmdable) Exists(keys []string) *redis.IntCmd {
	return W.WExists(keys)
}
func (W _github_com_go_redis_redis_Cmdable) Expire(key string, expiration time.Duration) *redis.BoolCmd {
	return W.WExpire(key, expiration)
}
func (W _github_com_go_redis_redis_Cmdable) ExpireAt(key string, tm time.Time) *redis.BoolCmd {
	return W.WExpireAt(key, tm)
}
func (W _github_com_go_redis_redis_Cmdable) FlushAll() *redis.StatusCmd { return W.WFlushAll() }
func (W _github_com_go_redis_redis_Cmdable) FlushAllAsync() *redis.StatusCmd {
	return W.WFlushAllAsync()
}
func (W _github_com_go_redis_redis_Cmdable) FlushDB() *redis.StatusCmd { return W.WFlushDB() }
func (W _github_com_go_redis_redis_Cmdable) FlushDBAsync() *redis.StatusCmd {
	return W.WFlushDBAsync()
}
func (W _github_com_go_redis_redis_Cmdable) GeoAdd(key string, geoLocation []*redis.GeoLocation) *redis.IntCmd {
	return W.WGeoAdd(key, geoLocation)
}
func (W _github_com_go_redis_redis_Cmdable) GeoDist(key string, member1 string, member2 string, unit string) *redis.FloatCmd {
	return W.WGeoDist(key, member1, member2, unit)
}
func (W _github_com_go_redis_redis_Cmdable) GeoHash(key string, members []string) *redis.StringSliceCmd {
	return W.WGeoHash(key, members)
}
func (W _github_com_go_redis_redis_Cmdable) GeoPos(key string, members []string) *redis.GeoPosCmd {
	return W.WGeoPos(key, members)
}
func (W _github_com_go_redis_redis_Cmdable) GeoRadius(key string, longitude float64, latitude float64, query *redis.GeoRadiusQuery) *redis.GeoLocationCmd {
	return W.WGeoRadius(key, longitude, latitude, query)
}
func (W _github_com_go_redis_redis_Cmdable) GeoRadiusByMember(key string, member string, query *redis.GeoRadiusQuery) *redis.GeoLocationCmd {
	return W.WGeoRadiusByMember(key, member, query)
}
func (W _github_com_go_redis_redis_Cmdable) GeoRadiusByMemberStore(key string, member string, query *redis.GeoRadiusQuery) *redis.IntCmd {
	return W.WGeoRadiusByMemberStore(key, member, query)
}
func (W _github_com_go_redis_redis_Cmdable) GeoRadiusStore(key string, longitude float64, latitude float64, query *redis.GeoRadiusQuery) *redis.IntCmd {
	return W.WGeoRadiusStore(key, longitude, latitude, query)
}
func (W _github_com_go_redis_redis_Cmdable) Get(key string) *redis.StringCmd { return W.WGet(key) }
func (W _github_com_go_redis_redis_Cmdable) GetBit(key string, offset int64) *redis.IntCmd {
	return W.WGetBit(key, offset)
}
func (W _github_com_go_redis_redis_Cmdable) GetRange(key string, start int64, end int64) *redis.StringCmd {
	return W.WGetRange(key, start, end)
}
func (W _github_com_go_redis_redis_Cmdable) GetSet(key string, value interface{}) *redis.StringCmd {
	return W.WGetSet(key, value)
}
func (W _github_com_go_redis_redis_Cmdable) HDel(key string, fields []string) *redis.IntCmd {
	return W.WHDel(key, fields)
}
func (W _github_com_go_redis_redis_Cmdable) HExists(key string, field string) *redis.BoolCmd {
	return W.WHExists(key, field)
}
func (W _github_com_go_redis_redis_Cmdable) HGet(key string, field string) *redis.StringCmd {
	return W.WHGet(key, field)
}
func (W _github_com_go_redis_redis_Cmdable) HGetAll(key string) *redis.StringStringMapCmd {
	return W.WHGetAll(key)
}
func (W _github_com_go_redis_redis_Cmdable) HIncrBy(key string, field string, incr int64) *redis.IntCmd {
	return W.WHIncrBy(key, field, incr)
}
func (W _github_com_go_redis_redis_Cmdable) HIncrByFloat(key string, field string, incr float64) *redis.FloatCmd {
	return W.WHIncrByFloat(key, field, incr)
}
func (W _github_com_go_redis_redis_Cmdable) HKeys(key string) *redis.StringSliceCmd {
	return W.WHKeys(key)
}
func (W _github_com_go_redis_redis_Cmdable) HLen(key string) *redis.IntCmd { return W.WHLen(key) }
func (W _github_com_go_redis_redis_Cmdable) HMGet(key string, fields []string) *redis.SliceCmd {
	return W.WHMGet(key, fields)
}
func (W _github_com_go_redis_redis_Cmdable) HMSet(key string, fields map[string]interface{}) *redis.StatusCmd {
	return W.WHMSet(key, fields)
}
func (W _github_com_go_redis_redis_Cmdable) HScan(key string, cursor uint64, match string, count int64) *redis.ScanCmd {
	return W.WHScan(key, cursor, match, count)
}
func (W _github_com_go_redis_redis_Cmdable) HSet(key string, field string, value interface{}) *redis.BoolCmd {
	return W.WHSet(key, field, value)
}
func (W _github_com_go_redis_redis_Cmdable) HSetNX(key string, field string, value interface{}) *redis.BoolCmd {
	return W.WHSetNX(key, field, value)
}
func (W _github_com_go_redis_redis_Cmdable) HVals(key string) *redis.StringSliceCmd {
	return W.WHVals(key)
}
func (W _github_com_go_redis_redis_Cmdable) Incr(key string) *redis.IntCmd { return W.WIncr(key) }
func (W _github_com_go_redis_redis_Cmdable) IncrBy(key string, value int64) *redis.IntCmd {
	return W.WIncrBy(key, value)
}
func (W _github_com_go_redis_redis_Cmdable) IncrByFloat(key string, value float64) *redis.FloatCmd {
	return W.WIncrByFloat(key, value)
}
func (W _github_com_go_redis_redis_Cmdable) Info(section []string) *redis.StringCmd {
	return W.WInfo(section)
}
func (W _github_com_go_redis_redis_Cmdable) Keys(pattern string) *redis.StringSliceCmd {
	return W.WKeys(pattern)
}
func (W _github_com_go_redis_redis_Cmdable) LIndex(key string, index int64) *redis.StringCmd {
	return W.WLIndex(key, index)
}
func (W _github_com_go_redis_redis_Cmdable) LInsert(key string, op string, pivot interface{}, value interface{}) *redis.IntCmd {
	return W.WLInsert(key, op, pivot, value)
}
func (W _github_com_go_redis_redis_Cmdable) LInsertAfter(key string, pivot interface{}, value interface{}) *redis.IntCmd {
	return W.WLInsertAfter(key, pivot, value)
}
func (W _github_com_go_redis_redis_Cmdable) LInsertBefore(key string, pivot interface{}, value interface{}) *redis.IntCmd {
	return W.WLInsertBefore(key, pivot, value)
}
func (W _github_com_go_redis_redis_Cmdable) LLen(key string) *redis.IntCmd    { return W.WLLen(key) }
func (W _github_com_go_redis_redis_Cmdable) LPop(key string) *redis.StringCmd { return W.WLPop(key) }
func (W _github_com_go_redis_redis_Cmdable) LPush(key string, values []interface{}) *redis.IntCmd {
	return W.WLPush(key, values)
}
func (W _github_com_go_redis_redis_Cmdable) LPushX(key string, values []interface{}) *redis.IntCmd {
	return W.WLPushX(key, values)
}
func (W _github_com_go_redis_redis_Cmdable) LRange(key string, start int64, stop int64) *redis.StringSliceCmd {
	return W.WLRange(key, start, stop)
}
func (W _github_com_go_redis_redis_Cmdable) LRem(key string, count int64, value interface{}) *redis.IntCmd {
	return W.WLRem(key, count, value)
}
func (W _github_com_go_redis_redis_Cmdable) LSet(key string, index int64, value interface{}) *redis.StatusCmd {
	return W.WLSet(key, index, value)
}
func (W _github_com_go_redis_redis_Cmdable) LTrim(key string, start int64, stop int64) *redis.StatusCmd {
	return W.WLTrim(key, start, stop)
}
func (W _github_com_go_redis_redis_Cmdable) LastSave() *redis.IntCmd { return W.WLastSave() }
func (W _github_com_go_redis_redis_Cmdable) MGet(keys []string) *redis.SliceCmd {
	return W.WMGet(keys)
}
func (W _github_com_go_redis_redis_Cmdable) MSet(pairs []interface{}) *redis.StatusCmd {
	return W.WMSet(pairs)
}
func (W _github_com_go_redis_redis_Cmdable) MSetNX(pairs []interface{}) *redis.BoolCmd {
	return W.WMSetNX(pairs)
}
func (W _github_com_go_redis_redis_Cmdable) MemoryUsage(key string, samples []int) *redis.IntCmd {
	return W.WMemoryUsage(key, samples)
}
func (W _github_com_go_redis_redis_Cmdable) Migrate(host string, port string, key string, db int, timeout time.Duration) *redis.StatusCmd {
	return W.WMigrate(host, port, key, db, timeout)
}
func (W _github_com_go_redis_redis_Cmdable) Move(key string, db int) *redis.BoolCmd {
	return W.WMove(key, db)
}
func (W _github_com_go_redis_redis_Cmdable) ObjectEncoding(key string) *redis.StringCmd {
	return W.WObjectEncoding(key)
}
func (W _github_com_go_redis_redis_Cmdable) ObjectIdleTime(key string) *redis.DurationCmd {
	return W.WObjectIdleTime(key)
}
func (W _github_com_go_redis_redis_Cmdable) ObjectRefCount(key string) *redis.IntCmd {
	return W.WObjectRefCount(key)
}
func (W _github_com_go_redis_redis_Cmdable) PExpire(key string, expiration time.Duration) *redis.BoolCmd {
	return W.WPExpire(key, expiration)
}
func (W _github_com_go_redis_redis_Cmdable) PExpireAt(key string, tm time.Time) *redis.BoolCmd {
	return W.WPExpireAt(key, tm)
}
func (W _github_com_go_redis_redis_Cmdable) PFAdd(key string, els []interface{}) *redis.IntCmd {
	return W.WPFAdd(key, els)
}
func (W _github_com_go_redis_redis_Cmdable) PFCount(keys []string) *redis.IntCmd {
	return W.WPFCount(keys)
}
func (W _github_com_go_redis_redis_Cmdable) PFMerge(dest string, keys []string) *redis.StatusCmd {
	return W.WPFMerge(dest, keys)
}
func (W _github_com_go_redis_redis_Cmdable) PTTL(key string) *redis.DurationCmd { return W.WPTTL(key) }
func (W _github_com_go_redis_redis_Cmdable) Persist(key string) *redis.BoolCmd {
	return W.WPersist(key)
}
func (W _github_com_go_redis_redis_Cmdable) Ping() *redis.StatusCmd    { return W.WPing() }
func (W _github_com_go_redis_redis_Cmdable) Pipeline() redis.Pipeliner { return W.WPipeline() }
func (W _github_com_go_redis_redis_Cmdable) Pipelined(fn func(redis.Pipeliner) error) ([]redis.Cmder, error) {
	return W.WPipelined(fn)
}
func (W _github_com_go_redis_redis_Cmdable) PubSubChannels(pattern string) *redis.StringSliceCmd {
	return W.WPubSubChannels(pattern)
}
func (W _github_com_go_redis_redis_Cmdable) PubSubNumPat() *redis.IntCmd { return W.WPubSubNumPat() }
func (W _github_com_go_redis_redis_Cmdable) PubSubNumSub(channels []string) *redis.StringIntMapCmd {
	return W.WPubSubNumSub(channels)
}
func (W _github_com_go_redis_redis_Cmdable) Publish(channel string, message interface{}) *redis.IntCmd {
	return W.WPublish(channel, message)
}
func (W _github_com_go_redis_redis_Cmdable) Quit() *redis.StatusCmd           { return W.WQuit() }
func (W _github_com_go_redis_redis_Cmdable) RPop(key string) *redis.StringCmd { return W.WRPop(key) }
func (W _github_com_go_redis_redis_Cmdable) RPopLPush(source string, destination string) *redis.StringCmd {
	return W.WRPopLPush(source, destination)
}
func (W _github_com_go_redis_redis_Cmdable) RPush(key string, values []interface{}) *redis.IntCmd {
	return W.WRPush(key, values)
}
func (W _github_com_go_redis_redis_Cmdable) RPushX(key string, values []interface{}) *redis.IntCmd {
	return W.WRPushX(key, values)
}
func (W _github_com_go_redis_redis_Cmdable) RandomKey() *redis.StringCmd { return W.WRandomKey() }
func (W _github_com_go_redis_redis_Cmdable) ReadOnly() *redis.StatusCmd  { return W.WReadOnly() }
func (W _github_com_go_redis_redis_Cmdable) ReadWrite() *redis.StatusCmd { return W.WReadWrite() }
func (W _github_com_go_redis_redis_Cmdable) Rename(key string, newkey string) *redis.StatusCmd {
	return W.WRename(key, newkey)
}
func (W _github_com_go_redis_redis_Cmdable) RenameNX(key string, newkey string) *redis.BoolCmd {
	return W.WRenameNX(key, newkey)
}
func (W _github_com_go_redis_redis_Cmdable) Restore(key string, ttl time.Duration, value string) *redis.StatusCmd {
	return W.WRestore(key, ttl, value)
}
func (W _github_com_go_redis_redis_Cmdable) RestoreReplace(key string, ttl time.Duration, value string) *redis.StatusCmd {
	return W.WRestoreReplace(key, ttl, value)
}
func (W _github_com_go_redis_redis_Cmdable) SAdd(key string, members []interface{}) *redis.IntCmd {
	return W.WSAdd(key, members)
}
func (W _github_com_go_redis_redis_Cmdable) SCard(key string) *redis.IntCmd { return W.WSCard(key) }
func (W _github_com_go_redis_redis_Cmdable) SDiff(keys []string) *redis.StringSliceCmd {
	return W.WSDiff(keys)
}
func (W _github_com_go_redis_redis_Cmdable) SDiffStore(destination string, keys []string) *redis.IntCmd {
	return W.WSDiffStore(destination, keys)
}
func (W _github_com_go_redis_redis_Cmdable) SInter(keys []string) *redis.StringSliceCmd {
	return W.WSInter(keys)
}
func (W _github_com_go_redis_redis_Cmdable) SInterStore(destination string, keys []string) *redis.IntCmd {
	return W.WSInterStore(destination, keys)
}
func (W _github_com_go_redis_redis_Cmdable) SIsMember(key string, member interface{}) *redis.BoolCmd {
	return W.WSIsMember(key, member)
}
func (W _github_com_go_redis_redis_Cmdable) SMembers(key string) *redis.StringSliceCmd {
	return W.WSMembers(key)
}
func (W _github_com_go_redis_redis_Cmdable) SMembersMap(key string) *redis.StringStructMapCmd {
	return W.WSMembersMap(key)
}
func (W _github_com_go_redis_redis_Cmdable) SMove(source string, destination string, member interface{}) *redis.BoolCmd {
	return W.WSMove(source, destination, member)
}
func (W _github_com_go_redis_redis_Cmdable) SPop(key string) *redis.StringCmd { return W.WSPop(key) }
func (W _github_com_go_redis_redis_Cmdable) SPopN(key string, count int64) *redis.StringSliceCmd {
	return W.WSPopN(key, count)
}
func (W _github_com_go_redis_redis_Cmdable) SRandMember(key string) *redis.StringCmd {
	return W.WSRandMember(key)
}
func (W _github_com_go_redis_redis_Cmdable) SRandMemberN(key string, count int64) *redis.StringSliceCmd {
	return W.WSRandMemberN(key, count)
}
func (W _github_com_go_redis_redis_Cmdable) SRem(key string, members []interface{}) *redis.IntCmd {
	return W.WSRem(key, members)
}
func (W _github_com_go_redis_redis_Cmdable) SScan(key string, cursor uint64, match string, count int64) *redis.ScanCmd {
	return W.WSScan(key, cursor, match, count)
}
func (W _github_com_go_redis_redis_Cmdable) SUnion(keys []string) *redis.StringSliceCmd {
	return W.WSUnion(keys)
}
func (W _github_com_go_redis_redis_Cmdable) SUnionStore(destination string, keys []string) *redis.IntCmd {
	return W.WSUnionStore(destination, keys)
}
func (W _github_com_go_redis_redis_Cmdable) Save() *redis.StatusCmd { return W.WSave() }
func (W _github_com_go_redis_redis_Cmdable) Scan(cursor uint64, match string, count int64) *redis.ScanCmd {
	return W.WScan(cursor, match, count)
}
func (W _github_com_go_redis_redis_Cmdable) ScriptExists(hashes []string) *redis.BoolSliceCmd {
	return W.WScriptExists(hashes)
}
func (W _github_com_go_redis_redis_Cmdable) ScriptFlush() *redis.StatusCmd { return W.WScriptFlush() }
func (W _github_com_go_redis_redis_Cmdable) ScriptKill() *redis.StatusCmd  { return W.WScriptKill() }
func (W _github_com_go_redis_redis_Cmdable) ScriptLoad(script string) *redis.StringCmd {
	return W.WScriptLoad(script)
}
func (W _github_com_go_redis_redis_Cmdable) Set(key string, value interface{}, expiration time.Duration) *redis.StatusCmd {
	return W.WSet(key, value, expiration)
}
func (W _github_com_go_redis_redis_Cmdable) SetBit(key string, offset int64, value int) *redis.IntCmd {
	return W.WSetBit(key, offset, value)
}
func (W _github_com_go_redis_redis_Cmdable) SetNX(key string, value interface{}, expiration time.Duration) *redis.BoolCmd {
	return W.WSetNX(key, value, expiration)
}
func (W _github_com_go_redis_redis_Cmdable) SetRange(key string, offset int64, value string) *redis.IntCmd {
	return W.WSetRange(key, offset, value)
}
func (W _github_com_go_redis_redis_Cmdable) SetXX(key string, value interface{}, expiration time.Duration) *redis.BoolCmd {
	return W.WSetXX(key, value, expiration)
}
func (W _github_com_go_redis_redis_Cmdable) Shutdown() *redis.StatusCmd { return W.WShutdown() }
func (W _github_com_go_redis_redis_Cmdable) ShutdownNoSave() *redis.StatusCmd {
	return W.WShutdownNoSave()
}
func (W _github_com_go_redis_redis_Cmdable) ShutdownSave() *redis.StatusCmd {
	return W.WShutdownSave()
}
func (W _github_com_go_redis_redis_Cmdable) SlaveOf(host string, port string) *redis.StatusCmd {
	return W.WSlaveOf(host, port)
}
func (W _github_com_go_redis_redis_Cmdable) Sort(key string, sort *redis.Sort) *redis.StringSliceCmd {
	return W.WSort(key, sort)
}
func (W _github_com_go_redis_redis_Cmdable) SortInterfaces(key string, sort *redis.Sort) *redis.SliceCmd {
	return W.WSortInterfaces(key, sort)
}
func (W _github_com_go_redis_redis_Cmdable) SortStore(key string, store string, sort *redis.Sort) *redis.IntCmd {
	return W.WSortStore(key, store, sort)
}
func (W _github_com_go_redis_redis_Cmdable) StrLen(key string) *redis.IntCmd   { return W.WStrLen(key) }
func (W _github_com_go_redis_redis_Cmdable) TTL(key string) *redis.DurationCmd { return W.WTTL(key) }
func (W _github_com_go_redis_redis_Cmdable) Time() *redis.TimeCmd              { return W.WTime() }
func (W _github_com_go_redis_redis_Cmdable) Touch(keys []string) *redis.IntCmd {
	return W.WTouch(keys)
}
func (W _github_com_go_redis_redis_Cmdable) TxPipeline() redis.Pipeliner { return W.WTxPipeline() }
func (W _github_com_go_redis_redis_Cmdable) TxPipelined(fn func(redis.Pipeliner) error) ([]redis.Cmder, error) {
	return W.WTxPipelined(fn)
}
func (W _github_com_go_redis_redis_Cmdable) Type(key string) *redis.StatusCmd { return W.WType(key) }
func (W _github_com_go_redis_redis_Cmdable) Unlink(keys []string) *redis.IntCmd {
	return W.WUnlink(keys)
}
func (W _github_com_go_redis_redis_Cmdable) XAck(stream string, group string, ids []string) *redis.IntCmd {
	return W.WXAck(stream, group, ids)
}
func (W _github_com_go_redis_redis_Cmdable) XAdd(a *redis.XAddArgs) *redis.StringCmd {
	return W.WXAdd(a)
}
func (W _github_com_go_redis_redis_Cmdable) XClaim(a *redis.XClaimArgs) *redis.XMessageSliceCmd {
	return W.WXClaim(a)
}
func (W _github_com_go_redis_redis_Cmdable) XClaimJustID(a *redis.XClaimArgs) *redis.StringSliceCmd {
	return W.WXClaimJustID(a)
}
func (W _github_com_go_redis_redis_Cmdable) XDel(stream string, ids []string) *redis.IntCmd {
	return W.WXDel(stream, ids)
}
func (W _github_com_go_redis_redis_Cmdable) XGroupCreate(stream string, group string, start string) *redis.StatusCmd {
	return W.WXGroupCreate(stream, group, start)
}
func (W _github_com_go_redis_redis_Cmdable) XGroupCreateMkStream(stream string, group string, start string) *redis.StatusCmd {
	return W.WXGroupCreateMkStream(stream, group, start)
}
func (W _github_com_go_redis_redis_Cmdable) XGroupDelConsumer(stream string, group string, consumer string) *redis.IntCmd {
	return W.WXGroupDelConsumer(stream, group, consumer)
}
func (W _github_com_go_redis_redis_Cmdable) XGroupDestroy(stream string, group string) *redis.IntCmd {
	return W.WXGroupDestroy(stream, group)
}
func (W _github_com_go_redis_redis_Cmdable) XGroupSetID(stream string, group string, start string) *redis.StatusCmd {
	return W.WXGroupSetID(stream, group, start)
}
func (W _github_com_go_redis_redis_Cmdable) XLen(stream string) *redis.IntCmd {
	return W.WXLen(stream)
}
func (W _github_com_go_redis_redis_Cmdable) XPending(stream string, group string) *redis.XPendingCmd {
	return W.WXPending(stream, group)
}
func (W _github_com_go_redis_redis_Cmdable) XPendingExt(a *redis.XPendingExtArgs) *redis.XPendingExtCmd {
	return W.WXPendingExt(a)
}
func (W _github_com_go_redis_redis_Cmdable) XRange(stream string, start string, stop string) *redis.XMessageSliceCmd {
	return W.WXRange(stream, start, stop)
}
func (W _github_com_go_redis_redis_Cmdable) XRangeN(stream string, start string, stop string, count int64) *redis.XMessageSliceCmd {
	return W.WXRangeN(stream, start, stop, count)
}
func (W _github_com_go_redis_redis_Cmdable) XRead(a *redis.XReadArgs) *redis.XStreamSliceCmd {
	return W.WXRead(a)
}
func (W _github_com_go_redis_redis_Cmdable) XReadGroup(a *redis.XReadGroupArgs) *redis.XStreamSliceCmd {
	return W.WXReadGroup(a)
}
func (W _github_com_go_redis_redis_Cmdable) XReadStreams(streams []string) *redis.XStreamSliceCmd {
	return W.WXReadStreams(streams)
}
func (W _github_com_go_redis_redis_Cmdable) XRevRange(stream string, start string, stop string) *redis.XMessageSliceCmd {
	return W.WXRevRange(stream, start, stop)
}
func (W _github_com_go_redis_redis_Cmdable) XRevRangeN(stream string, start string, stop string, count int64) *redis.XMessageSliceCmd {
	return W.WXRevRangeN(stream, start, stop, count)
}
func (W _github_com_go_redis_redis_Cmdable) XTrim(key string, maxLen int64) *redis.IntCmd {
	return W.WXTrim(key, maxLen)
}
func (W _github_com_go_redis_redis_Cmdable) XTrimApprox(key string, maxLen int64) *redis.IntCmd {
	return W.WXTrimApprox(key, maxLen)
}
func (W _github_com_go_redis_redis_Cmdable) ZAdd(key string, members []*redis.Z) *redis.IntCmd {
	return W.WZAdd(key, members)
}
func (W _github_com_go_redis_redis_Cmdable) ZAddCh(key string, members []*redis.Z) *redis.IntCmd {
	return W.WZAddCh(key, members)
}
func (W _github_com_go_redis_redis_Cmdable) ZAddNX(key string, members []*redis.Z) *redis.IntCmd {
	return W.WZAddNX(key, members)
}
func (W _github_com_go_redis_redis_Cmdable) ZAddNXCh(key string, members []*redis.Z) *redis.IntCmd {
	return W.WZAddNXCh(key, members)
}
func (W _github_com_go_redis_redis_Cmdable) ZAddXX(key string, members []*redis.Z) *redis.IntCmd {
	return W.WZAddXX(key, members)
}
func (W _github_com_go_redis_redis_Cmdable) ZAddXXCh(key string, members []*redis.Z) *redis.IntCmd {
	return W.WZAddXXCh(key, members)
}
func (W _github_com_go_redis_redis_Cmdable) ZCard(key string) *redis.IntCmd { return W.WZCard(key) }
func (W _github_com_go_redis_redis_Cmdable) ZCount(key string, min string, max string) *redis.IntCmd {
	return W.WZCount(key, min, max)
}
func (W _github_com_go_redis_redis_Cmdable) ZIncr(key string, member *redis.Z) *redis.FloatCmd {
	return W.WZIncr(key, member)
}
func (W _github_com_go_redis_redis_Cmdable) ZIncrBy(key string, increment float64, member string) *redis.FloatCmd {
	return W.WZIncrBy(key, increment, member)
}
func (W _github_com_go_redis_redis_Cmdable) ZIncrNX(key string, member *redis.Z) *redis.FloatCmd {
	return W.WZIncrNX(key, member)
}
func (W _github_com_go_redis_redis_Cmdable) ZIncrXX(key string, member *redis.Z) *redis.FloatCmd {
	return W.WZIncrXX(key, member)
}
func (W _github_com_go_redis_redis_Cmdable) ZInterStore(destination string, store *redis.ZStore) *redis.IntCmd {
	return W.WZInterStore(destination, store)
}
func (W _github_com_go_redis_redis_Cmdable) ZLexCount(key string, min string, max string) *redis.IntCmd {
	return W.WZLexCount(key, min, max)
}
func (W _github_com_go_redis_redis_Cmdable) ZPopMax(key string, count []int64) *redis.ZSliceCmd {
	return W.WZPopMax(key, count)
}
func (W _github_com_go_redis_redis_Cmdable) ZPopMin(key string, count []int64) *redis.ZSliceCmd {
	return W.WZPopMin(key, count)
}
func (W _github_com_go_redis_redis_Cmdable) ZRange(key string, start int64, stop int64) *redis.StringSliceCmd {
	return W.WZRange(key, start, stop)
}
func (W _github_com_go_redis_redis_Cmdable) ZRangeByLex(key string, opt *redis.ZRangeBy) *redis.StringSliceCmd {
	return W.WZRangeByLex(key, opt)
}
func (W _github_com_go_redis_redis_Cmdable) ZRangeByScore(key string, opt *redis.ZRangeBy) *redis.StringSliceCmd {
	return W.WZRangeByScore(key, opt)
}
func (W _github_com_go_redis_redis_Cmdable) ZRangeByScoreWithScores(key string, opt *redis.ZRangeBy) *redis.ZSliceCmd {
	return W.WZRangeByScoreWithScores(key, opt)
}
func (W _github_com_go_redis_redis_Cmdable) ZRangeWithScores(key string, start int64, stop int64) *redis.ZSliceCmd {
	return W.WZRangeWithScores(key, start, stop)
}
func (W _github_com_go_redis_redis_Cmdable) ZRank(key string, member string) *redis.IntCmd {
	return W.WZRank(key, member)
}
func (W _github_com_go_redis_redis_Cmdable) ZRem(key string, members []interface{}) *redis.IntCmd {
	return W.WZRem(key, members)
}
func (W _github_com_go_redis_redis_Cmdable) ZRemRangeByLex(key string, min string, max string) *redis.IntCmd {
	return W.WZRemRangeByLex(key, min, max)
}
func (W _github_com_go_redis_redis_Cmdable) ZRemRangeByRank(key string, start int64, stop int64) *redis.IntCmd {
	return W.WZRemRangeByRank(key, start, stop)
}
func (W _github_com_go_redis_redis_Cmdable) ZRemRangeByScore(key string, min string, max string) *redis.IntCmd {
	return W.WZRemRangeByScore(key, min, max)
}
func (W _github_com_go_redis_redis_Cmdable) ZRevRange(key string, start int64, stop int64) *redis.StringSliceCmd {
	return W.WZRevRange(key, start, stop)
}
func (W _github_com_go_redis_redis_Cmdable) ZRevRangeByLex(key string, opt *redis.ZRangeBy) *redis.StringSliceCmd {
	return W.WZRevRangeByLex(key, opt)
}
func (W _github_com_go_redis_redis_Cmdable) ZRevRangeByScore(key string, opt *redis.ZRangeBy) *redis.StringSliceCmd {
	return W.WZRevRangeByScore(key, opt)
}
func (W _github_com_go_redis_redis_Cmdable) ZRevRangeByScoreWithScores(key string, opt *redis.ZRangeBy) *redis.ZSliceCmd {
	return W.WZRevRangeByScoreWithScores(key, opt)
}
func (W _github_com_go_redis_redis_Cmdable) ZRevRangeWithScores(key string, start int64, stop int64) *redis.ZSliceCmd {
	return W.WZRevRangeWithScores(key, start, stop)
}
func (W _github_com_go_redis_redis_Cmdable) ZRevRank(key string, member string) *redis.IntCmd {
	return W.WZRevRank(key, member)
}
func (W _github_com_go_redis_redis_Cmdable) ZScan(key string, cursor uint64, match string, count int64) *redis.ScanCmd {
	return W.WZScan(key, cursor, match, count)
}
func (W _github_com_go_redis_redis_Cmdable) ZScore(key string, member string) *redis.FloatCmd {
	return W.WZScore(key, member)
}
func (W _github_com_go_redis_redis_Cmdable) ZUnionStore(dest string, store *redis.ZStore) *redis.IntCmd {
	return W.WZUnionStore(dest, store)
}

// _github_com_go_redis_redis_Cmder is an interface wrapper for Cmder type
type _github_com_go_redis_redis_Cmder struct {
	WArgs func() []interface{}
	WErr  func() error
	WName func() string
}

func (W _github_com_go_redis_redis_Cmder) Args() []interface{} { return W.WArgs() }
func (W _github_com_go_redis_redis_Cmder) Err() error          { return W.WErr() }
func (W _github_com_go_redis_redis_Cmder) Name() string        { return W.WName() }

// _github_com_go_redis_redis_Hook is an interface wrapper for Hook type
type _github_com_go_redis_redis_Hook struct {
	WAfterProcess          func(ctx context.Context, cmd redis.Cmder) error
	WAfterProcessPipeline  func(ctx context.Context, cmds []redis.Cmder) error
	WBeforeProcess         func(ctx context.Context, cmd redis.Cmder) (context.Context, error)
	WBeforeProcessPipeline func(ctx context.Context, cmds []redis.Cmder) (context.Context, error)
}

func (W _github_com_go_redis_redis_Hook) AfterProcess(ctx context.Context, cmd redis.Cmder) error {
	return W.WAfterProcess(ctx, cmd)
}
func (W _github_com_go_redis_redis_Hook) AfterProcessPipeline(ctx context.Context, cmds []redis.Cmder) error {
	return W.WAfterProcessPipeline(ctx, cmds)
}
func (W _github_com_go_redis_redis_Hook) BeforeProcess(ctx context.Context, cmd redis.Cmder) (context.Context, error) {
	return W.WBeforeProcess(ctx, cmd)
}
func (W _github_com_go_redis_redis_Hook) BeforeProcessPipeline(ctx context.Context, cmds []redis.Cmder) (context.Context, error) {
	return W.WBeforeProcessPipeline(ctx, cmds)
}

// _github_com_go_redis_redis_Limiter is an interface wrapper for Limiter type
type _github_com_go_redis_redis_Limiter struct {
	WAllow        func() error
	WReportResult func(result error)
}

func (W _github_com_go_redis_redis_Limiter) Allow() error              { return W.WAllow() }
func (W _github_com_go_redis_redis_Limiter) ReportResult(result error) { W.WReportResult(result) }

// _github_com_go_redis_redis_Pipeliner is an interface wrapper for Pipeliner type
type _github_com_go_redis_redis_Pipeliner struct {
	WAppend                     func(key string, value string) *redis.IntCmd
	WAuth                       func(password string) *redis.StatusCmd
	WBLPop                      func(timeout time.Duration, keys []string) *redis.StringSliceCmd
	WBRPop                      func(timeout time.Duration, keys []string) *redis.StringSliceCmd
	WBRPopLPush                 func(source string, destination string, timeout time.Duration) *redis.StringCmd
	WBZPopMax                   func(timeout time.Duration, keys []string) *redis.ZWithKeyCmd
	WBZPopMin                   func(timeout time.Duration, keys []string) *redis.ZWithKeyCmd
	WBgRewriteAOF               func() *redis.StatusCmd
	WBgSave                     func() *redis.StatusCmd
	WBitCount                   func(key string, bitCount *redis.BitCount) *redis.IntCmd
	WBitField                   func(key string, args []interface{}) *redis.IntSliceCmd
	WBitOpAnd                   func(destKey string, keys []string) *redis.IntCmd
	WBitOpNot                   func(destKey string, key string) *redis.IntCmd
	WBitOpOr                    func(destKey string, keys []string) *redis.IntCmd
	WBitOpXor                   func(destKey string, keys []string) *redis.IntCmd
	WBitPos                     func(key string, bit int64, pos []int64) *redis.IntCmd
	WClientGetName              func() *redis.StringCmd
	WClientID                   func() *redis.IntCmd
	WClientKill                 func(ipPort string) *redis.StatusCmd
	WClientKillByFilter         func(keys []string) *redis.IntCmd
	WClientList                 func() *redis.StringCmd
	WClientPause                func(dur time.Duration) *redis.BoolCmd
	WClientSetName              func(name string) *redis.BoolCmd
	WClose                      func() error
	WClusterAddSlots            func(slots []int) *redis.StatusCmd
	WClusterAddSlotsRange       func(min int, max int) *redis.StatusCmd
	WClusterCountFailureReports func(nodeID string) *redis.IntCmd
	WClusterCountKeysInSlot     func(slot int) *redis.IntCmd
	WClusterDelSlots            func(slots []int) *redis.StatusCmd
	WClusterDelSlotsRange       func(min int, max int) *redis.StatusCmd
	WClusterFailover            func() *redis.StatusCmd
	WClusterForget              func(nodeID string) *redis.StatusCmd
	WClusterGetKeysInSlot       func(slot int, count int) *redis.StringSliceCmd
	WClusterInfo                func() *redis.StringCmd
	WClusterKeySlot             func(key string) *redis.IntCmd
	WClusterMeet                func(host string, port string) *redis.StatusCmd
	WClusterNodes               func() *redis.StringCmd
	WClusterReplicate           func(nodeID string) *redis.StatusCmd
	WClusterResetHard           func() *redis.StatusCmd
	WClusterResetSoft           func() *redis.StatusCmd
	WClusterSaveConfig          func() *redis.StatusCmd
	WClusterSlaves              func(nodeID string) *redis.StringSliceCmd
	WClusterSlots               func() *redis.ClusterSlotsCmd
	WCommand                    func() *redis.CommandsInfoCmd
	WConfigGet                  func(parameter string) *redis.SliceCmd
	WConfigResetStat            func() *redis.StatusCmd
	WConfigRewrite              func() *redis.StatusCmd
	WConfigSet                  func(parameter string, value string) *redis.StatusCmd
	WDBSize                     func() *redis.IntCmd
	WDebugObject                func(key string) *redis.StringCmd
	WDecr                       func(key string) *redis.IntCmd
	WDecrBy                     func(key string, decrement int64) *redis.IntCmd
	WDel                        func(keys []string) *redis.IntCmd
	WDiscard                    func() error
	WDo                         func(args []interface{}) *redis.Cmd
	WDump                       func(key string) *redis.StringCmd
	WEcho                       func(message interface{}) *redis.StringCmd
	WEval                       func(script string, keys []string, args []interface{}) *redis.Cmd
	WEvalSha                    func(sha1 string, keys []string, args []interface{}) *redis.Cmd
	WExec                       func() ([]redis.Cmder, error)
	WExecContext                func(ctx context.Context) ([]redis.Cmder, error)
	WExists                     func(keys []string) *redis.IntCmd
	WExpire                     func(key string, expiration time.Duration) *redis.BoolCmd
	WExpireAt                   func(key string, tm time.Time) *redis.BoolCmd
	WFlushAll                   func() *redis.StatusCmd
	WFlushAllAsync              func() *redis.StatusCmd
	WFlushDB                    func() *redis.StatusCmd
	WFlushDBAsync               func() *redis.StatusCmd
	WGeoAdd                     func(key string, geoLocation []*redis.GeoLocation) *redis.IntCmd
	WGeoDist                    func(key string, member1 string, member2 string, unit string) *redis.FloatCmd
	WGeoHash                    func(key string, members []string) *redis.StringSliceCmd
	WGeoPos                     func(key string, members []string) *redis.GeoPosCmd
	WGeoRadius                  func(key string, longitude float64, latitude float64, query *redis.GeoRadiusQuery) *redis.GeoLocationCmd
	WGeoRadiusByMember          func(key string, member string, query *redis.GeoRadiusQuery) *redis.GeoLocationCmd
	WGeoRadiusByMemberStore     func(key string, member string, query *redis.GeoRadiusQuery) *redis.IntCmd
	WGeoRadiusStore             func(key string, longitude float64, latitude float64, query *redis.GeoRadiusQuery) *redis.IntCmd
	WGet                        func(key string) *redis.StringCmd
	WGetBit                     func(key string, offset int64) *redis.IntCmd
	WGetRange                   func(key string, start int64, end int64) *redis.StringCmd
	WGetSet                     func(key string, value interface{}) *redis.StringCmd
	WHDel                       func(key string, fields []string) *redis.IntCmd
	WHExists                    func(key string, field string) *redis.BoolCmd
	WHGet                       func(key string, field string) *redis.StringCmd
	WHGetAll                    func(key string) *redis.StringStringMapCmd
	WHIncrBy                    func(key string, field string, incr int64) *redis.IntCmd
	WHIncrByFloat               func(key string, field string, incr float64) *redis.FloatCmd
	WHKeys                      func(key string) *redis.StringSliceCmd
	WHLen                       func(key string) *redis.IntCmd
	WHMGet                      func(key string, fields []string) *redis.SliceCmd
	WHMSet                      func(key string, fields map[string]interface{}) *redis.StatusCmd
	WHScan                      func(key string, cursor uint64, match string, count int64) *redis.ScanCmd
	WHSet                       func(key string, field string, value interface{}) *redis.BoolCmd
	WHSetNX                     func(key string, field string, value interface{}) *redis.BoolCmd
	WHVals                      func(key string) *redis.StringSliceCmd
	WIncr                       func(key string) *redis.IntCmd
	WIncrBy                     func(key string, value int64) *redis.IntCmd
	WIncrByFloat                func(key string, value float64) *redis.FloatCmd
	WInfo                       func(section []string) *redis.StringCmd
	WKeys                       func(pattern string) *redis.StringSliceCmd
	WLIndex                     func(key string, index int64) *redis.StringCmd
	WLInsert                    func(key string, op string, pivot interface{}, value interface{}) *redis.IntCmd
	WLInsertAfter               func(key string, pivot interface{}, value interface{}) *redis.IntCmd
	WLInsertBefore              func(key string, pivot interface{}, value interface{}) *redis.IntCmd
	WLLen                       func(key string) *redis.IntCmd
	WLPop                       func(key string) *redis.StringCmd
	WLPush                      func(key string, values []interface{}) *redis.IntCmd
	WLPushX                     func(key string, values []interface{}) *redis.IntCmd
	WLRange                     func(key string, start int64, stop int64) *redis.StringSliceCmd
	WLRem                       func(key string, count int64, value interface{}) *redis.IntCmd
	WLSet                       func(key string, index int64, value interface{}) *redis.StatusCmd
	WLTrim                      func(key string, start int64, stop int64) *redis.StatusCmd
	WLastSave                   func() *redis.IntCmd
	WMGet                       func(keys []string) *redis.SliceCmd
	WMSet                       func(pairs []interface{}) *redis.StatusCmd
	WMSetNX                     func(pairs []interface{}) *redis.BoolCmd
	WMemoryUsage                func(key string, samples []int) *redis.IntCmd
	WMigrate                    func(host string, port string, key string, db int, timeout time.Duration) *redis.StatusCmd
	WMove                       func(key string, db int) *redis.BoolCmd
	WObjectEncoding             func(key string) *redis.StringCmd
	WObjectIdleTime             func(key string) *redis.DurationCmd
	WObjectRefCount             func(key string) *redis.IntCmd
	WPExpire                    func(key string, expiration time.Duration) *redis.BoolCmd
	WPExpireAt                  func(key string, tm time.Time) *redis.BoolCmd
	WPFAdd                      func(key string, els []interface{}) *redis.IntCmd
	WPFCount                    func(keys []string) *redis.IntCmd
	WPFMerge                    func(dest string, keys []string) *redis.StatusCmd
	WPTTL                       func(key string) *redis.DurationCmd
	WPersist                    func(key string) *redis.BoolCmd
	WPing                       func() *redis.StatusCmd
	WPipeline                   func() redis.Pipeliner
	WPipelined                  func(fn func(redis.Pipeliner) error) ([]redis.Cmder, error)
	WProcess                    func(cmd redis.Cmder) error
	WPubSubChannels             func(pattern string) *redis.StringSliceCmd
	WPubSubNumPat               func() *redis.IntCmd
	WPubSubNumSub               func(channels []string) *redis.StringIntMapCmd
	WPublish                    func(channel string, message interface{}) *redis.IntCmd
	WQuit                       func() *redis.StatusCmd
	WRPop                       func(key string) *redis.StringCmd
	WRPopLPush                  func(source string, destination string) *redis.StringCmd
	WRPush                      func(key string, values []interface{}) *redis.IntCmd
	WRPushX                     func(key string, values []interface{}) *redis.IntCmd
	WRandomKey                  func() *redis.StringCmd
	WReadOnly                   func() *redis.StatusCmd
	WReadWrite                  func() *redis.StatusCmd
	WRename                     func(key string, newkey string) *redis.StatusCmd
	WRenameNX                   func(key string, newkey string) *redis.BoolCmd
	WRestore                    func(key string, ttl time.Duration, value string) *redis.StatusCmd
	WRestoreReplace             func(key string, ttl time.Duration, value string) *redis.StatusCmd
	WSAdd                       func(key string, members []interface{}) *redis.IntCmd
	WSCard                      func(key string) *redis.IntCmd
	WSDiff                      func(keys []string) *redis.StringSliceCmd
	WSDiffStore                 func(destination string, keys []string) *redis.IntCmd
	WSInter                     func(keys []string) *redis.StringSliceCmd
	WSInterStore                func(destination string, keys []string) *redis.IntCmd
	WSIsMember                  func(key string, member interface{}) *redis.BoolCmd
	WSMembers                   func(key string) *redis.StringSliceCmd
	WSMembersMap                func(key string) *redis.StringStructMapCmd
	WSMove                      func(source string, destination string, member interface{}) *redis.BoolCmd
	WSPop                       func(key string) *redis.StringCmd
	WSPopN                      func(key string, count int64) *redis.StringSliceCmd
	WSRandMember                func(key string) *redis.StringCmd
	WSRandMemberN               func(key string, count int64) *redis.StringSliceCmd
	WSRem                       func(key string, members []interface{}) *redis.IntCmd
	WSScan                      func(key string, cursor uint64, match string, count int64) *redis.ScanCmd
	WSUnion                     func(keys []string) *redis.StringSliceCmd
	WSUnionStore                func(destination string, keys []string) *redis.IntCmd
	WSave                       func() *redis.StatusCmd
	WScan                       func(cursor uint64, match string, count int64) *redis.ScanCmd
	WScriptExists               func(hashes []string) *redis.BoolSliceCmd
	WScriptFlush                func() *redis.StatusCmd
	WScriptKill                 func() *redis.StatusCmd
	WScriptLoad                 func(script string) *redis.StringCmd
	WSelect                     func(index int) *redis.StatusCmd
	WSet                        func(key string, value interface{}, expiration time.Duration) *redis.StatusCmd
	WSetBit                     func(key string, offset int64, value int) *redis.IntCmd
	WSetNX                      func(key string, value interface{}, expiration time.Duration) *redis.BoolCmd
	WSetRange                   func(key string, offset int64, value string) *redis.IntCmd
	WSetXX                      func(key string, value interface{}, expiration time.Duration) *redis.BoolCmd
	WShutdown                   func() *redis.StatusCmd
	WShutdownNoSave             func() *redis.StatusCmd
	WShutdownSave               func() *redis.StatusCmd
	WSlaveOf                    func(host string, port string) *redis.StatusCmd
	WSort                       func(key string, sort *redis.Sort) *redis.StringSliceCmd
	WSortInterfaces             func(key string, sort *redis.Sort) *redis.SliceCmd
	WSortStore                  func(key string, store string, sort *redis.Sort) *redis.IntCmd
	WStrLen                     func(key string) *redis.IntCmd
	WSwapDB                     func(index1 int, index2 int) *redis.StatusCmd
	WTTL                        func(key string) *redis.DurationCmd
	WTime                       func() *redis.TimeCmd
	WTouch                      func(keys []string) *redis.IntCmd
	WTxPipeline                 func() redis.Pipeliner
	WTxPipelined                func(fn func(redis.Pipeliner) error) ([]redis.Cmder, error)
	WType                       func(key string) *redis.StatusCmd
	WUnlink                     func(keys []string) *redis.IntCmd
	WXAck                       func(stream string, group string, ids []string) *redis.IntCmd
	WXAdd                       func(a *redis.XAddArgs) *redis.StringCmd
	WXClaim                     func(a *redis.XClaimArgs) *redis.XMessageSliceCmd
	WXClaimJustID               func(a *redis.XClaimArgs) *redis.StringSliceCmd
	WXDel                       func(stream string, ids []string) *redis.IntCmd
	WXGroupCreate               func(stream string, group string, start string) *redis.StatusCmd
	WXGroupCreateMkStream       func(stream string, group string, start string) *redis.StatusCmd
	WXGroupDelConsumer          func(stream string, group string, consumer string) *redis.IntCmd
	WXGroupDestroy              func(stream string, group string) *redis.IntCmd
	WXGroupSetID                func(stream string, group string, start string) *redis.StatusCmd
	WXLen                       func(stream string) *redis.IntCmd
	WXPending                   func(stream string, group string) *redis.XPendingCmd
	WXPendingExt                func(a *redis.XPendingExtArgs) *redis.XPendingExtCmd
	WXRange                     func(stream string, start string, stop string) *redis.XMessageSliceCmd
	WXRangeN                    func(stream string, start string, stop string, count int64) *redis.XMessageSliceCmd
	WXRead                      func(a *redis.XReadArgs) *redis.XStreamSliceCmd
	WXReadGroup                 func(a *redis.XReadGroupArgs) *redis.XStreamSliceCmd
	WXReadStreams               func(streams []string) *redis.XStreamSliceCmd
	WXRevRange                  func(stream string, start string, stop string) *redis.XMessageSliceCmd
	WXRevRangeN                 func(stream string, start string, stop string, count int64) *redis.XMessageSliceCmd
	WXTrim                      func(key string, maxLen int64) *redis.IntCmd
	WXTrimApprox                func(key string, maxLen int64) *redis.IntCmd
	WZAdd                       func(key string, members []*redis.Z) *redis.IntCmd
	WZAddCh                     func(key string, members []*redis.Z) *redis.IntCmd
	WZAddNX                     func(key string, members []*redis.Z) *redis.IntCmd
	WZAddNXCh                   func(key string, members []*redis.Z) *redis.IntCmd
	WZAddXX                     func(key string, members []*redis.Z) *redis.IntCmd
	WZAddXXCh                   func(key string, members []*redis.Z) *redis.IntCmd
	WZCard                      func(key string) *redis.IntCmd
	WZCount                     func(key string, min string, max string) *redis.IntCmd
	WZIncr                      func(key string, member *redis.Z) *redis.FloatCmd
	WZIncrBy                    func(key string, increment float64, member string) *redis.FloatCmd
	WZIncrNX                    func(key string, member *redis.Z) *redis.FloatCmd
	WZIncrXX                    func(key string, member *redis.Z) *redis.FloatCmd
	WZInterStore                func(destination string, store *redis.ZStore) *redis.IntCmd
	WZLexCount                  func(key string, min string, max string) *redis.IntCmd
	WZPopMax                    func(key string, count []int64) *redis.ZSliceCmd
	WZPopMin                    func(key string, count []int64) *redis.ZSliceCmd
	WZRange                     func(key string, start int64, stop int64) *redis.StringSliceCmd
	WZRangeByLex                func(key string, opt *redis.ZRangeBy) *redis.StringSliceCmd
	WZRangeByScore              func(key string, opt *redis.ZRangeBy) *redis.StringSliceCmd
	WZRangeByScoreWithScores    func(key string, opt *redis.ZRangeBy) *redis.ZSliceCmd
	WZRangeWithScores           func(key string, start int64, stop int64) *redis.ZSliceCmd
	WZRank                      func(key string, member string) *redis.IntCmd
	WZRem                       func(key string, members []interface{}) *redis.IntCmd
	WZRemRangeByLex             func(key string, min string, max string) *redis.IntCmd
	WZRemRangeByRank            func(key string, start int64, stop int64) *redis.IntCmd
	WZRemRangeByScore           func(key string, min string, max string) *redis.IntCmd
	WZRevRange                  func(key string, start int64, stop int64) *redis.StringSliceCmd
	WZRevRangeByLex             func(key string, opt *redis.ZRangeBy) *redis.StringSliceCmd
	WZRevRangeByScore           func(key string, opt *redis.ZRangeBy) *redis.StringSliceCmd
	WZRevRangeByScoreWithScores func(key string, opt *redis.ZRangeBy) *redis.ZSliceCmd
	WZRevRangeWithScores        func(key string, start int64, stop int64) *redis.ZSliceCmd
	WZRevRank                   func(key string, member string) *redis.IntCmd
	WZScan                      func(key string, cursor uint64, match string, count int64) *redis.ScanCmd
	WZScore                     func(key string, member string) *redis.FloatCmd
	WZUnionStore                func(dest string, store *redis.ZStore) *redis.IntCmd
}

func (W _github_com_go_redis_redis_Pipeliner) Append(key string, value string) *redis.IntCmd {
	return W.WAppend(key, value)
}
func (W _github_com_go_redis_redis_Pipeliner) Auth(password string) *redis.StatusCmd {
	return W.WAuth(password)
}
func (W _github_com_go_redis_redis_Pipeliner) BLPop(timeout time.Duration, keys []string) *redis.StringSliceCmd {
	return W.WBLPop(timeout, keys)
}
func (W _github_com_go_redis_redis_Pipeliner) BRPop(timeout time.Duration, keys []string) *redis.StringSliceCmd {
	return W.WBRPop(timeout, keys)
}
func (W _github_com_go_redis_redis_Pipeliner) BRPopLPush(source string, destination string, timeout time.Duration) *redis.StringCmd {
	return W.WBRPopLPush(source, destination, timeout)
}
func (W _github_com_go_redis_redis_Pipeliner) BZPopMax(timeout time.Duration, keys []string) *redis.ZWithKeyCmd {
	return W.WBZPopMax(timeout, keys)
}
func (W _github_com_go_redis_redis_Pipeliner) BZPopMin(timeout time.Duration, keys []string) *redis.ZWithKeyCmd {
	return W.WBZPopMin(timeout, keys)
}
func (W _github_com_go_redis_redis_Pipeliner) BgRewriteAOF() *redis.StatusCmd {
	return W.WBgRewriteAOF()
}
func (W _github_com_go_redis_redis_Pipeliner) BgSave() *redis.StatusCmd { return W.WBgSave() }
func (W _github_com_go_redis_redis_Pipeliner) BitCount(key string, bitCount *redis.BitCount) *redis.IntCmd {
	return W.WBitCount(key, bitCount)
}
func (W _github_com_go_redis_redis_Pipeliner) BitField(key string, args []interface{}) *redis.IntSliceCmd {
	return W.WBitField(key, args)
}
func (W _github_com_go_redis_redis_Pipeliner) BitOpAnd(destKey string, keys []string) *redis.IntCmd {
	return W.WBitOpAnd(destKey, keys)
}
func (W _github_com_go_redis_redis_Pipeliner) BitOpNot(destKey string, key string) *redis.IntCmd {
	return W.WBitOpNot(destKey, key)
}
func (W _github_com_go_redis_redis_Pipeliner) BitOpOr(destKey string, keys []string) *redis.IntCmd {
	return W.WBitOpOr(destKey, keys)
}
func (W _github_com_go_redis_redis_Pipeliner) BitOpXor(destKey string, keys []string) *redis.IntCmd {
	return W.WBitOpXor(destKey, keys)
}
func (W _github_com_go_redis_redis_Pipeliner) BitPos(key string, bit int64, pos []int64) *redis.IntCmd {
	return W.WBitPos(key, bit, pos)
}
func (W _github_com_go_redis_redis_Pipeliner) ClientGetName() *redis.StringCmd {
	return W.WClientGetName()
}
func (W _github_com_go_redis_redis_Pipeliner) ClientID() *redis.IntCmd { return W.WClientID() }
func (W _github_com_go_redis_redis_Pipeliner) ClientKill(ipPort string) *redis.StatusCmd {
	return W.WClientKill(ipPort)
}
func (W _github_com_go_redis_redis_Pipeliner) ClientKillByFilter(keys []string) *redis.IntCmd {
	return W.WClientKillByFilter(keys)
}
func (W _github_com_go_redis_redis_Pipeliner) ClientList() *redis.StringCmd { return W.WClientList() }
func (W _github_com_go_redis_redis_Pipeliner) ClientPause(dur time.Duration) *redis.BoolCmd {
	return W.WClientPause(dur)
}
func (W _github_com_go_redis_redis_Pipeliner) ClientSetName(name string) *redis.BoolCmd {
	return W.WClientSetName(name)
}
func (W _github_com_go_redis_redis_Pipeliner) Close() error { return W.WClose() }
func (W _github_com_go_redis_redis_Pipeliner) ClusterAddSlots(slots []int) *redis.StatusCmd {
	return W.WClusterAddSlots(slots)
}
func (W _github_com_go_redis_redis_Pipeliner) ClusterAddSlotsRange(min int, max int) *redis.StatusCmd {
	return W.WClusterAddSlotsRange(min, max)
}
func (W _github_com_go_redis_redis_Pipeliner) ClusterCountFailureReports(nodeID string) *redis.IntCmd {
	return W.WClusterCountFailureReports(nodeID)
}
func (W _github_com_go_redis_redis_Pipeliner) ClusterCountKeysInSlot(slot int) *redis.IntCmd {
	return W.WClusterCountKeysInSlot(slot)
}
func (W _github_com_go_redis_redis_Pipeliner) ClusterDelSlots(slots []int) *redis.StatusCmd {
	return W.WClusterDelSlots(slots)
}
func (W _github_com_go_redis_redis_Pipeliner) ClusterDelSlotsRange(min int, max int) *redis.StatusCmd {
	return W.WClusterDelSlotsRange(min, max)
}
func (W _github_com_go_redis_redis_Pipeliner) ClusterFailover() *redis.StatusCmd {
	return W.WClusterFailover()
}
func (W _github_com_go_redis_redis_Pipeliner) ClusterForget(nodeID string) *redis.StatusCmd {
	return W.WClusterForget(nodeID)
}
func (W _github_com_go_redis_redis_Pipeliner) ClusterGetKeysInSlot(slot int, count int) *redis.StringSliceCmd {
	return W.WClusterGetKeysInSlot(slot, count)
}
func (W _github_com_go_redis_redis_Pipeliner) ClusterInfo() *redis.StringCmd {
	return W.WClusterInfo()
}
func (W _github_com_go_redis_redis_Pipeliner) ClusterKeySlot(key string) *redis.IntCmd {
	return W.WClusterKeySlot(key)
}
func (W _github_com_go_redis_redis_Pipeliner) ClusterMeet(host string, port string) *redis.StatusCmd {
	return W.WClusterMeet(host, port)
}
func (W _github_com_go_redis_redis_Pipeliner) ClusterNodes() *redis.StringCmd {
	return W.WClusterNodes()
}
func (W _github_com_go_redis_redis_Pipeliner) ClusterReplicate(nodeID string) *redis.StatusCmd {
	return W.WClusterReplicate(nodeID)
}
func (W _github_com_go_redis_redis_Pipeliner) ClusterResetHard() *redis.StatusCmd {
	return W.WClusterResetHard()
}
func (W _github_com_go_redis_redis_Pipeliner) ClusterResetSoft() *redis.StatusCmd {
	return W.WClusterResetSoft()
}
func (W _github_com_go_redis_redis_Pipeliner) ClusterSaveConfig() *redis.StatusCmd {
	return W.WClusterSaveConfig()
}
func (W _github_com_go_redis_redis_Pipeliner) ClusterSlaves(nodeID string) *redis.StringSliceCmd {
	return W.WClusterSlaves(nodeID)
}
func (W _github_com_go_redis_redis_Pipeliner) ClusterSlots() *redis.ClusterSlotsCmd {
	return W.WClusterSlots()
}
func (W _github_com_go_redis_redis_Pipeliner) Command() *redis.CommandsInfoCmd { return W.WCommand() }
func (W _github_com_go_redis_redis_Pipeliner) ConfigGet(parameter string) *redis.SliceCmd {
	return W.WConfigGet(parameter)
}
func (W _github_com_go_redis_redis_Pipeliner) ConfigResetStat() *redis.StatusCmd {
	return W.WConfigResetStat()
}
func (W _github_com_go_redis_redis_Pipeliner) ConfigRewrite() *redis.StatusCmd {
	return W.WConfigRewrite()
}
func (W _github_com_go_redis_redis_Pipeliner) ConfigSet(parameter string, value string) *redis.StatusCmd {
	return W.WConfigSet(parameter, value)
}
func (W _github_com_go_redis_redis_Pipeliner) DBSize() *redis.IntCmd { return W.WDBSize() }
func (W _github_com_go_redis_redis_Pipeliner) DebugObject(key string) *redis.StringCmd {
	return W.WDebugObject(key)
}
func (W _github_com_go_redis_redis_Pipeliner) Decr(key string) *redis.IntCmd { return W.WDecr(key) }
func (W _github_com_go_redis_redis_Pipeliner) DecrBy(key string, decrement int64) *redis.IntCmd {
	return W.WDecrBy(key, decrement)
}
func (W _github_com_go_redis_redis_Pipeliner) Del(keys []string) *redis.IntCmd  { return W.WDel(keys) }
func (W _github_com_go_redis_redis_Pipeliner) Discard() error                   { return W.WDiscard() }
func (W _github_com_go_redis_redis_Pipeliner) Do(args []interface{}) *redis.Cmd { return W.WDo(args) }
func (W _github_com_go_redis_redis_Pipeliner) Dump(key string) *redis.StringCmd { return W.WDump(key) }
func (W _github_com_go_redis_redis_Pipeliner) Echo(message interface{}) *redis.StringCmd {
	return W.WEcho(message)
}
func (W _github_com_go_redis_redis_Pipeliner) Eval(script string, keys []string, args []interface{}) *redis.Cmd {
	return W.WEval(script, keys, args)
}
func (W _github_com_go_redis_redis_Pipeliner) EvalSha(sha1 string, keys []string, args []interface{}) *redis.Cmd {
	return W.WEvalSha(sha1, keys, args)
}
func (W _github_com_go_redis_redis_Pipeliner) Exec() ([]redis.Cmder, error) { return W.WExec() }
func (W _github_com_go_redis_redis_Pipeliner) ExecContext(ctx context.Context) ([]redis.Cmder, error) {
	return W.WExecContext(ctx)
}
func (W _github_com_go_redis_redis_Pipeliner) Exists(keys []string) *redis.IntCmd {
	return W.WExists(keys)
}
func (W _github_com_go_redis_redis_Pipeliner) Expire(key string, expiration time.Duration) *redis.BoolCmd {
	return W.WExpire(key, expiration)
}
func (W _github_com_go_redis_redis_Pipeliner) ExpireAt(key string, tm time.Time) *redis.BoolCmd {
	return W.WExpireAt(key, tm)
}
func (W _github_com_go_redis_redis_Pipeliner) FlushAll() *redis.StatusCmd { return W.WFlushAll() }
func (W _github_com_go_redis_redis_Pipeliner) FlushAllAsync() *redis.StatusCmd {
	return W.WFlushAllAsync()
}
func (W _github_com_go_redis_redis_Pipeliner) FlushDB() *redis.StatusCmd { return W.WFlushDB() }
func (W _github_com_go_redis_redis_Pipeliner) FlushDBAsync() *redis.StatusCmd {
	return W.WFlushDBAsync()
}
func (W _github_com_go_redis_redis_Pipeliner) GeoAdd(key string, geoLocation []*redis.GeoLocation) *redis.IntCmd {
	return W.WGeoAdd(key, geoLocation)
}
func (W _github_com_go_redis_redis_Pipeliner) GeoDist(key string, member1 string, member2 string, unit string) *redis.FloatCmd {
	return W.WGeoDist(key, member1, member2, unit)
}
func (W _github_com_go_redis_redis_Pipeliner) GeoHash(key string, members []string) *redis.StringSliceCmd {
	return W.WGeoHash(key, members)
}
func (W _github_com_go_redis_redis_Pipeliner) GeoPos(key string, members []string) *redis.GeoPosCmd {
	return W.WGeoPos(key, members)
}
func (W _github_com_go_redis_redis_Pipeliner) GeoRadius(key string, longitude float64, latitude float64, query *redis.GeoRadiusQuery) *redis.GeoLocationCmd {
	return W.WGeoRadius(key, longitude, latitude, query)
}
func (W _github_com_go_redis_redis_Pipeliner) GeoRadiusByMember(key string, member string, query *redis.GeoRadiusQuery) *redis.GeoLocationCmd {
	return W.WGeoRadiusByMember(key, member, query)
}
func (W _github_com_go_redis_redis_Pipeliner) GeoRadiusByMemberStore(key string, member string, query *redis.GeoRadiusQuery) *redis.IntCmd {
	return W.WGeoRadiusByMemberStore(key, member, query)
}
func (W _github_com_go_redis_redis_Pipeliner) GeoRadiusStore(key string, longitude float64, latitude float64, query *redis.GeoRadiusQuery) *redis.IntCmd {
	return W.WGeoRadiusStore(key, longitude, latitude, query)
}
func (W _github_com_go_redis_redis_Pipeliner) Get(key string) *redis.StringCmd { return W.WGet(key) }
func (W _github_com_go_redis_redis_Pipeliner) GetBit(key string, offset int64) *redis.IntCmd {
	return W.WGetBit(key, offset)
}
func (W _github_com_go_redis_redis_Pipeliner) GetRange(key string, start int64, end int64) *redis.StringCmd {
	return W.WGetRange(key, start, end)
}
func (W _github_com_go_redis_redis_Pipeliner) GetSet(key string, value interface{}) *redis.StringCmd {
	return W.WGetSet(key, value)
}
func (W _github_com_go_redis_redis_Pipeliner) HDel(key string, fields []string) *redis.IntCmd {
	return W.WHDel(key, fields)
}
func (W _github_com_go_redis_redis_Pipeliner) HExists(key string, field string) *redis.BoolCmd {
	return W.WHExists(key, field)
}
func (W _github_com_go_redis_redis_Pipeliner) HGet(key string, field string) *redis.StringCmd {
	return W.WHGet(key, field)
}
func (W _github_com_go_redis_redis_Pipeliner) HGetAll(key string) *redis.StringStringMapCmd {
	return W.WHGetAll(key)
}
func (W _github_com_go_redis_redis_Pipeliner) HIncrBy(key string, field string, incr int64) *redis.IntCmd {
	return W.WHIncrBy(key, field, incr)
}
func (W _github_com_go_redis_redis_Pipeliner) HIncrByFloat(key string, field string, incr float64) *redis.FloatCmd {
	return W.WHIncrByFloat(key, field, incr)
}
func (W _github_com_go_redis_redis_Pipeliner) HKeys(key string) *redis.StringSliceCmd {
	return W.WHKeys(key)
}
func (W _github_com_go_redis_redis_Pipeliner) HLen(key string) *redis.IntCmd { return W.WHLen(key) }
func (W _github_com_go_redis_redis_Pipeliner) HMGet(key string, fields []string) *redis.SliceCmd {
	return W.WHMGet(key, fields)
}
func (W _github_com_go_redis_redis_Pipeliner) HMSet(key string, fields map[string]interface{}) *redis.StatusCmd {
	return W.WHMSet(key, fields)
}
func (W _github_com_go_redis_redis_Pipeliner) HScan(key string, cursor uint64, match string, count int64) *redis.ScanCmd {
	return W.WHScan(key, cursor, match, count)
}
func (W _github_com_go_redis_redis_Pipeliner) HSet(key string, field string, value interface{}) *redis.BoolCmd {
	return W.WHSet(key, field, value)
}
func (W _github_com_go_redis_redis_Pipeliner) HSetNX(key string, field string, value interface{}) *redis.BoolCmd {
	return W.WHSetNX(key, field, value)
}
func (W _github_com_go_redis_redis_Pipeliner) HVals(key string) *redis.StringSliceCmd {
	return W.WHVals(key)
}
func (W _github_com_go_redis_redis_Pipeliner) Incr(key string) *redis.IntCmd { return W.WIncr(key) }
func (W _github_com_go_redis_redis_Pipeliner) IncrBy(key string, value int64) *redis.IntCmd {
	return W.WIncrBy(key, value)
}
func (W _github_com_go_redis_redis_Pipeliner) IncrByFloat(key string, value float64) *redis.FloatCmd {
	return W.WIncrByFloat(key, value)
}
func (W _github_com_go_redis_redis_Pipeliner) Info(section []string) *redis.StringCmd {
	return W.WInfo(section)
}
func (W _github_com_go_redis_redis_Pipeliner) Keys(pattern string) *redis.StringSliceCmd {
	return W.WKeys(pattern)
}
func (W _github_com_go_redis_redis_Pipeliner) LIndex(key string, index int64) *redis.StringCmd {
	return W.WLIndex(key, index)
}
func (W _github_com_go_redis_redis_Pipeliner) LInsert(key string, op string, pivot interface{}, value interface{}) *redis.IntCmd {
	return W.WLInsert(key, op, pivot, value)
}
func (W _github_com_go_redis_redis_Pipeliner) LInsertAfter(key string, pivot interface{}, value interface{}) *redis.IntCmd {
	return W.WLInsertAfter(key, pivot, value)
}
func (W _github_com_go_redis_redis_Pipeliner) LInsertBefore(key string, pivot interface{}, value interface{}) *redis.IntCmd {
	return W.WLInsertBefore(key, pivot, value)
}
func (W _github_com_go_redis_redis_Pipeliner) LLen(key string) *redis.IntCmd    { return W.WLLen(key) }
func (W _github_com_go_redis_redis_Pipeliner) LPop(key string) *redis.StringCmd { return W.WLPop(key) }
func (W _github_com_go_redis_redis_Pipeliner) LPush(key string, values []interface{}) *redis.IntCmd {
	return W.WLPush(key, values)
}
func (W _github_com_go_redis_redis_Pipeliner) LPushX(key string, values []interface{}) *redis.IntCmd {
	return W.WLPushX(key, values)
}
func (W _github_com_go_redis_redis_Pipeliner) LRange(key string, start int64, stop int64) *redis.StringSliceCmd {
	return W.WLRange(key, start, stop)
}
func (W _github_com_go_redis_redis_Pipeliner) LRem(key string, count int64, value interface{}) *redis.IntCmd {
	return W.WLRem(key, count, value)
}
func (W _github_com_go_redis_redis_Pipeliner) LSet(key string, index int64, value interface{}) *redis.StatusCmd {
	return W.WLSet(key, index, value)
}
func (W _github_com_go_redis_redis_Pipeliner) LTrim(key string, start int64, stop int64) *redis.StatusCmd {
	return W.WLTrim(key, start, stop)
}
func (W _github_com_go_redis_redis_Pipeliner) LastSave() *redis.IntCmd { return W.WLastSave() }
func (W _github_com_go_redis_redis_Pipeliner) MGet(keys []string) *redis.SliceCmd {
	return W.WMGet(keys)
}
func (W _github_com_go_redis_redis_Pipeliner) MSet(pairs []interface{}) *redis.StatusCmd {
	return W.WMSet(pairs)
}
func (W _github_com_go_redis_redis_Pipeliner) MSetNX(pairs []interface{}) *redis.BoolCmd {
	return W.WMSetNX(pairs)
}
func (W _github_com_go_redis_redis_Pipeliner) MemoryUsage(key string, samples []int) *redis.IntCmd {
	return W.WMemoryUsage(key, samples)
}
func (W _github_com_go_redis_redis_Pipeliner) Migrate(host string, port string, key string, db int, timeout time.Duration) *redis.StatusCmd {
	return W.WMigrate(host, port, key, db, timeout)
}
func (W _github_com_go_redis_redis_Pipeliner) Move(key string, db int) *redis.BoolCmd {
	return W.WMove(key, db)
}
func (W _github_com_go_redis_redis_Pipeliner) ObjectEncoding(key string) *redis.StringCmd {
	return W.WObjectEncoding(key)
}
func (W _github_com_go_redis_redis_Pipeliner) ObjectIdleTime(key string) *redis.DurationCmd {
	return W.WObjectIdleTime(key)
}
func (W _github_com_go_redis_redis_Pipeliner) ObjectRefCount(key string) *redis.IntCmd {
	return W.WObjectRefCount(key)
}
func (W _github_com_go_redis_redis_Pipeliner) PExpire(key string, expiration time.Duration) *redis.BoolCmd {
	return W.WPExpire(key, expiration)
}
func (W _github_com_go_redis_redis_Pipeliner) PExpireAt(key string, tm time.Time) *redis.BoolCmd {
	return W.WPExpireAt(key, tm)
}
func (W _github_com_go_redis_redis_Pipeliner) PFAdd(key string, els []interface{}) *redis.IntCmd {
	return W.WPFAdd(key, els)
}
func (W _github_com_go_redis_redis_Pipeliner) PFCount(keys []string) *redis.IntCmd {
	return W.WPFCount(keys)
}
func (W _github_com_go_redis_redis_Pipeliner) PFMerge(dest string, keys []string) *redis.StatusCmd {
	return W.WPFMerge(dest, keys)
}
func (W _github_com_go_redis_redis_Pipeliner) PTTL(key string) *redis.DurationCmd {
	return W.WPTTL(key)
}
func (W _github_com_go_redis_redis_Pipeliner) Persist(key string) *redis.BoolCmd {
	return W.WPersist(key)
}
func (W _github_com_go_redis_redis_Pipeliner) Ping() *redis.StatusCmd    { return W.WPing() }
func (W _github_com_go_redis_redis_Pipeliner) Pipeline() redis.Pipeliner { return W.WPipeline() }
func (W _github_com_go_redis_redis_Pipeliner) Pipelined(fn func(redis.Pipeliner) error) ([]redis.Cmder, error) {
	return W.WPipelined(fn)
}
func (W _github_com_go_redis_redis_Pipeliner) Process(cmd redis.Cmder) error { return W.WProcess(cmd) }
func (W _github_com_go_redis_redis_Pipeliner) PubSubChannels(pattern string) *redis.StringSliceCmd {
	return W.WPubSubChannels(pattern)
}
func (W _github_com_go_redis_redis_Pipeliner) PubSubNumPat() *redis.IntCmd { return W.WPubSubNumPat() }
func (W _github_com_go_redis_redis_Pipeliner) PubSubNumSub(channels []string) *redis.StringIntMapCmd {
	return W.WPubSubNumSub(channels)
}
func (W _github_com_go_redis_redis_Pipeliner) Publish(channel string, message interface{}) *redis.IntCmd {
	return W.WPublish(channel, message)
}
func (W _github_com_go_redis_redis_Pipeliner) Quit() *redis.StatusCmd           { return W.WQuit() }
func (W _github_com_go_redis_redis_Pipeliner) RPop(key string) *redis.StringCmd { return W.WRPop(key) }
func (W _github_com_go_redis_redis_Pipeliner) RPopLPush(source string, destination string) *redis.StringCmd {
	return W.WRPopLPush(source, destination)
}
func (W _github_com_go_redis_redis_Pipeliner) RPush(key string, values []interface{}) *redis.IntCmd {
	return W.WRPush(key, values)
}
func (W _github_com_go_redis_redis_Pipeliner) RPushX(key string, values []interface{}) *redis.IntCmd {
	return W.WRPushX(key, values)
}
func (W _github_com_go_redis_redis_Pipeliner) RandomKey() *redis.StringCmd { return W.WRandomKey() }
func (W _github_com_go_redis_redis_Pipeliner) ReadOnly() *redis.StatusCmd  { return W.WReadOnly() }
func (W _github_com_go_redis_redis_Pipeliner) ReadWrite() *redis.StatusCmd { return W.WReadWrite() }
func (W _github_com_go_redis_redis_Pipeliner) Rename(key string, newkey string) *redis.StatusCmd {
	return W.WRename(key, newkey)
}
func (W _github_com_go_redis_redis_Pipeliner) RenameNX(key string, newkey string) *redis.BoolCmd {
	return W.WRenameNX(key, newkey)
}
func (W _github_com_go_redis_redis_Pipeliner) Restore(key string, ttl time.Duration, value string) *redis.StatusCmd {
	return W.WRestore(key, ttl, value)
}
func (W _github_com_go_redis_redis_Pipeliner) RestoreReplace(key string, ttl time.Duration, value string) *redis.StatusCmd {
	return W.WRestoreReplace(key, ttl, value)
}
func (W _github_com_go_redis_redis_Pipeliner) SAdd(key string, members []interface{}) *redis.IntCmd {
	return W.WSAdd(key, members)
}
func (W _github_com_go_redis_redis_Pipeliner) SCard(key string) *redis.IntCmd { return W.WSCard(key) }
func (W _github_com_go_redis_redis_Pipeliner) SDiff(keys []string) *redis.StringSliceCmd {
	return W.WSDiff(keys)
}
func (W _github_com_go_redis_redis_Pipeliner) SDiffStore(destination string, keys []string) *redis.IntCmd {
	return W.WSDiffStore(destination, keys)
}
func (W _github_com_go_redis_redis_Pipeliner) SInter(keys []string) *redis.StringSliceCmd {
	return W.WSInter(keys)
}
func (W _github_com_go_redis_redis_Pipeliner) SInterStore(destination string, keys []string) *redis.IntCmd {
	return W.WSInterStore(destination, keys)
}
func (W _github_com_go_redis_redis_Pipeliner) SIsMember(key string, member interface{}) *redis.BoolCmd {
	return W.WSIsMember(key, member)
}
func (W _github_com_go_redis_redis_Pipeliner) SMembers(key string) *redis.StringSliceCmd {
	return W.WSMembers(key)
}
func (W _github_com_go_redis_redis_Pipeliner) SMembersMap(key string) *redis.StringStructMapCmd {
	return W.WSMembersMap(key)
}
func (W _github_com_go_redis_redis_Pipeliner) SMove(source string, destination string, member interface{}) *redis.BoolCmd {
	return W.WSMove(source, destination, member)
}
func (W _github_com_go_redis_redis_Pipeliner) SPop(key string) *redis.StringCmd { return W.WSPop(key) }
func (W _github_com_go_redis_redis_Pipeliner) SPopN(key string, count int64) *redis.StringSliceCmd {
	return W.WSPopN(key, count)
}
func (W _github_com_go_redis_redis_Pipeliner) SRandMember(key string) *redis.StringCmd {
	return W.WSRandMember(key)
}
func (W _github_com_go_redis_redis_Pipeliner) SRandMemberN(key string, count int64) *redis.StringSliceCmd {
	return W.WSRandMemberN(key, count)
}
func (W _github_com_go_redis_redis_Pipeliner) SRem(key string, members []interface{}) *redis.IntCmd {
	return W.WSRem(key, members)
}
func (W _github_com_go_redis_redis_Pipeliner) SScan(key string, cursor uint64, match string, count int64) *redis.ScanCmd {
	return W.WSScan(key, cursor, match, count)
}
func (W _github_com_go_redis_redis_Pipeliner) SUnion(keys []string) *redis.StringSliceCmd {
	return W.WSUnion(keys)
}
func (W _github_com_go_redis_redis_Pipeliner) SUnionStore(destination string, keys []string) *redis.IntCmd {
	return W.WSUnionStore(destination, keys)
}
func (W _github_com_go_redis_redis_Pipeliner) Save() *redis.StatusCmd { return W.WSave() }
func (W _github_com_go_redis_redis_Pipeliner) Scan(cursor uint64, match string, count int64) *redis.ScanCmd {
	return W.WScan(cursor, match, count)
}
func (W _github_com_go_redis_redis_Pipeliner) ScriptExists(hashes []string) *redis.BoolSliceCmd {
	return W.WScriptExists(hashes)
}
func (W _github_com_go_redis_redis_Pipeliner) ScriptFlush() *redis.StatusCmd {
	return W.WScriptFlush()
}
func (W _github_com_go_redis_redis_Pipeliner) ScriptKill() *redis.StatusCmd { return W.WScriptKill() }
func (W _github_com_go_redis_redis_Pipeliner) ScriptLoad(script string) *redis.StringCmd {
	return W.WScriptLoad(script)
}
func (W _github_com_go_redis_redis_Pipeliner) Select(index int) *redis.StatusCmd {
	return W.WSelect(index)
}
func (W _github_com_go_redis_redis_Pipeliner) Set(key string, value interface{}, expiration time.Duration) *redis.StatusCmd {
	return W.WSet(key, value, expiration)
}
func (W _github_com_go_redis_redis_Pipeliner) SetBit(key string, offset int64, value int) *redis.IntCmd {
	return W.WSetBit(key, offset, value)
}
func (W _github_com_go_redis_redis_Pipeliner) SetNX(key string, value interface{}, expiration time.Duration) *redis.BoolCmd {
	return W.WSetNX(key, value, expiration)
}
func (W _github_com_go_redis_redis_Pipeliner) SetRange(key string, offset int64, value string) *redis.IntCmd {
	return W.WSetRange(key, offset, value)
}
func (W _github_com_go_redis_redis_Pipeliner) SetXX(key string, value interface{}, expiration time.Duration) *redis.BoolCmd {
	return W.WSetXX(key, value, expiration)
}
func (W _github_com_go_redis_redis_Pipeliner) Shutdown() *redis.StatusCmd { return W.WShutdown() }
func (W _github_com_go_redis_redis_Pipeliner) ShutdownNoSave() *redis.StatusCmd {
	return W.WShutdownNoSave()
}
func (W _github_com_go_redis_redis_Pipeliner) ShutdownSave() *redis.StatusCmd {
	return W.WShutdownSave()
}
func (W _github_com_go_redis_redis_Pipeliner) SlaveOf(host string, port string) *redis.StatusCmd {
	return W.WSlaveOf(host, port)
}
func (W _github_com_go_redis_redis_Pipeliner) Sort(key string, sort *redis.Sort) *redis.StringSliceCmd {
	return W.WSort(key, sort)
}
func (W _github_com_go_redis_redis_Pipeliner) SortInterfaces(key string, sort *redis.Sort) *redis.SliceCmd {
	return W.WSortInterfaces(key, sort)
}
func (W _github_com_go_redis_redis_Pipeliner) SortStore(key string, store string, sort *redis.Sort) *redis.IntCmd {
	return W.WSortStore(key, store, sort)
}
func (W _github_com_go_redis_redis_Pipeliner) StrLen(key string) *redis.IntCmd {
	return W.WStrLen(key)
}
func (W _github_com_go_redis_redis_Pipeliner) SwapDB(index1 int, index2 int) *redis.StatusCmd {
	return W.WSwapDB(index1, index2)
}
func (W _github_com_go_redis_redis_Pipeliner) TTL(key string) *redis.DurationCmd { return W.WTTL(key) }
func (W _github_com_go_redis_redis_Pipeliner) Time() *redis.TimeCmd              { return W.WTime() }
func (W _github_com_go_redis_redis_Pipeliner) Touch(keys []string) *redis.IntCmd {
	return W.WTouch(keys)
}
func (W _github_com_go_redis_redis_Pipeliner) TxPipeline() redis.Pipeliner { return W.WTxPipeline() }
func (W _github_com_go_redis_redis_Pipeliner) TxPipelined(fn func(redis.Pipeliner) error) ([]redis.Cmder, error) {
	return W.WTxPipelined(fn)
}
func (W _github_com_go_redis_redis_Pipeliner) Type(key string) *redis.StatusCmd { return W.WType(key) }
func (W _github_com_go_redis_redis_Pipeliner) Unlink(keys []string) *redis.IntCmd {
	return W.WUnlink(keys)
}
func (W _github_com_go_redis_redis_Pipeliner) XAck(stream string, group string, ids []string) *redis.IntCmd {
	return W.WXAck(stream, group, ids)
}
func (W _github_com_go_redis_redis_Pipeliner) XAdd(a *redis.XAddArgs) *redis.StringCmd {
	return W.WXAdd(a)
}
func (W _github_com_go_redis_redis_Pipeliner) XClaim(a *redis.XClaimArgs) *redis.XMessageSliceCmd {
	return W.WXClaim(a)
}
func (W _github_com_go_redis_redis_Pipeliner) XClaimJustID(a *redis.XClaimArgs) *redis.StringSliceCmd {
	return W.WXClaimJustID(a)
}
func (W _github_com_go_redis_redis_Pipeliner) XDel(stream string, ids []string) *redis.IntCmd {
	return W.WXDel(stream, ids)
}
func (W _github_com_go_redis_redis_Pipeliner) XGroupCreate(stream string, group string, start string) *redis.StatusCmd {
	return W.WXGroupCreate(stream, group, start)
}
func (W _github_com_go_redis_redis_Pipeliner) XGroupCreateMkStream(stream string, group string, start string) *redis.StatusCmd {
	return W.WXGroupCreateMkStream(stream, group, start)
}
func (W _github_com_go_redis_redis_Pipeliner) XGroupDelConsumer(stream string, group string, consumer string) *redis.IntCmd {
	return W.WXGroupDelConsumer(stream, group, consumer)
}
func (W _github_com_go_redis_redis_Pipeliner) XGroupDestroy(stream string, group string) *redis.IntCmd {
	return W.WXGroupDestroy(stream, group)
}
func (W _github_com_go_redis_redis_Pipeliner) XGroupSetID(stream string, group string, start string) *redis.StatusCmd {
	return W.WXGroupSetID(stream, group, start)
}
func (W _github_com_go_redis_redis_Pipeliner) XLen(stream string) *redis.IntCmd {
	return W.WXLen(stream)
}
func (W _github_com_go_redis_redis_Pipeliner) XPending(stream string, group string) *redis.XPendingCmd {
	return W.WXPending(stream, group)
}
func (W _github_com_go_redis_redis_Pipeliner) XPendingExt(a *redis.XPendingExtArgs) *redis.XPendingExtCmd {
	return W.WXPendingExt(a)
}
func (W _github_com_go_redis_redis_Pipeliner) XRange(stream string, start string, stop string) *redis.XMessageSliceCmd {
	return W.WXRange(stream, start, stop)
}
func (W _github_com_go_redis_redis_Pipeliner) XRangeN(stream string, start string, stop string, count int64) *redis.XMessageSliceCmd {
	return W.WXRangeN(stream, start, stop, count)
}
func (W _github_com_go_redis_redis_Pipeliner) XRead(a *redis.XReadArgs) *redis.XStreamSliceCmd {
	return W.WXRead(a)
}
func (W _github_com_go_redis_redis_Pipeliner) XReadGroup(a *redis.XReadGroupArgs) *redis.XStreamSliceCmd {
	return W.WXReadGroup(a)
}
func (W _github_com_go_redis_redis_Pipeliner) XReadStreams(streams []string) *redis.XStreamSliceCmd {
	return W.WXReadStreams(streams)
}
func (W _github_com_go_redis_redis_Pipeliner) XRevRange(stream string, start string, stop string) *redis.XMessageSliceCmd {
	return W.WXRevRange(stream, start, stop)
}
func (W _github_com_go_redis_redis_Pipeliner) XRevRangeN(stream string, start string, stop string, count int64) *redis.XMessageSliceCmd {
	return W.WXRevRangeN(stream, start, stop, count)
}
func (W _github_com_go_redis_redis_Pipeliner) XTrim(key string, maxLen int64) *redis.IntCmd {
	return W.WXTrim(key, maxLen)
}
func (W _github_com_go_redis_redis_Pipeliner) XTrimApprox(key string, maxLen int64) *redis.IntCmd {
	return W.WXTrimApprox(key, maxLen)
}
func (W _github_com_go_redis_redis_Pipeliner) ZAdd(key string, members []*redis.Z) *redis.IntCmd {
	return W.WZAdd(key, members)
}
func (W _github_com_go_redis_redis_Pipeliner) ZAddCh(key string, members []*redis.Z) *redis.IntCmd {
	return W.WZAddCh(key, members)
}
func (W _github_com_go_redis_redis_Pipeliner) ZAddNX(key string, members []*redis.Z) *redis.IntCmd {
	return W.WZAddNX(key, members)
}
func (W _github_com_go_redis_redis_Pipeliner) ZAddNXCh(key string, members []*redis.Z) *redis.IntCmd {
	return W.WZAddNXCh(key, members)
}
func (W _github_com_go_redis_redis_Pipeliner) ZAddXX(key string, members []*redis.Z) *redis.IntCmd {
	return W.WZAddXX(key, members)
}
func (W _github_com_go_redis_redis_Pipeliner) ZAddXXCh(key string, members []*redis.Z) *redis.IntCmd {
	return W.WZAddXXCh(key, members)
}
func (W _github_com_go_redis_redis_Pipeliner) ZCard(key string) *redis.IntCmd { return W.WZCard(key) }
func (W _github_com_go_redis_redis_Pipeliner) ZCount(key string, min string, max string) *redis.IntCmd {
	return W.WZCount(key, min, max)
}
func (W _github_com_go_redis_redis_Pipeliner) ZIncr(key string, member *redis.Z) *redis.FloatCmd {
	return W.WZIncr(key, member)
}
func (W _github_com_go_redis_redis_Pipeliner) ZIncrBy(key string, increment float64, member string) *redis.FloatCmd {
	return W.WZIncrBy(key, increment, member)
}
func (W _github_com_go_redis_redis_Pipeliner) ZIncrNX(key string, member *redis.Z) *redis.FloatCmd {
	return W.WZIncrNX(key, member)
}
func (W _github_com_go_redis_redis_Pipeliner) ZIncrXX(key string, member *redis.Z) *redis.FloatCmd {
	return W.WZIncrXX(key, member)
}
func (W _github_com_go_redis_redis_Pipeliner) ZInterStore(destination string, store *redis.ZStore) *redis.IntCmd {
	return W.WZInterStore(destination, store)
}
func (W _github_com_go_redis_redis_Pipeliner) ZLexCount(key string, min string, max string) *redis.IntCmd {
	return W.WZLexCount(key, min, max)
}
func (W _github_com_go_redis_redis_Pipeliner) ZPopMax(key string, count []int64) *redis.ZSliceCmd {
	return W.WZPopMax(key, count)
}
func (W _github_com_go_redis_redis_Pipeliner) ZPopMin(key string, count []int64) *redis.ZSliceCmd {
	return W.WZPopMin(key, count)
}
func (W _github_com_go_redis_redis_Pipeliner) ZRange(key string, start int64, stop int64) *redis.StringSliceCmd {
	return W.WZRange(key, start, stop)
}
func (W _github_com_go_redis_redis_Pipeliner) ZRangeByLex(key string, opt *redis.ZRangeBy) *redis.StringSliceCmd {
	return W.WZRangeByLex(key, opt)
}
func (W _github_com_go_redis_redis_Pipeliner) ZRangeByScore(key string, opt *redis.ZRangeBy) *redis.StringSliceCmd {
	return W.WZRangeByScore(key, opt)
}
func (W _github_com_go_redis_redis_Pipeliner) ZRangeByScoreWithScores(key string, opt *redis.ZRangeBy) *redis.ZSliceCmd {
	return W.WZRangeByScoreWithScores(key, opt)
}
func (W _github_com_go_redis_redis_Pipeliner) ZRangeWithScores(key string, start int64, stop int64) *redis.ZSliceCmd {
	return W.WZRangeWithScores(key, start, stop)
}
func (W _github_com_go_redis_redis_Pipeliner) ZRank(key string, member string) *redis.IntCmd {
	return W.WZRank(key, member)
}
func (W _github_com_go_redis_redis_Pipeliner) ZRem(key string, members []interface{}) *redis.IntCmd {
	return W.WZRem(key, members)
}
func (W _github_com_go_redis_redis_Pipeliner) ZRemRangeByLex(key string, min string, max string) *redis.IntCmd {
	return W.WZRemRangeByLex(key, min, max)
}
func (W _github_com_go_redis_redis_Pipeliner) ZRemRangeByRank(key string, start int64, stop int64) *redis.IntCmd {
	return W.WZRemRangeByRank(key, start, stop)
}
func (W _github_com_go_redis_redis_Pipeliner) ZRemRangeByScore(key string, min string, max string) *redis.IntCmd {
	return W.WZRemRangeByScore(key, min, max)
}
func (W _github_com_go_redis_redis_Pipeliner) ZRevRange(key string, start int64, stop int64) *redis.StringSliceCmd {
	return W.WZRevRange(key, start, stop)
}
func (W _github_com_go_redis_redis_Pipeliner) ZRevRangeByLex(key string, opt *redis.ZRangeBy) *redis.StringSliceCmd {
	return W.WZRevRangeByLex(key, opt)
}
func (W _github_com_go_redis_redis_Pipeliner) ZRevRangeByScore(key string, opt *redis.ZRangeBy) *redis.StringSliceCmd {
	return W.WZRevRangeByScore(key, opt)
}
func (W _github_com_go_redis_redis_Pipeliner) ZRevRangeByScoreWithScores(key string, opt *redis.ZRangeBy) *redis.ZSliceCmd {
	return W.WZRevRangeByScoreWithScores(key, opt)
}
func (W _github_com_go_redis_redis_Pipeliner) ZRevRangeWithScores(key string, start int64, stop int64) *redis.ZSliceCmd {
	return W.WZRevRangeWithScores(key, start, stop)
}
func (W _github_com_go_redis_redis_Pipeliner) ZRevRank(key string, member string) *redis.IntCmd {
	return W.WZRevRank(key, member)
}
func (W _github_com_go_redis_redis_Pipeliner) ZScan(key string, cursor uint64, match string, count int64) *redis.ScanCmd {
	return W.WZScan(key, cursor, match, count)
}
func (W _github_com_go_redis_redis_Pipeliner) ZScore(key string, member string) *redis.FloatCmd {
	return W.WZScore(key, member)
}
func (W _github_com_go_redis_redis_Pipeliner) ZUnionStore(dest string, store *redis.ZStore) *redis.IntCmd {
	return W.WZUnionStore(dest, store)
}

// _github_com_go_redis_redis_StatefulCmdable is an interface wrapper for StatefulCmdable type
type _github_com_go_redis_redis_StatefulCmdable struct {
	WAppend                     func(key string, value string) *redis.IntCmd
	WAuth                       func(password string) *redis.StatusCmd
	WBLPop                      func(timeout time.Duration, keys []string) *redis.StringSliceCmd
	WBRPop                      func(timeout time.Duration, keys []string) *redis.StringSliceCmd
	WBRPopLPush                 func(source string, destination string, timeout time.Duration) *redis.StringCmd
	WBZPopMax                   func(timeout time.Duration, keys []string) *redis.ZWithKeyCmd
	WBZPopMin                   func(timeout time.Duration, keys []string) *redis.ZWithKeyCmd
	WBgRewriteAOF               func() *redis.StatusCmd
	WBgSave                     func() *redis.StatusCmd
	WBitCount                   func(key string, bitCount *redis.BitCount) *redis.IntCmd
	WBitField                   func(key string, args []interface{}) *redis.IntSliceCmd
	WBitOpAnd                   func(destKey string, keys []string) *redis.IntCmd
	WBitOpNot                   func(destKey string, key string) *redis.IntCmd
	WBitOpOr                    func(destKey string, keys []string) *redis.IntCmd
	WBitOpXor                   func(destKey string, keys []string) *redis.IntCmd
	WBitPos                     func(key string, bit int64, pos []int64) *redis.IntCmd
	WClientGetName              func() *redis.StringCmd
	WClientID                   func() *redis.IntCmd
	WClientKill                 func(ipPort string) *redis.StatusCmd
	WClientKillByFilter         func(keys []string) *redis.IntCmd
	WClientList                 func() *redis.StringCmd
	WClientPause                func(dur time.Duration) *redis.BoolCmd
	WClientSetName              func(name string) *redis.BoolCmd
	WClusterAddSlots            func(slots []int) *redis.StatusCmd
	WClusterAddSlotsRange       func(min int, max int) *redis.StatusCmd
	WClusterCountFailureReports func(nodeID string) *redis.IntCmd
	WClusterCountKeysInSlot     func(slot int) *redis.IntCmd
	WClusterDelSlots            func(slots []int) *redis.StatusCmd
	WClusterDelSlotsRange       func(min int, max int) *redis.StatusCmd
	WClusterFailover            func() *redis.StatusCmd
	WClusterForget              func(nodeID string) *redis.StatusCmd
	WClusterGetKeysInSlot       func(slot int, count int) *redis.StringSliceCmd
	WClusterInfo                func() *redis.StringCmd
	WClusterKeySlot             func(key string) *redis.IntCmd
	WClusterMeet                func(host string, port string) *redis.StatusCmd
	WClusterNodes               func() *redis.StringCmd
	WClusterReplicate           func(nodeID string) *redis.StatusCmd
	WClusterResetHard           func() *redis.StatusCmd
	WClusterResetSoft           func() *redis.StatusCmd
	WClusterSaveConfig          func() *redis.StatusCmd
	WClusterSlaves              func(nodeID string) *redis.StringSliceCmd
	WClusterSlots               func() *redis.ClusterSlotsCmd
	WCommand                    func() *redis.CommandsInfoCmd
	WConfigGet                  func(parameter string) *redis.SliceCmd
	WConfigResetStat            func() *redis.StatusCmd
	WConfigRewrite              func() *redis.StatusCmd
	WConfigSet                  func(parameter string, value string) *redis.StatusCmd
	WDBSize                     func() *redis.IntCmd
	WDebugObject                func(key string) *redis.StringCmd
	WDecr                       func(key string) *redis.IntCmd
	WDecrBy                     func(key string, decrement int64) *redis.IntCmd
	WDel                        func(keys []string) *redis.IntCmd
	WDump                       func(key string) *redis.StringCmd
	WEcho                       func(message interface{}) *redis.StringCmd
	WEval                       func(script string, keys []string, args []interface{}) *redis.Cmd
	WEvalSha                    func(sha1 string, keys []string, args []interface{}) *redis.Cmd
	WExists                     func(keys []string) *redis.IntCmd
	WExpire                     func(key string, expiration time.Duration) *redis.BoolCmd
	WExpireAt                   func(key string, tm time.Time) *redis.BoolCmd
	WFlushAll                   func() *redis.StatusCmd
	WFlushAllAsync              func() *redis.StatusCmd
	WFlushDB                    func() *redis.StatusCmd
	WFlushDBAsync               func() *redis.StatusCmd
	WGeoAdd                     func(key string, geoLocation []*redis.GeoLocation) *redis.IntCmd
	WGeoDist                    func(key string, member1 string, member2 string, unit string) *redis.FloatCmd
	WGeoHash                    func(key string, members []string) *redis.StringSliceCmd
	WGeoPos                     func(key string, members []string) *redis.GeoPosCmd
	WGeoRadius                  func(key string, longitude float64, latitude float64, query *redis.GeoRadiusQuery) *redis.GeoLocationCmd
	WGeoRadiusByMember          func(key string, member string, query *redis.GeoRadiusQuery) *redis.GeoLocationCmd
	WGeoRadiusByMemberStore     func(key string, member string, query *redis.GeoRadiusQuery) *redis.IntCmd
	WGeoRadiusStore             func(key string, longitude float64, latitude float64, query *redis.GeoRadiusQuery) *redis.IntCmd
	WGet                        func(key string) *redis.StringCmd
	WGetBit                     func(key string, offset int64) *redis.IntCmd
	WGetRange                   func(key string, start int64, end int64) *redis.StringCmd
	WGetSet                     func(key string, value interface{}) *redis.StringCmd
	WHDel                       func(key string, fields []string) *redis.IntCmd
	WHExists                    func(key string, field string) *redis.BoolCmd
	WHGet                       func(key string, field string) *redis.StringCmd
	WHGetAll                    func(key string) *redis.StringStringMapCmd
	WHIncrBy                    func(key string, field string, incr int64) *redis.IntCmd
	WHIncrByFloat               func(key string, field string, incr float64) *redis.FloatCmd
	WHKeys                      func(key string) *redis.StringSliceCmd
	WHLen                       func(key string) *redis.IntCmd
	WHMGet                      func(key string, fields []string) *redis.SliceCmd
	WHMSet                      func(key string, fields map[string]interface{}) *redis.StatusCmd
	WHScan                      func(key string, cursor uint64, match string, count int64) *redis.ScanCmd
	WHSet                       func(key string, field string, value interface{}) *redis.BoolCmd
	WHSetNX                     func(key string, field string, value interface{}) *redis.BoolCmd
	WHVals                      func(key string) *redis.StringSliceCmd
	WIncr                       func(key string) *redis.IntCmd
	WIncrBy                     func(key string, value int64) *redis.IntCmd
	WIncrByFloat                func(key string, value float64) *redis.FloatCmd
	WInfo                       func(section []string) *redis.StringCmd
	WKeys                       func(pattern string) *redis.StringSliceCmd
	WLIndex                     func(key string, index int64) *redis.StringCmd
	WLInsert                    func(key string, op string, pivot interface{}, value interface{}) *redis.IntCmd
	WLInsertAfter               func(key string, pivot interface{}, value interface{}) *redis.IntCmd
	WLInsertBefore              func(key string, pivot interface{}, value interface{}) *redis.IntCmd
	WLLen                       func(key string) *redis.IntCmd
	WLPop                       func(key string) *redis.StringCmd
	WLPush                      func(key string, values []interface{}) *redis.IntCmd
	WLPushX                     func(key string, values []interface{}) *redis.IntCmd
	WLRange                     func(key string, start int64, stop int64) *redis.StringSliceCmd
	WLRem                       func(key string, count int64, value interface{}) *redis.IntCmd
	WLSet                       func(key string, index int64, value interface{}) *redis.StatusCmd
	WLTrim                      func(key string, start int64, stop int64) *redis.StatusCmd
	WLastSave                   func() *redis.IntCmd
	WMGet                       func(keys []string) *redis.SliceCmd
	WMSet                       func(pairs []interface{}) *redis.StatusCmd
	WMSetNX                     func(pairs []interface{}) *redis.BoolCmd
	WMemoryUsage                func(key string, samples []int) *redis.IntCmd
	WMigrate                    func(host string, port string, key string, db int, timeout time.Duration) *redis.StatusCmd
	WMove                       func(key string, db int) *redis.BoolCmd
	WObjectEncoding             func(key string) *redis.StringCmd
	WObjectIdleTime             func(key string) *redis.DurationCmd
	WObjectRefCount             func(key string) *redis.IntCmd
	WPExpire                    func(key string, expiration time.Duration) *redis.BoolCmd
	WPExpireAt                  func(key string, tm time.Time) *redis.BoolCmd
	WPFAdd                      func(key string, els []interface{}) *redis.IntCmd
	WPFCount                    func(keys []string) *redis.IntCmd
	WPFMerge                    func(dest string, keys []string) *redis.StatusCmd
	WPTTL                       func(key string) *redis.DurationCmd
	WPersist                    func(key string) *redis.BoolCmd
	WPing                       func() *redis.StatusCmd
	WPipeline                   func() redis.Pipeliner
	WPipelined                  func(fn func(redis.Pipeliner) error) ([]redis.Cmder, error)
	WPubSubChannels             func(pattern string) *redis.StringSliceCmd
	WPubSubNumPat               func() *redis.IntCmd
	WPubSubNumSub               func(channels []string) *redis.StringIntMapCmd
	WPublish                    func(channel string, message interface{}) *redis.IntCmd
	WQuit                       func() *redis.StatusCmd
	WRPop                       func(key string) *redis.StringCmd
	WRPopLPush                  func(source string, destination string) *redis.StringCmd
	WRPush                      func(key string, values []interface{}) *redis.IntCmd
	WRPushX                     func(key string, values []interface{}) *redis.IntCmd
	WRandomKey                  func() *redis.StringCmd
	WReadOnly                   func() *redis.StatusCmd
	WReadWrite                  func() *redis.StatusCmd
	WRename                     func(key string, newkey string) *redis.StatusCmd
	WRenameNX                   func(key string, newkey string) *redis.BoolCmd
	WRestore                    func(key string, ttl time.Duration, value string) *redis.StatusCmd
	WRestoreReplace             func(key string, ttl time.Duration, value string) *redis.StatusCmd
	WSAdd                       func(key string, members []interface{}) *redis.IntCmd
	WSCard                      func(key string) *redis.IntCmd
	WSDiff                      func(keys []string) *redis.StringSliceCmd
	WSDiffStore                 func(destination string, keys []string) *redis.IntCmd
	WSInter                     func(keys []string) *redis.StringSliceCmd
	WSInterStore                func(destination string, keys []string) *redis.IntCmd
	WSIsMember                  func(key string, member interface{}) *redis.BoolCmd
	WSMembers                   func(key string) *redis.StringSliceCmd
	WSMembersMap                func(key string) *redis.StringStructMapCmd
	WSMove                      func(source string, destination string, member interface{}) *redis.BoolCmd
	WSPop                       func(key string) *redis.StringCmd
	WSPopN                      func(key string, count int64) *redis.StringSliceCmd
	WSRandMember                func(key string) *redis.StringCmd
	WSRandMemberN               func(key string, count int64) *redis.StringSliceCmd
	WSRem                       func(key string, members []interface{}) *redis.IntCmd
	WSScan                      func(key string, cursor uint64, match string, count int64) *redis.ScanCmd
	WSUnion                     func(keys []string) *redis.StringSliceCmd
	WSUnionStore                func(destination string, keys []string) *redis.IntCmd
	WSave                       func() *redis.StatusCmd
	WScan                       func(cursor uint64, match string, count int64) *redis.ScanCmd
	WScriptExists               func(hashes []string) *redis.BoolSliceCmd
	WScriptFlush                func() *redis.StatusCmd
	WScriptKill                 func() *redis.StatusCmd
	WScriptLoad                 func(script string) *redis.StringCmd
	WSelect                     func(index int) *redis.StatusCmd
	WSet                        func(key string, value interface{}, expiration time.Duration) *redis.StatusCmd
	WSetBit                     func(key string, offset int64, value int) *redis.IntCmd
	WSetNX                      func(key string, value interface{}, expiration time.Duration) *redis.BoolCmd
	WSetRange                   func(key string, offset int64, value string) *redis.IntCmd
	WSetXX                      func(key string, value interface{}, expiration time.Duration) *redis.BoolCmd
	WShutdown                   func() *redis.StatusCmd
	WShutdownNoSave             func() *redis.StatusCmd
	WShutdownSave               func() *redis.StatusCmd
	WSlaveOf                    func(host string, port string) *redis.StatusCmd
	WSort                       func(key string, sort *redis.Sort) *redis.StringSliceCmd
	WSortInterfaces             func(key string, sort *redis.Sort) *redis.SliceCmd
	WSortStore                  func(key string, store string, sort *redis.Sort) *redis.IntCmd
	WStrLen                     func(key string) *redis.IntCmd
	WSwapDB                     func(index1 int, index2 int) *redis.StatusCmd
	WTTL                        func(key string) *redis.DurationCmd
	WTime                       func() *redis.TimeCmd
	WTouch                      func(keys []string) *redis.IntCmd
	WTxPipeline                 func() redis.Pipeliner
	WTxPipelined                func(fn func(redis.Pipeliner) error) ([]redis.Cmder, error)
	WType                       func(key string) *redis.StatusCmd
	WUnlink                     func(keys []string) *redis.IntCmd
	WXAck                       func(stream string, group string, ids []string) *redis.IntCmd
	WXAdd                       func(a *redis.XAddArgs) *redis.StringCmd
	WXClaim                     func(a *redis.XClaimArgs) *redis.XMessageSliceCmd
	WXClaimJustID               func(a *redis.XClaimArgs) *redis.StringSliceCmd
	WXDel                       func(stream string, ids []string) *redis.IntCmd
	WXGroupCreate               func(stream string, group string, start string) *redis.StatusCmd
	WXGroupCreateMkStream       func(stream string, group string, start string) *redis.StatusCmd
	WXGroupDelConsumer          func(stream string, group string, consumer string) *redis.IntCmd
	WXGroupDestroy              func(stream string, group string) *redis.IntCmd
	WXGroupSetID                func(stream string, group string, start string) *redis.StatusCmd
	WXLen                       func(stream string) *redis.IntCmd
	WXPending                   func(stream string, group string) *redis.XPendingCmd
	WXPendingExt                func(a *redis.XPendingExtArgs) *redis.XPendingExtCmd
	WXRange                     func(stream string, start string, stop string) *redis.XMessageSliceCmd
	WXRangeN                    func(stream string, start string, stop string, count int64) *redis.XMessageSliceCmd
	WXRead                      func(a *redis.XReadArgs) *redis.XStreamSliceCmd
	WXReadGroup                 func(a *redis.XReadGroupArgs) *redis.XStreamSliceCmd
	WXReadStreams               func(streams []string) *redis.XStreamSliceCmd
	WXRevRange                  func(stream string, start string, stop string) *redis.XMessageSliceCmd
	WXRevRangeN                 func(stream string, start string, stop string, count int64) *redis.XMessageSliceCmd
	WXTrim                      func(key string, maxLen int64) *redis.IntCmd
	WXTrimApprox                func(key string, maxLen int64) *redis.IntCmd
	WZAdd                       func(key string, members []*redis.Z) *redis.IntCmd
	WZAddCh                     func(key string, members []*redis.Z) *redis.IntCmd
	WZAddNX                     func(key string, members []*redis.Z) *redis.IntCmd
	WZAddNXCh                   func(key string, members []*redis.Z) *redis.IntCmd
	WZAddXX                     func(key string, members []*redis.Z) *redis.IntCmd
	WZAddXXCh                   func(key string, members []*redis.Z) *redis.IntCmd
	WZCard                      func(key string) *redis.IntCmd
	WZCount                     func(key string, min string, max string) *redis.IntCmd
	WZIncr                      func(key string, member *redis.Z) *redis.FloatCmd
	WZIncrBy                    func(key string, increment float64, member string) *redis.FloatCmd
	WZIncrNX                    func(key string, member *redis.Z) *redis.FloatCmd
	WZIncrXX                    func(key string, member *redis.Z) *redis.FloatCmd
	WZInterStore                func(destination string, store *redis.ZStore) *redis.IntCmd
	WZLexCount                  func(key string, min string, max string) *redis.IntCmd
	WZPopMax                    func(key string, count []int64) *redis.ZSliceCmd
	WZPopMin                    func(key string, count []int64) *redis.ZSliceCmd
	WZRange                     func(key string, start int64, stop int64) *redis.StringSliceCmd
	WZRangeByLex                func(key string, opt *redis.ZRangeBy) *redis.StringSliceCmd
	WZRangeByScore              func(key string, opt *redis.ZRangeBy) *redis.StringSliceCmd
	WZRangeByScoreWithScores    func(key string, opt *redis.ZRangeBy) *redis.ZSliceCmd
	WZRangeWithScores           func(key string, start int64, stop int64) *redis.ZSliceCmd
	WZRank                      func(key string, member string) *redis.IntCmd
	WZRem                       func(key string, members []interface{}) *redis.IntCmd
	WZRemRangeByLex             func(key string, min string, max string) *redis.IntCmd
	WZRemRangeByRank            func(key string, start int64, stop int64) *redis.IntCmd
	WZRemRangeByScore           func(key string, min string, max string) *redis.IntCmd
	WZRevRange                  func(key string, start int64, stop int64) *redis.StringSliceCmd
	WZRevRangeByLex             func(key string, opt *redis.ZRangeBy) *redis.StringSliceCmd
	WZRevRangeByScore           func(key string, opt *redis.ZRangeBy) *redis.StringSliceCmd
	WZRevRangeByScoreWithScores func(key string, opt *redis.ZRangeBy) *redis.ZSliceCmd
	WZRevRangeWithScores        func(key string, start int64, stop int64) *redis.ZSliceCmd
	WZRevRank                   func(key string, member string) *redis.IntCmd
	WZScan                      func(key string, cursor uint64, match string, count int64) *redis.ScanCmd
	WZScore                     func(key string, member string) *redis.FloatCmd
	WZUnionStore                func(dest string, store *redis.ZStore) *redis.IntCmd
}

func (W _github_com_go_redis_redis_StatefulCmdable) Append(key string, value string) *redis.IntCmd {
	return W.WAppend(key, value)
}
func (W _github_com_go_redis_redis_StatefulCmdable) Auth(password string) *redis.StatusCmd {
	return W.WAuth(password)
}
func (W _github_com_go_redis_redis_StatefulCmdable) BLPop(timeout time.Duration, keys []string) *redis.StringSliceCmd {
	return W.WBLPop(timeout, keys)
}
func (W _github_com_go_redis_redis_StatefulCmdable) BRPop(timeout time.Duration, keys []string) *redis.StringSliceCmd {
	return W.WBRPop(timeout, keys)
}
func (W _github_com_go_redis_redis_StatefulCmdable) BRPopLPush(source string, destination string, timeout time.Duration) *redis.StringCmd {
	return W.WBRPopLPush(source, destination, timeout)
}
func (W _github_com_go_redis_redis_StatefulCmdable) BZPopMax(timeout time.Duration, keys []string) *redis.ZWithKeyCmd {
	return W.WBZPopMax(timeout, keys)
}
func (W _github_com_go_redis_redis_StatefulCmdable) BZPopMin(timeout time.Duration, keys []string) *redis.ZWithKeyCmd {
	return W.WBZPopMin(timeout, keys)
}
func (W _github_com_go_redis_redis_StatefulCmdable) BgRewriteAOF() *redis.StatusCmd {
	return W.WBgRewriteAOF()
}
func (W _github_com_go_redis_redis_StatefulCmdable) BgSave() *redis.StatusCmd { return W.WBgSave() }
func (W _github_com_go_redis_redis_StatefulCmdable) BitCount(key string, bitCount *redis.BitCount) *redis.IntCmd {
	return W.WBitCount(key, bitCount)
}
func (W _github_com_go_redis_redis_StatefulCmdable) BitField(key string, args []interface{}) *redis.IntSliceCmd {
	return W.WBitField(key, args)
}
func (W _github_com_go_redis_redis_StatefulCmdable) BitOpAnd(destKey string, keys []string) *redis.IntCmd {
	return W.WBitOpAnd(destKey, keys)
}
func (W _github_com_go_redis_redis_StatefulCmdable) BitOpNot(destKey string, key string) *redis.IntCmd {
	return W.WBitOpNot(destKey, key)
}
func (W _github_com_go_redis_redis_StatefulCmdable) BitOpOr(destKey string, keys []string) *redis.IntCmd {
	return W.WBitOpOr(destKey, keys)
}
func (W _github_com_go_redis_redis_StatefulCmdable) BitOpXor(destKey string, keys []string) *redis.IntCmd {
	return W.WBitOpXor(destKey, keys)
}
func (W _github_com_go_redis_redis_StatefulCmdable) BitPos(key string, bit int64, pos []int64) *redis.IntCmd {
	return W.WBitPos(key, bit, pos)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ClientGetName() *redis.StringCmd {
	return W.WClientGetName()
}
func (W _github_com_go_redis_redis_StatefulCmdable) ClientID() *redis.IntCmd { return W.WClientID() }
func (W _github_com_go_redis_redis_StatefulCmdable) ClientKill(ipPort string) *redis.StatusCmd {
	return W.WClientKill(ipPort)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ClientKillByFilter(keys []string) *redis.IntCmd {
	return W.WClientKillByFilter(keys)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ClientList() *redis.StringCmd {
	return W.WClientList()
}
func (W _github_com_go_redis_redis_StatefulCmdable) ClientPause(dur time.Duration) *redis.BoolCmd {
	return W.WClientPause(dur)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ClientSetName(name string) *redis.BoolCmd {
	return W.WClientSetName(name)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ClusterAddSlots(slots []int) *redis.StatusCmd {
	return W.WClusterAddSlots(slots)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ClusterAddSlotsRange(min int, max int) *redis.StatusCmd {
	return W.WClusterAddSlotsRange(min, max)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ClusterCountFailureReports(nodeID string) *redis.IntCmd {
	return W.WClusterCountFailureReports(nodeID)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ClusterCountKeysInSlot(slot int) *redis.IntCmd {
	return W.WClusterCountKeysInSlot(slot)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ClusterDelSlots(slots []int) *redis.StatusCmd {
	return W.WClusterDelSlots(slots)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ClusterDelSlotsRange(min int, max int) *redis.StatusCmd {
	return W.WClusterDelSlotsRange(min, max)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ClusterFailover() *redis.StatusCmd {
	return W.WClusterFailover()
}
func (W _github_com_go_redis_redis_StatefulCmdable) ClusterForget(nodeID string) *redis.StatusCmd {
	return W.WClusterForget(nodeID)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ClusterGetKeysInSlot(slot int, count int) *redis.StringSliceCmd {
	return W.WClusterGetKeysInSlot(slot, count)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ClusterInfo() *redis.StringCmd {
	return W.WClusterInfo()
}
func (W _github_com_go_redis_redis_StatefulCmdable) ClusterKeySlot(key string) *redis.IntCmd {
	return W.WClusterKeySlot(key)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ClusterMeet(host string, port string) *redis.StatusCmd {
	return W.WClusterMeet(host, port)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ClusterNodes() *redis.StringCmd {
	return W.WClusterNodes()
}
func (W _github_com_go_redis_redis_StatefulCmdable) ClusterReplicate(nodeID string) *redis.StatusCmd {
	return W.WClusterReplicate(nodeID)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ClusterResetHard() *redis.StatusCmd {
	return W.WClusterResetHard()
}
func (W _github_com_go_redis_redis_StatefulCmdable) ClusterResetSoft() *redis.StatusCmd {
	return W.WClusterResetSoft()
}
func (W _github_com_go_redis_redis_StatefulCmdable) ClusterSaveConfig() *redis.StatusCmd {
	return W.WClusterSaveConfig()
}
func (W _github_com_go_redis_redis_StatefulCmdable) ClusterSlaves(nodeID string) *redis.StringSliceCmd {
	return W.WClusterSlaves(nodeID)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ClusterSlots() *redis.ClusterSlotsCmd {
	return W.WClusterSlots()
}
func (W _github_com_go_redis_redis_StatefulCmdable) Command() *redis.CommandsInfoCmd {
	return W.WCommand()
}
func (W _github_com_go_redis_redis_StatefulCmdable) ConfigGet(parameter string) *redis.SliceCmd {
	return W.WConfigGet(parameter)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ConfigResetStat() *redis.StatusCmd {
	return W.WConfigResetStat()
}
func (W _github_com_go_redis_redis_StatefulCmdable) ConfigRewrite() *redis.StatusCmd {
	return W.WConfigRewrite()
}
func (W _github_com_go_redis_redis_StatefulCmdable) ConfigSet(parameter string, value string) *redis.StatusCmd {
	return W.WConfigSet(parameter, value)
}
func (W _github_com_go_redis_redis_StatefulCmdable) DBSize() *redis.IntCmd { return W.WDBSize() }
func (W _github_com_go_redis_redis_StatefulCmdable) DebugObject(key string) *redis.StringCmd {
	return W.WDebugObject(key)
}
func (W _github_com_go_redis_redis_StatefulCmdable) Decr(key string) *redis.IntCmd {
	return W.WDecr(key)
}
func (W _github_com_go_redis_redis_StatefulCmdable) DecrBy(key string, decrement int64) *redis.IntCmd {
	return W.WDecrBy(key, decrement)
}
func (W _github_com_go_redis_redis_StatefulCmdable) Del(keys []string) *redis.IntCmd {
	return W.WDel(keys)
}
func (W _github_com_go_redis_redis_StatefulCmdable) Dump(key string) *redis.StringCmd {
	return W.WDump(key)
}
func (W _github_com_go_redis_redis_StatefulCmdable) Echo(message interface{}) *redis.StringCmd {
	return W.WEcho(message)
}
func (W _github_com_go_redis_redis_StatefulCmdable) Eval(script string, keys []string, args []interface{}) *redis.Cmd {
	return W.WEval(script, keys, args)
}
func (W _github_com_go_redis_redis_StatefulCmdable) EvalSha(sha1 string, keys []string, args []interface{}) *redis.Cmd {
	return W.WEvalSha(sha1, keys, args)
}
func (W _github_com_go_redis_redis_StatefulCmdable) Exists(keys []string) *redis.IntCmd {
	return W.WExists(keys)
}
func (W _github_com_go_redis_redis_StatefulCmdable) Expire(key string, expiration time.Duration) *redis.BoolCmd {
	return W.WExpire(key, expiration)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ExpireAt(key string, tm time.Time) *redis.BoolCmd {
	return W.WExpireAt(key, tm)
}
func (W _github_com_go_redis_redis_StatefulCmdable) FlushAll() *redis.StatusCmd {
	return W.WFlushAll()
}
func (W _github_com_go_redis_redis_StatefulCmdable) FlushAllAsync() *redis.StatusCmd {
	return W.WFlushAllAsync()
}
func (W _github_com_go_redis_redis_StatefulCmdable) FlushDB() *redis.StatusCmd { return W.WFlushDB() }
func (W _github_com_go_redis_redis_StatefulCmdable) FlushDBAsync() *redis.StatusCmd {
	return W.WFlushDBAsync()
}
func (W _github_com_go_redis_redis_StatefulCmdable) GeoAdd(key string, geoLocation []*redis.GeoLocation) *redis.IntCmd {
	return W.WGeoAdd(key, geoLocation)
}
func (W _github_com_go_redis_redis_StatefulCmdable) GeoDist(key string, member1 string, member2 string, unit string) *redis.FloatCmd {
	return W.WGeoDist(key, member1, member2, unit)
}
func (W _github_com_go_redis_redis_StatefulCmdable) GeoHash(key string, members []string) *redis.StringSliceCmd {
	return W.WGeoHash(key, members)
}
func (W _github_com_go_redis_redis_StatefulCmdable) GeoPos(key string, members []string) *redis.GeoPosCmd {
	return W.WGeoPos(key, members)
}
func (W _github_com_go_redis_redis_StatefulCmdable) GeoRadius(key string, longitude float64, latitude float64, query *redis.GeoRadiusQuery) *redis.GeoLocationCmd {
	return W.WGeoRadius(key, longitude, latitude, query)
}
func (W _github_com_go_redis_redis_StatefulCmdable) GeoRadiusByMember(key string, member string, query *redis.GeoRadiusQuery) *redis.GeoLocationCmd {
	return W.WGeoRadiusByMember(key, member, query)
}
func (W _github_com_go_redis_redis_StatefulCmdable) GeoRadiusByMemberStore(key string, member string, query *redis.GeoRadiusQuery) *redis.IntCmd {
	return W.WGeoRadiusByMemberStore(key, member, query)
}
func (W _github_com_go_redis_redis_StatefulCmdable) GeoRadiusStore(key string, longitude float64, latitude float64, query *redis.GeoRadiusQuery) *redis.IntCmd {
	return W.WGeoRadiusStore(key, longitude, latitude, query)
}
func (W _github_com_go_redis_redis_StatefulCmdable) Get(key string) *redis.StringCmd {
	return W.WGet(key)
}
func (W _github_com_go_redis_redis_StatefulCmdable) GetBit(key string, offset int64) *redis.IntCmd {
	return W.WGetBit(key, offset)
}
func (W _github_com_go_redis_redis_StatefulCmdable) GetRange(key string, start int64, end int64) *redis.StringCmd {
	return W.WGetRange(key, start, end)
}
func (W _github_com_go_redis_redis_StatefulCmdable) GetSet(key string, value interface{}) *redis.StringCmd {
	return W.WGetSet(key, value)
}
func (W _github_com_go_redis_redis_StatefulCmdable) HDel(key string, fields []string) *redis.IntCmd {
	return W.WHDel(key, fields)
}
func (W _github_com_go_redis_redis_StatefulCmdable) HExists(key string, field string) *redis.BoolCmd {
	return W.WHExists(key, field)
}
func (W _github_com_go_redis_redis_StatefulCmdable) HGet(key string, field string) *redis.StringCmd {
	return W.WHGet(key, field)
}
func (W _github_com_go_redis_redis_StatefulCmdable) HGetAll(key string) *redis.StringStringMapCmd {
	return W.WHGetAll(key)
}
func (W _github_com_go_redis_redis_StatefulCmdable) HIncrBy(key string, field string, incr int64) *redis.IntCmd {
	return W.WHIncrBy(key, field, incr)
}
func (W _github_com_go_redis_redis_StatefulCmdable) HIncrByFloat(key string, field string, incr float64) *redis.FloatCmd {
	return W.WHIncrByFloat(key, field, incr)
}
func (W _github_com_go_redis_redis_StatefulCmdable) HKeys(key string) *redis.StringSliceCmd {
	return W.WHKeys(key)
}
func (W _github_com_go_redis_redis_StatefulCmdable) HLen(key string) *redis.IntCmd {
	return W.WHLen(key)
}
func (W _github_com_go_redis_redis_StatefulCmdable) HMGet(key string, fields []string) *redis.SliceCmd {
	return W.WHMGet(key, fields)
}
func (W _github_com_go_redis_redis_StatefulCmdable) HMSet(key string, fields map[string]interface{}) *redis.StatusCmd {
	return W.WHMSet(key, fields)
}
func (W _github_com_go_redis_redis_StatefulCmdable) HScan(key string, cursor uint64, match string, count int64) *redis.ScanCmd {
	return W.WHScan(key, cursor, match, count)
}
func (W _github_com_go_redis_redis_StatefulCmdable) HSet(key string, field string, value interface{}) *redis.BoolCmd {
	return W.WHSet(key, field, value)
}
func (W _github_com_go_redis_redis_StatefulCmdable) HSetNX(key string, field string, value interface{}) *redis.BoolCmd {
	return W.WHSetNX(key, field, value)
}
func (W _github_com_go_redis_redis_StatefulCmdable) HVals(key string) *redis.StringSliceCmd {
	return W.WHVals(key)
}
func (W _github_com_go_redis_redis_StatefulCmdable) Incr(key string) *redis.IntCmd {
	return W.WIncr(key)
}
func (W _github_com_go_redis_redis_StatefulCmdable) IncrBy(key string, value int64) *redis.IntCmd {
	return W.WIncrBy(key, value)
}
func (W _github_com_go_redis_redis_StatefulCmdable) IncrByFloat(key string, value float64) *redis.FloatCmd {
	return W.WIncrByFloat(key, value)
}
func (W _github_com_go_redis_redis_StatefulCmdable) Info(section []string) *redis.StringCmd {
	return W.WInfo(section)
}
func (W _github_com_go_redis_redis_StatefulCmdable) Keys(pattern string) *redis.StringSliceCmd {
	return W.WKeys(pattern)
}
func (W _github_com_go_redis_redis_StatefulCmdable) LIndex(key string, index int64) *redis.StringCmd {
	return W.WLIndex(key, index)
}
func (W _github_com_go_redis_redis_StatefulCmdable) LInsert(key string, op string, pivot interface{}, value interface{}) *redis.IntCmd {
	return W.WLInsert(key, op, pivot, value)
}
func (W _github_com_go_redis_redis_StatefulCmdable) LInsertAfter(key string, pivot interface{}, value interface{}) *redis.IntCmd {
	return W.WLInsertAfter(key, pivot, value)
}
func (W _github_com_go_redis_redis_StatefulCmdable) LInsertBefore(key string, pivot interface{}, value interface{}) *redis.IntCmd {
	return W.WLInsertBefore(key, pivot, value)
}
func (W _github_com_go_redis_redis_StatefulCmdable) LLen(key string) *redis.IntCmd {
	return W.WLLen(key)
}
func (W _github_com_go_redis_redis_StatefulCmdable) LPop(key string) *redis.StringCmd {
	return W.WLPop(key)
}
func (W _github_com_go_redis_redis_StatefulCmdable) LPush(key string, values []interface{}) *redis.IntCmd {
	return W.WLPush(key, values)
}
func (W _github_com_go_redis_redis_StatefulCmdable) LPushX(key string, values []interface{}) *redis.IntCmd {
	return W.WLPushX(key, values)
}
func (W _github_com_go_redis_redis_StatefulCmdable) LRange(key string, start int64, stop int64) *redis.StringSliceCmd {
	return W.WLRange(key, start, stop)
}
func (W _github_com_go_redis_redis_StatefulCmdable) LRem(key string, count int64, value interface{}) *redis.IntCmd {
	return W.WLRem(key, count, value)
}
func (W _github_com_go_redis_redis_StatefulCmdable) LSet(key string, index int64, value interface{}) *redis.StatusCmd {
	return W.WLSet(key, index, value)
}
func (W _github_com_go_redis_redis_StatefulCmdable) LTrim(key string, start int64, stop int64) *redis.StatusCmd {
	return W.WLTrim(key, start, stop)
}
func (W _github_com_go_redis_redis_StatefulCmdable) LastSave() *redis.IntCmd { return W.WLastSave() }
func (W _github_com_go_redis_redis_StatefulCmdable) MGet(keys []string) *redis.SliceCmd {
	return W.WMGet(keys)
}
func (W _github_com_go_redis_redis_StatefulCmdable) MSet(pairs []interface{}) *redis.StatusCmd {
	return W.WMSet(pairs)
}
func (W _github_com_go_redis_redis_StatefulCmdable) MSetNX(pairs []interface{}) *redis.BoolCmd {
	return W.WMSetNX(pairs)
}
func (W _github_com_go_redis_redis_StatefulCmdable) MemoryUsage(key string, samples []int) *redis.IntCmd {
	return W.WMemoryUsage(key, samples)
}
func (W _github_com_go_redis_redis_StatefulCmdable) Migrate(host string, port string, key string, db int, timeout time.Duration) *redis.StatusCmd {
	return W.WMigrate(host, port, key, db, timeout)
}
func (W _github_com_go_redis_redis_StatefulCmdable) Move(key string, db int) *redis.BoolCmd {
	return W.WMove(key, db)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ObjectEncoding(key string) *redis.StringCmd {
	return W.WObjectEncoding(key)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ObjectIdleTime(key string) *redis.DurationCmd {
	return W.WObjectIdleTime(key)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ObjectRefCount(key string) *redis.IntCmd {
	return W.WObjectRefCount(key)
}
func (W _github_com_go_redis_redis_StatefulCmdable) PExpire(key string, expiration time.Duration) *redis.BoolCmd {
	return W.WPExpire(key, expiration)
}
func (W _github_com_go_redis_redis_StatefulCmdable) PExpireAt(key string, tm time.Time) *redis.BoolCmd {
	return W.WPExpireAt(key, tm)
}
func (W _github_com_go_redis_redis_StatefulCmdable) PFAdd(key string, els []interface{}) *redis.IntCmd {
	return W.WPFAdd(key, els)
}
func (W _github_com_go_redis_redis_StatefulCmdable) PFCount(keys []string) *redis.IntCmd {
	return W.WPFCount(keys)
}
func (W _github_com_go_redis_redis_StatefulCmdable) PFMerge(dest string, keys []string) *redis.StatusCmd {
	return W.WPFMerge(dest, keys)
}
func (W _github_com_go_redis_redis_StatefulCmdable) PTTL(key string) *redis.DurationCmd {
	return W.WPTTL(key)
}
func (W _github_com_go_redis_redis_StatefulCmdable) Persist(key string) *redis.BoolCmd {
	return W.WPersist(key)
}
func (W _github_com_go_redis_redis_StatefulCmdable) Ping() *redis.StatusCmd    { return W.WPing() }
func (W _github_com_go_redis_redis_StatefulCmdable) Pipeline() redis.Pipeliner { return W.WPipeline() }
func (W _github_com_go_redis_redis_StatefulCmdable) Pipelined(fn func(redis.Pipeliner) error) ([]redis.Cmder, error) {
	return W.WPipelined(fn)
}
func (W _github_com_go_redis_redis_StatefulCmdable) PubSubChannels(pattern string) *redis.StringSliceCmd {
	return W.WPubSubChannels(pattern)
}
func (W _github_com_go_redis_redis_StatefulCmdable) PubSubNumPat() *redis.IntCmd {
	return W.WPubSubNumPat()
}
func (W _github_com_go_redis_redis_StatefulCmdable) PubSubNumSub(channels []string) *redis.StringIntMapCmd {
	return W.WPubSubNumSub(channels)
}
func (W _github_com_go_redis_redis_StatefulCmdable) Publish(channel string, message interface{}) *redis.IntCmd {
	return W.WPublish(channel, message)
}
func (W _github_com_go_redis_redis_StatefulCmdable) Quit() *redis.StatusCmd { return W.WQuit() }
func (W _github_com_go_redis_redis_StatefulCmdable) RPop(key string) *redis.StringCmd {
	return W.WRPop(key)
}
func (W _github_com_go_redis_redis_StatefulCmdable) RPopLPush(source string, destination string) *redis.StringCmd {
	return W.WRPopLPush(source, destination)
}
func (W _github_com_go_redis_redis_StatefulCmdable) RPush(key string, values []interface{}) *redis.IntCmd {
	return W.WRPush(key, values)
}
func (W _github_com_go_redis_redis_StatefulCmdable) RPushX(key string, values []interface{}) *redis.IntCmd {
	return W.WRPushX(key, values)
}
func (W _github_com_go_redis_redis_StatefulCmdable) RandomKey() *redis.StringCmd {
	return W.WRandomKey()
}
func (W _github_com_go_redis_redis_StatefulCmdable) ReadOnly() *redis.StatusCmd {
	return W.WReadOnly()
}
func (W _github_com_go_redis_redis_StatefulCmdable) ReadWrite() *redis.StatusCmd {
	return W.WReadWrite()
}
func (W _github_com_go_redis_redis_StatefulCmdable) Rename(key string, newkey string) *redis.StatusCmd {
	return W.WRename(key, newkey)
}
func (W _github_com_go_redis_redis_StatefulCmdable) RenameNX(key string, newkey string) *redis.BoolCmd {
	return W.WRenameNX(key, newkey)
}
func (W _github_com_go_redis_redis_StatefulCmdable) Restore(key string, ttl time.Duration, value string) *redis.StatusCmd {
	return W.WRestore(key, ttl, value)
}
func (W _github_com_go_redis_redis_StatefulCmdable) RestoreReplace(key string, ttl time.Duration, value string) *redis.StatusCmd {
	return W.WRestoreReplace(key, ttl, value)
}
func (W _github_com_go_redis_redis_StatefulCmdable) SAdd(key string, members []interface{}) *redis.IntCmd {
	return W.WSAdd(key, members)
}
func (W _github_com_go_redis_redis_StatefulCmdable) SCard(key string) *redis.IntCmd {
	return W.WSCard(key)
}
func (W _github_com_go_redis_redis_StatefulCmdable) SDiff(keys []string) *redis.StringSliceCmd {
	return W.WSDiff(keys)
}
func (W _github_com_go_redis_redis_StatefulCmdable) SDiffStore(destination string, keys []string) *redis.IntCmd {
	return W.WSDiffStore(destination, keys)
}
func (W _github_com_go_redis_redis_StatefulCmdable) SInter(keys []string) *redis.StringSliceCmd {
	return W.WSInter(keys)
}
func (W _github_com_go_redis_redis_StatefulCmdable) SInterStore(destination string, keys []string) *redis.IntCmd {
	return W.WSInterStore(destination, keys)
}
func (W _github_com_go_redis_redis_StatefulCmdable) SIsMember(key string, member interface{}) *redis.BoolCmd {
	return W.WSIsMember(key, member)
}
func (W _github_com_go_redis_redis_StatefulCmdable) SMembers(key string) *redis.StringSliceCmd {
	return W.WSMembers(key)
}
func (W _github_com_go_redis_redis_StatefulCmdable) SMembersMap(key string) *redis.StringStructMapCmd {
	return W.WSMembersMap(key)
}
func (W _github_com_go_redis_redis_StatefulCmdable) SMove(source string, destination string, member interface{}) *redis.BoolCmd {
	return W.WSMove(source, destination, member)
}
func (W _github_com_go_redis_redis_StatefulCmdable) SPop(key string) *redis.StringCmd {
	return W.WSPop(key)
}
func (W _github_com_go_redis_redis_StatefulCmdable) SPopN(key string, count int64) *redis.StringSliceCmd {
	return W.WSPopN(key, count)
}
func (W _github_com_go_redis_redis_StatefulCmdable) SRandMember(key string) *redis.StringCmd {
	return W.WSRandMember(key)
}
func (W _github_com_go_redis_redis_StatefulCmdable) SRandMemberN(key string, count int64) *redis.StringSliceCmd {
	return W.WSRandMemberN(key, count)
}
func (W _github_com_go_redis_redis_StatefulCmdable) SRem(key string, members []interface{}) *redis.IntCmd {
	return W.WSRem(key, members)
}
func (W _github_com_go_redis_redis_StatefulCmdable) SScan(key string, cursor uint64, match string, count int64) *redis.ScanCmd {
	return W.WSScan(key, cursor, match, count)
}
func (W _github_com_go_redis_redis_StatefulCmdable) SUnion(keys []string) *redis.StringSliceCmd {
	return W.WSUnion(keys)
}
func (W _github_com_go_redis_redis_StatefulCmdable) SUnionStore(destination string, keys []string) *redis.IntCmd {
	return W.WSUnionStore(destination, keys)
}
func (W _github_com_go_redis_redis_StatefulCmdable) Save() *redis.StatusCmd { return W.WSave() }
func (W _github_com_go_redis_redis_StatefulCmdable) Scan(cursor uint64, match string, count int64) *redis.ScanCmd {
	return W.WScan(cursor, match, count)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ScriptExists(hashes []string) *redis.BoolSliceCmd {
	return W.WScriptExists(hashes)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ScriptFlush() *redis.StatusCmd {
	return W.WScriptFlush()
}
func (W _github_com_go_redis_redis_StatefulCmdable) ScriptKill() *redis.StatusCmd {
	return W.WScriptKill()
}
func (W _github_com_go_redis_redis_StatefulCmdable) ScriptLoad(script string) *redis.StringCmd {
	return W.WScriptLoad(script)
}
func (W _github_com_go_redis_redis_StatefulCmdable) Select(index int) *redis.StatusCmd {
	return W.WSelect(index)
}
func (W _github_com_go_redis_redis_StatefulCmdable) Set(key string, value interface{}, expiration time.Duration) *redis.StatusCmd {
	return W.WSet(key, value, expiration)
}
func (W _github_com_go_redis_redis_StatefulCmdable) SetBit(key string, offset int64, value int) *redis.IntCmd {
	return W.WSetBit(key, offset, value)
}
func (W _github_com_go_redis_redis_StatefulCmdable) SetNX(key string, value interface{}, expiration time.Duration) *redis.BoolCmd {
	return W.WSetNX(key, value, expiration)
}
func (W _github_com_go_redis_redis_StatefulCmdable) SetRange(key string, offset int64, value string) *redis.IntCmd {
	return W.WSetRange(key, offset, value)
}
func (W _github_com_go_redis_redis_StatefulCmdable) SetXX(key string, value interface{}, expiration time.Duration) *redis.BoolCmd {
	return W.WSetXX(key, value, expiration)
}
func (W _github_com_go_redis_redis_StatefulCmdable) Shutdown() *redis.StatusCmd {
	return W.WShutdown()
}
func (W _github_com_go_redis_redis_StatefulCmdable) ShutdownNoSave() *redis.StatusCmd {
	return W.WShutdownNoSave()
}
func (W _github_com_go_redis_redis_StatefulCmdable) ShutdownSave() *redis.StatusCmd {
	return W.WShutdownSave()
}
func (W _github_com_go_redis_redis_StatefulCmdable) SlaveOf(host string, port string) *redis.StatusCmd {
	return W.WSlaveOf(host, port)
}
func (W _github_com_go_redis_redis_StatefulCmdable) Sort(key string, sort *redis.Sort) *redis.StringSliceCmd {
	return W.WSort(key, sort)
}
func (W _github_com_go_redis_redis_StatefulCmdable) SortInterfaces(key string, sort *redis.Sort) *redis.SliceCmd {
	return W.WSortInterfaces(key, sort)
}
func (W _github_com_go_redis_redis_StatefulCmdable) SortStore(key string, store string, sort *redis.Sort) *redis.IntCmd {
	return W.WSortStore(key, store, sort)
}
func (W _github_com_go_redis_redis_StatefulCmdable) StrLen(key string) *redis.IntCmd {
	return W.WStrLen(key)
}
func (W _github_com_go_redis_redis_StatefulCmdable) SwapDB(index1 int, index2 int) *redis.StatusCmd {
	return W.WSwapDB(index1, index2)
}
func (W _github_com_go_redis_redis_StatefulCmdable) TTL(key string) *redis.DurationCmd {
	return W.WTTL(key)
}
func (W _github_com_go_redis_redis_StatefulCmdable) Time() *redis.TimeCmd { return W.WTime() }
func (W _github_com_go_redis_redis_StatefulCmdable) Touch(keys []string) *redis.IntCmd {
	return W.WTouch(keys)
}
func (W _github_com_go_redis_redis_StatefulCmdable) TxPipeline() redis.Pipeliner {
	return W.WTxPipeline()
}
func (W _github_com_go_redis_redis_StatefulCmdable) TxPipelined(fn func(redis.Pipeliner) error) ([]redis.Cmder, error) {
	return W.WTxPipelined(fn)
}
func (W _github_com_go_redis_redis_StatefulCmdable) Type(key string) *redis.StatusCmd {
	return W.WType(key)
}
func (W _github_com_go_redis_redis_StatefulCmdable) Unlink(keys []string) *redis.IntCmd {
	return W.WUnlink(keys)
}
func (W _github_com_go_redis_redis_StatefulCmdable) XAck(stream string, group string, ids []string) *redis.IntCmd {
	return W.WXAck(stream, group, ids)
}
func (W _github_com_go_redis_redis_StatefulCmdable) XAdd(a *redis.XAddArgs) *redis.StringCmd {
	return W.WXAdd(a)
}
func (W _github_com_go_redis_redis_StatefulCmdable) XClaim(a *redis.XClaimArgs) *redis.XMessageSliceCmd {
	return W.WXClaim(a)
}
func (W _github_com_go_redis_redis_StatefulCmdable) XClaimJustID(a *redis.XClaimArgs) *redis.StringSliceCmd {
	return W.WXClaimJustID(a)
}
func (W _github_com_go_redis_redis_StatefulCmdable) XDel(stream string, ids []string) *redis.IntCmd {
	return W.WXDel(stream, ids)
}
func (W _github_com_go_redis_redis_StatefulCmdable) XGroupCreate(stream string, group string, start string) *redis.StatusCmd {
	return W.WXGroupCreate(stream, group, start)
}
func (W _github_com_go_redis_redis_StatefulCmdable) XGroupCreateMkStream(stream string, group string, start string) *redis.StatusCmd {
	return W.WXGroupCreateMkStream(stream, group, start)
}
func (W _github_com_go_redis_redis_StatefulCmdable) XGroupDelConsumer(stream string, group string, consumer string) *redis.IntCmd {
	return W.WXGroupDelConsumer(stream, group, consumer)
}
func (W _github_com_go_redis_redis_StatefulCmdable) XGroupDestroy(stream string, group string) *redis.IntCmd {
	return W.WXGroupDestroy(stream, group)
}
func (W _github_com_go_redis_redis_StatefulCmdable) XGroupSetID(stream string, group string, start string) *redis.StatusCmd {
	return W.WXGroupSetID(stream, group, start)
}
func (W _github_com_go_redis_redis_StatefulCmdable) XLen(stream string) *redis.IntCmd {
	return W.WXLen(stream)
}
func (W _github_com_go_redis_redis_StatefulCmdable) XPending(stream string, group string) *redis.XPendingCmd {
	return W.WXPending(stream, group)
}
func (W _github_com_go_redis_redis_StatefulCmdable) XPendingExt(a *redis.XPendingExtArgs) *redis.XPendingExtCmd {
	return W.WXPendingExt(a)
}
func (W _github_com_go_redis_redis_StatefulCmdable) XRange(stream string, start string, stop string) *redis.XMessageSliceCmd {
	return W.WXRange(stream, start, stop)
}
func (W _github_com_go_redis_redis_StatefulCmdable) XRangeN(stream string, start string, stop string, count int64) *redis.XMessageSliceCmd {
	return W.WXRangeN(stream, start, stop, count)
}
func (W _github_com_go_redis_redis_StatefulCmdable) XRead(a *redis.XReadArgs) *redis.XStreamSliceCmd {
	return W.WXRead(a)
}
func (W _github_com_go_redis_redis_StatefulCmdable) XReadGroup(a *redis.XReadGroupArgs) *redis.XStreamSliceCmd {
	return W.WXReadGroup(a)
}
func (W _github_com_go_redis_redis_StatefulCmdable) XReadStreams(streams []string) *redis.XStreamSliceCmd {
	return W.WXReadStreams(streams)
}
func (W _github_com_go_redis_redis_StatefulCmdable) XRevRange(stream string, start string, stop string) *redis.XMessageSliceCmd {
	return W.WXRevRange(stream, start, stop)
}
func (W _github_com_go_redis_redis_StatefulCmdable) XRevRangeN(stream string, start string, stop string, count int64) *redis.XMessageSliceCmd {
	return W.WXRevRangeN(stream, start, stop, count)
}
func (W _github_com_go_redis_redis_StatefulCmdable) XTrim(key string, maxLen int64) *redis.IntCmd {
	return W.WXTrim(key, maxLen)
}
func (W _github_com_go_redis_redis_StatefulCmdable) XTrimApprox(key string, maxLen int64) *redis.IntCmd {
	return W.WXTrimApprox(key, maxLen)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ZAdd(key string, members []*redis.Z) *redis.IntCmd {
	return W.WZAdd(key, members)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ZAddCh(key string, members []*redis.Z) *redis.IntCmd {
	return W.WZAddCh(key, members)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ZAddNX(key string, members []*redis.Z) *redis.IntCmd {
	return W.WZAddNX(key, members)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ZAddNXCh(key string, members []*redis.Z) *redis.IntCmd {
	return W.WZAddNXCh(key, members)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ZAddXX(key string, members []*redis.Z) *redis.IntCmd {
	return W.WZAddXX(key, members)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ZAddXXCh(key string, members []*redis.Z) *redis.IntCmd {
	return W.WZAddXXCh(key, members)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ZCard(key string) *redis.IntCmd {
	return W.WZCard(key)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ZCount(key string, min string, max string) *redis.IntCmd {
	return W.WZCount(key, min, max)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ZIncr(key string, member *redis.Z) *redis.FloatCmd {
	return W.WZIncr(key, member)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ZIncrBy(key string, increment float64, member string) *redis.FloatCmd {
	return W.WZIncrBy(key, increment, member)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ZIncrNX(key string, member *redis.Z) *redis.FloatCmd {
	return W.WZIncrNX(key, member)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ZIncrXX(key string, member *redis.Z) *redis.FloatCmd {
	return W.WZIncrXX(key, member)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ZInterStore(destination string, store *redis.ZStore) *redis.IntCmd {
	return W.WZInterStore(destination, store)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ZLexCount(key string, min string, max string) *redis.IntCmd {
	return W.WZLexCount(key, min, max)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ZPopMax(key string, count []int64) *redis.ZSliceCmd {
	return W.WZPopMax(key, count)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ZPopMin(key string, count []int64) *redis.ZSliceCmd {
	return W.WZPopMin(key, count)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ZRange(key string, start int64, stop int64) *redis.StringSliceCmd {
	return W.WZRange(key, start, stop)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ZRangeByLex(key string, opt *redis.ZRangeBy) *redis.StringSliceCmd {
	return W.WZRangeByLex(key, opt)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ZRangeByScore(key string, opt *redis.ZRangeBy) *redis.StringSliceCmd {
	return W.WZRangeByScore(key, opt)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ZRangeByScoreWithScores(key string, opt *redis.ZRangeBy) *redis.ZSliceCmd {
	return W.WZRangeByScoreWithScores(key, opt)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ZRangeWithScores(key string, start int64, stop int64) *redis.ZSliceCmd {
	return W.WZRangeWithScores(key, start, stop)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ZRank(key string, member string) *redis.IntCmd {
	return W.WZRank(key, member)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ZRem(key string, members []interface{}) *redis.IntCmd {
	return W.WZRem(key, members)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ZRemRangeByLex(key string, min string, max string) *redis.IntCmd {
	return W.WZRemRangeByLex(key, min, max)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ZRemRangeByRank(key string, start int64, stop int64) *redis.IntCmd {
	return W.WZRemRangeByRank(key, start, stop)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ZRemRangeByScore(key string, min string, max string) *redis.IntCmd {
	return W.WZRemRangeByScore(key, min, max)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ZRevRange(key string, start int64, stop int64) *redis.StringSliceCmd {
	return W.WZRevRange(key, start, stop)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ZRevRangeByLex(key string, opt *redis.ZRangeBy) *redis.StringSliceCmd {
	return W.WZRevRangeByLex(key, opt)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ZRevRangeByScore(key string, opt *redis.ZRangeBy) *redis.StringSliceCmd {
	return W.WZRevRangeByScore(key, opt)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ZRevRangeByScoreWithScores(key string, opt *redis.ZRangeBy) *redis.ZSliceCmd {
	return W.WZRevRangeByScoreWithScores(key, opt)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ZRevRangeWithScores(key string, start int64, stop int64) *redis.ZSliceCmd {
	return W.WZRevRangeWithScores(key, start, stop)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ZRevRank(key string, member string) *redis.IntCmd {
	return W.WZRevRank(key, member)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ZScan(key string, cursor uint64, match string, count int64) *redis.ScanCmd {
	return W.WZScan(key, cursor, match, count)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ZScore(key string, member string) *redis.FloatCmd {
	return W.WZScore(key, member)
}
func (W _github_com_go_redis_redis_StatefulCmdable) ZUnionStore(dest string, store *redis.ZStore) *redis.IntCmd {
	return W.WZUnionStore(dest, store)
}

// _github_com_go_redis_redis_UniversalClient is an interface wrapper for UniversalClient type
type _github_com_go_redis_redis_UniversalClient struct {
	WAddHook                    func(a0 redis.Hook)
	WAppend                     func(key string, value string) *redis.IntCmd
	WBLPop                      func(timeout time.Duration, keys []string) *redis.StringSliceCmd
	WBRPop                      func(timeout time.Duration, keys []string) *redis.StringSliceCmd
	WBRPopLPush                 func(source string, destination string, timeout time.Duration) *redis.StringCmd
	WBZPopMax                   func(timeout time.Duration, keys []string) *redis.ZWithKeyCmd
	WBZPopMin                   func(timeout time.Duration, keys []string) *redis.ZWithKeyCmd
	WBgRewriteAOF               func() *redis.StatusCmd
	WBgSave                     func() *redis.StatusCmd
	WBitCount                   func(key string, bitCount *redis.BitCount) *redis.IntCmd
	WBitField                   func(key string, args []interface{}) *redis.IntSliceCmd
	WBitOpAnd                   func(destKey string, keys []string) *redis.IntCmd
	WBitOpNot                   func(destKey string, key string) *redis.IntCmd
	WBitOpOr                    func(destKey string, keys []string) *redis.IntCmd
	WBitOpXor                   func(destKey string, keys []string) *redis.IntCmd
	WBitPos                     func(key string, bit int64, pos []int64) *redis.IntCmd
	WClientGetName              func() *redis.StringCmd
	WClientID                   func() *redis.IntCmd
	WClientKill                 func(ipPort string) *redis.StatusCmd
	WClientKillByFilter         func(keys []string) *redis.IntCmd
	WClientList                 func() *redis.StringCmd
	WClientPause                func(dur time.Duration) *redis.BoolCmd
	WClose                      func() error
	WClusterAddSlots            func(slots []int) *redis.StatusCmd
	WClusterAddSlotsRange       func(min int, max int) *redis.StatusCmd
	WClusterCountFailureReports func(nodeID string) *redis.IntCmd
	WClusterCountKeysInSlot     func(slot int) *redis.IntCmd
	WClusterDelSlots            func(slots []int) *redis.StatusCmd
	WClusterDelSlotsRange       func(min int, max int) *redis.StatusCmd
	WClusterFailover            func() *redis.StatusCmd
	WClusterForget              func(nodeID string) *redis.StatusCmd
	WClusterGetKeysInSlot       func(slot int, count int) *redis.StringSliceCmd
	WClusterInfo                func() *redis.StringCmd
	WClusterKeySlot             func(key string) *redis.IntCmd
	WClusterMeet                func(host string, port string) *redis.StatusCmd
	WClusterNodes               func() *redis.StringCmd
	WClusterReplicate           func(nodeID string) *redis.StatusCmd
	WClusterResetHard           func() *redis.StatusCmd
	WClusterResetSoft           func() *redis.StatusCmd
	WClusterSaveConfig          func() *redis.StatusCmd
	WClusterSlaves              func(nodeID string) *redis.StringSliceCmd
	WClusterSlots               func() *redis.ClusterSlotsCmd
	WCommand                    func() *redis.CommandsInfoCmd
	WConfigGet                  func(parameter string) *redis.SliceCmd
	WConfigResetStat            func() *redis.StatusCmd
	WConfigRewrite              func() *redis.StatusCmd
	WConfigSet                  func(parameter string, value string) *redis.StatusCmd
	WContext                    func() context.Context
	WDBSize                     func() *redis.IntCmd
	WDebugObject                func(key string) *redis.StringCmd
	WDecr                       func(key string) *redis.IntCmd
	WDecrBy                     func(key string, decrement int64) *redis.IntCmd
	WDel                        func(keys []string) *redis.IntCmd
	WDo                         func(args []interface{}) *redis.Cmd
	WDoContext                  func(ctx context.Context, args []interface{}) *redis.Cmd
	WDump                       func(key string) *redis.StringCmd
	WEcho                       func(message interface{}) *redis.StringCmd
	WEval                       func(script string, keys []string, args []interface{}) *redis.Cmd
	WEvalSha                    func(sha1 string, keys []string, args []interface{}) *redis.Cmd
	WExists                     func(keys []string) *redis.IntCmd
	WExpire                     func(key string, expiration time.Duration) *redis.BoolCmd
	WExpireAt                   func(key string, tm time.Time) *redis.BoolCmd
	WFlushAll                   func() *redis.StatusCmd
	WFlushAllAsync              func() *redis.StatusCmd
	WFlushDB                    func() *redis.StatusCmd
	WFlushDBAsync               func() *redis.StatusCmd
	WGeoAdd                     func(key string, geoLocation []*redis.GeoLocation) *redis.IntCmd
	WGeoDist                    func(key string, member1 string, member2 string, unit string) *redis.FloatCmd
	WGeoHash                    func(key string, members []string) *redis.StringSliceCmd
	WGeoPos                     func(key string, members []string) *redis.GeoPosCmd
	WGeoRadius                  func(key string, longitude float64, latitude float64, query *redis.GeoRadiusQuery) *redis.GeoLocationCmd
	WGeoRadiusByMember          func(key string, member string, query *redis.GeoRadiusQuery) *redis.GeoLocationCmd
	WGeoRadiusByMemberStore     func(key string, member string, query *redis.GeoRadiusQuery) *redis.IntCmd
	WGeoRadiusStore             func(key string, longitude float64, latitude float64, query *redis.GeoRadiusQuery) *redis.IntCmd
	WGet                        func(key string) *redis.StringCmd
	WGetBit                     func(key string, offset int64) *redis.IntCmd
	WGetRange                   func(key string, start int64, end int64) *redis.StringCmd
	WGetSet                     func(key string, value interface{}) *redis.StringCmd
	WHDel                       func(key string, fields []string) *redis.IntCmd
	WHExists                    func(key string, field string) *redis.BoolCmd
	WHGet                       func(key string, field string) *redis.StringCmd
	WHGetAll                    func(key string) *redis.StringStringMapCmd
	WHIncrBy                    func(key string, field string, incr int64) *redis.IntCmd
	WHIncrByFloat               func(key string, field string, incr float64) *redis.FloatCmd
	WHKeys                      func(key string) *redis.StringSliceCmd
	WHLen                       func(key string) *redis.IntCmd
	WHMGet                      func(key string, fields []string) *redis.SliceCmd
	WHMSet                      func(key string, fields map[string]interface{}) *redis.StatusCmd
	WHScan                      func(key string, cursor uint64, match string, count int64) *redis.ScanCmd
	WHSet                       func(key string, field string, value interface{}) *redis.BoolCmd
	WHSetNX                     func(key string, field string, value interface{}) *redis.BoolCmd
	WHVals                      func(key string) *redis.StringSliceCmd
	WIncr                       func(key string) *redis.IntCmd
	WIncrBy                     func(key string, value int64) *redis.IntCmd
	WIncrByFloat                func(key string, value float64) *redis.FloatCmd
	WInfo                       func(section []string) *redis.StringCmd
	WKeys                       func(pattern string) *redis.StringSliceCmd
	WLIndex                     func(key string, index int64) *redis.StringCmd
	WLInsert                    func(key string, op string, pivot interface{}, value interface{}) *redis.IntCmd
	WLInsertAfter               func(key string, pivot interface{}, value interface{}) *redis.IntCmd
	WLInsertBefore              func(key string, pivot interface{}, value interface{}) *redis.IntCmd
	WLLen                       func(key string) *redis.IntCmd
	WLPop                       func(key string) *redis.StringCmd
	WLPush                      func(key string, values []interface{}) *redis.IntCmd
	WLPushX                     func(key string, values []interface{}) *redis.IntCmd
	WLRange                     func(key string, start int64, stop int64) *redis.StringSliceCmd
	WLRem                       func(key string, count int64, value interface{}) *redis.IntCmd
	WLSet                       func(key string, index int64, value interface{}) *redis.StatusCmd
	WLTrim                      func(key string, start int64, stop int64) *redis.StatusCmd
	WLastSave                   func() *redis.IntCmd
	WMGet                       func(keys []string) *redis.SliceCmd
	WMSet                       func(pairs []interface{}) *redis.StatusCmd
	WMSetNX                     func(pairs []interface{}) *redis.BoolCmd
	WMemoryUsage                func(key string, samples []int) *redis.IntCmd
	WMigrate                    func(host string, port string, key string, db int, timeout time.Duration) *redis.StatusCmd
	WMove                       func(key string, db int) *redis.BoolCmd
	WObjectEncoding             func(key string) *redis.StringCmd
	WObjectIdleTime             func(key string) *redis.DurationCmd
	WObjectRefCount             func(key string) *redis.IntCmd
	WPExpire                    func(key string, expiration time.Duration) *redis.BoolCmd
	WPExpireAt                  func(key string, tm time.Time) *redis.BoolCmd
	WPFAdd                      func(key string, els []interface{}) *redis.IntCmd
	WPFCount                    func(keys []string) *redis.IntCmd
	WPFMerge                    func(dest string, keys []string) *redis.StatusCmd
	WPSubscribe                 func(channels []string) *redis.PubSub
	WPTTL                       func(key string) *redis.DurationCmd
	WPersist                    func(key string) *redis.BoolCmd
	WPing                       func() *redis.StatusCmd
	WPipeline                   func() redis.Pipeliner
	WPipelined                  func(fn func(redis.Pipeliner) error) ([]redis.Cmder, error)
	WProcess                    func(cmd redis.Cmder) error
	WProcessContext             func(ctx context.Context, cmd redis.Cmder) error
	WPubSubChannels             func(pattern string) *redis.StringSliceCmd
	WPubSubNumPat               func() *redis.IntCmd
	WPubSubNumSub               func(channels []string) *redis.StringIntMapCmd
	WPublish                    func(channel string, message interface{}) *redis.IntCmd
	WQuit                       func() *redis.StatusCmd
	WRPop                       func(key string) *redis.StringCmd
	WRPopLPush                  func(source string, destination string) *redis.StringCmd
	WRPush                      func(key string, values []interface{}) *redis.IntCmd
	WRPushX                     func(key string, values []interface{}) *redis.IntCmd
	WRandomKey                  func() *redis.StringCmd
	WReadOnly                   func() *redis.StatusCmd
	WReadWrite                  func() *redis.StatusCmd
	WRename                     func(key string, newkey string) *redis.StatusCmd
	WRenameNX                   func(key string, newkey string) *redis.BoolCmd
	WRestore                    func(key string, ttl time.Duration, value string) *redis.StatusCmd
	WRestoreReplace             func(key string, ttl time.Duration, value string) *redis.StatusCmd
	WSAdd                       func(key string, members []interface{}) *redis.IntCmd
	WSCard                      func(key string) *redis.IntCmd
	WSDiff                      func(keys []string) *redis.StringSliceCmd
	WSDiffStore                 func(destination string, keys []string) *redis.IntCmd
	WSInter                     func(keys []string) *redis.StringSliceCmd
	WSInterStore                func(destination string, keys []string) *redis.IntCmd
	WSIsMember                  func(key string, member interface{}) *redis.BoolCmd
	WSMembers                   func(key string) *redis.StringSliceCmd
	WSMembersMap                func(key string) *redis.StringStructMapCmd
	WSMove                      func(source string, destination string, member interface{}) *redis.BoolCmd
	WSPop                       func(key string) *redis.StringCmd
	WSPopN                      func(key string, count int64) *redis.StringSliceCmd
	WSRandMember                func(key string) *redis.StringCmd
	WSRandMemberN               func(key string, count int64) *redis.StringSliceCmd
	WSRem                       func(key string, members []interface{}) *redis.IntCmd
	WSScan                      func(key string, cursor uint64, match string, count int64) *redis.ScanCmd
	WSUnion                     func(keys []string) *redis.StringSliceCmd
	WSUnionStore                func(destination string, keys []string) *redis.IntCmd
	WSave                       func() *redis.StatusCmd
	WScan                       func(cursor uint64, match string, count int64) *redis.ScanCmd
	WScriptExists               func(hashes []string) *redis.BoolSliceCmd
	WScriptFlush                func() *redis.StatusCmd
	WScriptKill                 func() *redis.StatusCmd
	WScriptLoad                 func(script string) *redis.StringCmd
	WSet                        func(key string, value interface{}, expiration time.Duration) *redis.StatusCmd
	WSetBit                     func(key string, offset int64, value int) *redis.IntCmd
	WSetNX                      func(key string, value interface{}, expiration time.Duration) *redis.BoolCmd
	WSetRange                   func(key string, offset int64, value string) *redis.IntCmd
	WSetXX                      func(key string, value interface{}, expiration time.Duration) *redis.BoolCmd
	WShutdown                   func() *redis.StatusCmd
	WShutdownNoSave             func() *redis.StatusCmd
	WShutdownSave               func() *redis.StatusCmd
	WSlaveOf                    func(host string, port string) *redis.StatusCmd
	WSort                       func(key string, sort *redis.Sort) *redis.StringSliceCmd
	WSortInterfaces             func(key string, sort *redis.Sort) *redis.SliceCmd
	WSortStore                  func(key string, store string, sort *redis.Sort) *redis.IntCmd
	WStrLen                     func(key string) *redis.IntCmd
	WSubscribe                  func(channels []string) *redis.PubSub
	WTTL                        func(key string) *redis.DurationCmd
	WTime                       func() *redis.TimeCmd
	WTouch                      func(keys []string) *redis.IntCmd
	WTxPipeline                 func() redis.Pipeliner
	WTxPipelined                func(fn func(redis.Pipeliner) error) ([]redis.Cmder, error)
	WType                       func(key string) *redis.StatusCmd
	WUnlink                     func(keys []string) *redis.IntCmd
	WWatch                      func(fn func(*redis.Tx) error, keys []string) error
	WXAck                       func(stream string, group string, ids []string) *redis.IntCmd
	WXAdd                       func(a *redis.XAddArgs) *redis.StringCmd
	WXClaim                     func(a *redis.XClaimArgs) *redis.XMessageSliceCmd
	WXClaimJustID               func(a *redis.XClaimArgs) *redis.StringSliceCmd
	WXDel                       func(stream string, ids []string) *redis.IntCmd
	WXGroupCreate               func(stream string, group string, start string) *redis.StatusCmd
	WXGroupCreateMkStream       func(stream string, group string, start string) *redis.StatusCmd
	WXGroupDelConsumer          func(stream string, group string, consumer string) *redis.IntCmd
	WXGroupDestroy              func(stream string, group string) *redis.IntCmd
	WXGroupSetID                func(stream string, group string, start string) *redis.StatusCmd
	WXLen                       func(stream string) *redis.IntCmd
	WXPending                   func(stream string, group string) *redis.XPendingCmd
	WXPendingExt                func(a *redis.XPendingExtArgs) *redis.XPendingExtCmd
	WXRange                     func(stream string, start string, stop string) *redis.XMessageSliceCmd
	WXRangeN                    func(stream string, start string, stop string, count int64) *redis.XMessageSliceCmd
	WXRead                      func(a *redis.XReadArgs) *redis.XStreamSliceCmd
	WXReadGroup                 func(a *redis.XReadGroupArgs) *redis.XStreamSliceCmd
	WXReadStreams               func(streams []string) *redis.XStreamSliceCmd
	WXRevRange                  func(stream string, start string, stop string) *redis.XMessageSliceCmd
	WXRevRangeN                 func(stream string, start string, stop string, count int64) *redis.XMessageSliceCmd
	WXTrim                      func(key string, maxLen int64) *redis.IntCmd
	WXTrimApprox                func(key string, maxLen int64) *redis.IntCmd
	WZAdd                       func(key string, members []*redis.Z) *redis.IntCmd
	WZAddCh                     func(key string, members []*redis.Z) *redis.IntCmd
	WZAddNX                     func(key string, members []*redis.Z) *redis.IntCmd
	WZAddNXCh                   func(key string, members []*redis.Z) *redis.IntCmd
	WZAddXX                     func(key string, members []*redis.Z) *redis.IntCmd
	WZAddXXCh                   func(key string, members []*redis.Z) *redis.IntCmd
	WZCard                      func(key string) *redis.IntCmd
	WZCount                     func(key string, min string, max string) *redis.IntCmd
	WZIncr                      func(key string, member *redis.Z) *redis.FloatCmd
	WZIncrBy                    func(key string, increment float64, member string) *redis.FloatCmd
	WZIncrNX                    func(key string, member *redis.Z) *redis.FloatCmd
	WZIncrXX                    func(key string, member *redis.Z) *redis.FloatCmd
	WZInterStore                func(destination string, store *redis.ZStore) *redis.IntCmd
	WZLexCount                  func(key string, min string, max string) *redis.IntCmd
	WZPopMax                    func(key string, count []int64) *redis.ZSliceCmd
	WZPopMin                    func(key string, count []int64) *redis.ZSliceCmd
	WZRange                     func(key string, start int64, stop int64) *redis.StringSliceCmd
	WZRangeByLex                func(key string, opt *redis.ZRangeBy) *redis.StringSliceCmd
	WZRangeByScore              func(key string, opt *redis.ZRangeBy) *redis.StringSliceCmd
	WZRangeByScoreWithScores    func(key string, opt *redis.ZRangeBy) *redis.ZSliceCmd
	WZRangeWithScores           func(key string, start int64, stop int64) *redis.ZSliceCmd
	WZRank                      func(key string, member string) *redis.IntCmd
	WZRem                       func(key string, members []interface{}) *redis.IntCmd
	WZRemRangeByLex             func(key string, min string, max string) *redis.IntCmd
	WZRemRangeByRank            func(key string, start int64, stop int64) *redis.IntCmd
	WZRemRangeByScore           func(key string, min string, max string) *redis.IntCmd
	WZRevRange                  func(key string, start int64, stop int64) *redis.StringSliceCmd
	WZRevRangeByLex             func(key string, opt *redis.ZRangeBy) *redis.StringSliceCmd
	WZRevRangeByScore           func(key string, opt *redis.ZRangeBy) *redis.StringSliceCmd
	WZRevRangeByScoreWithScores func(key string, opt *redis.ZRangeBy) *redis.ZSliceCmd
	WZRevRangeWithScores        func(key string, start int64, stop int64) *redis.ZSliceCmd
	WZRevRank                   func(key string, member string) *redis.IntCmd
	WZScan                      func(key string, cursor uint64, match string, count int64) *redis.ScanCmd
	WZScore                     func(key string, member string) *redis.FloatCmd
	WZUnionStore                func(dest string, store *redis.ZStore) *redis.IntCmd
}

func (W _github_com_go_redis_redis_UniversalClient) AddHook(a0 redis.Hook) { W.WAddHook(a0) }
func (W _github_com_go_redis_redis_UniversalClient) Append(key string, value string) *redis.IntCmd {
	return W.WAppend(key, value)
}
func (W _github_com_go_redis_redis_UniversalClient) BLPop(timeout time.Duration, keys []string) *redis.StringSliceCmd {
	return W.WBLPop(timeout, keys)
}
func (W _github_com_go_redis_redis_UniversalClient) BRPop(timeout time.Duration, keys []string) *redis.StringSliceCmd {
	return W.WBRPop(timeout, keys)
}
func (W _github_com_go_redis_redis_UniversalClient) BRPopLPush(source string, destination string, timeout time.Duration) *redis.StringCmd {
	return W.WBRPopLPush(source, destination, timeout)
}
func (W _github_com_go_redis_redis_UniversalClient) BZPopMax(timeout time.Duration, keys []string) *redis.ZWithKeyCmd {
	return W.WBZPopMax(timeout, keys)
}
func (W _github_com_go_redis_redis_UniversalClient) BZPopMin(timeout time.Duration, keys []string) *redis.ZWithKeyCmd {
	return W.WBZPopMin(timeout, keys)
}
func (W _github_com_go_redis_redis_UniversalClient) BgRewriteAOF() *redis.StatusCmd {
	return W.WBgRewriteAOF()
}
func (W _github_com_go_redis_redis_UniversalClient) BgSave() *redis.StatusCmd { return W.WBgSave() }
func (W _github_com_go_redis_redis_UniversalClient) BitCount(key string, bitCount *redis.BitCount) *redis.IntCmd {
	return W.WBitCount(key, bitCount)
}
func (W _github_com_go_redis_redis_UniversalClient) BitField(key string, args []interface{}) *redis.IntSliceCmd {
	return W.WBitField(key, args)
}
func (W _github_com_go_redis_redis_UniversalClient) BitOpAnd(destKey string, keys []string) *redis.IntCmd {
	return W.WBitOpAnd(destKey, keys)
}
func (W _github_com_go_redis_redis_UniversalClient) BitOpNot(destKey string, key string) *redis.IntCmd {
	return W.WBitOpNot(destKey, key)
}
func (W _github_com_go_redis_redis_UniversalClient) BitOpOr(destKey string, keys []string) *redis.IntCmd {
	return W.WBitOpOr(destKey, keys)
}
func (W _github_com_go_redis_redis_UniversalClient) BitOpXor(destKey string, keys []string) *redis.IntCmd {
	return W.WBitOpXor(destKey, keys)
}
func (W _github_com_go_redis_redis_UniversalClient) BitPos(key string, bit int64, pos []int64) *redis.IntCmd {
	return W.WBitPos(key, bit, pos)
}
func (W _github_com_go_redis_redis_UniversalClient) ClientGetName() *redis.StringCmd {
	return W.WClientGetName()
}
func (W _github_com_go_redis_redis_UniversalClient) ClientID() *redis.IntCmd { return W.WClientID() }
func (W _github_com_go_redis_redis_UniversalClient) ClientKill(ipPort string) *redis.StatusCmd {
	return W.WClientKill(ipPort)
}
func (W _github_com_go_redis_redis_UniversalClient) ClientKillByFilter(keys []string) *redis.IntCmd {
	return W.WClientKillByFilter(keys)
}
func (W _github_com_go_redis_redis_UniversalClient) ClientList() *redis.StringCmd {
	return W.WClientList()
}
func (W _github_com_go_redis_redis_UniversalClient) ClientPause(dur time.Duration) *redis.BoolCmd {
	return W.WClientPause(dur)
}
func (W _github_com_go_redis_redis_UniversalClient) Close() error { return W.WClose() }
func (W _github_com_go_redis_redis_UniversalClient) ClusterAddSlots(slots []int) *redis.StatusCmd {
	return W.WClusterAddSlots(slots)
}
func (W _github_com_go_redis_redis_UniversalClient) ClusterAddSlotsRange(min int, max int) *redis.StatusCmd {
	return W.WClusterAddSlotsRange(min, max)
}
func (W _github_com_go_redis_redis_UniversalClient) ClusterCountFailureReports(nodeID string) *redis.IntCmd {
	return W.WClusterCountFailureReports(nodeID)
}
func (W _github_com_go_redis_redis_UniversalClient) ClusterCountKeysInSlot(slot int) *redis.IntCmd {
	return W.WClusterCountKeysInSlot(slot)
}
func (W _github_com_go_redis_redis_UniversalClient) ClusterDelSlots(slots []int) *redis.StatusCmd {
	return W.WClusterDelSlots(slots)
}
func (W _github_com_go_redis_redis_UniversalClient) ClusterDelSlotsRange(min int, max int) *redis.StatusCmd {
	return W.WClusterDelSlotsRange(min, max)
}
func (W _github_com_go_redis_redis_UniversalClient) ClusterFailover() *redis.StatusCmd {
	return W.WClusterFailover()
}
func (W _github_com_go_redis_redis_UniversalClient) ClusterForget(nodeID string) *redis.StatusCmd {
	return W.WClusterForget(nodeID)
}
func (W _github_com_go_redis_redis_UniversalClient) ClusterGetKeysInSlot(slot int, count int) *redis.StringSliceCmd {
	return W.WClusterGetKeysInSlot(slot, count)
}
func (W _github_com_go_redis_redis_UniversalClient) ClusterInfo() *redis.StringCmd {
	return W.WClusterInfo()
}
func (W _github_com_go_redis_redis_UniversalClient) ClusterKeySlot(key string) *redis.IntCmd {
	return W.WClusterKeySlot(key)
}
func (W _github_com_go_redis_redis_UniversalClient) ClusterMeet(host string, port string) *redis.StatusCmd {
	return W.WClusterMeet(host, port)
}
func (W _github_com_go_redis_redis_UniversalClient) ClusterNodes() *redis.StringCmd {
	return W.WClusterNodes()
}
func (W _github_com_go_redis_redis_UniversalClient) ClusterReplicate(nodeID string) *redis.StatusCmd {
	return W.WClusterReplicate(nodeID)
}
func (W _github_com_go_redis_redis_UniversalClient) ClusterResetHard() *redis.StatusCmd {
	return W.WClusterResetHard()
}
func (W _github_com_go_redis_redis_UniversalClient) ClusterResetSoft() *redis.StatusCmd {
	return W.WClusterResetSoft()
}
func (W _github_com_go_redis_redis_UniversalClient) ClusterSaveConfig() *redis.StatusCmd {
	return W.WClusterSaveConfig()
}
func (W _github_com_go_redis_redis_UniversalClient) ClusterSlaves(nodeID string) *redis.StringSliceCmd {
	return W.WClusterSlaves(nodeID)
}
func (W _github_com_go_redis_redis_UniversalClient) ClusterSlots() *redis.ClusterSlotsCmd {
	return W.WClusterSlots()
}
func (W _github_com_go_redis_redis_UniversalClient) Command() *redis.CommandsInfoCmd {
	return W.WCommand()
}
func (W _github_com_go_redis_redis_UniversalClient) ConfigGet(parameter string) *redis.SliceCmd {
	return W.WConfigGet(parameter)
}
func (W _github_com_go_redis_redis_UniversalClient) ConfigResetStat() *redis.StatusCmd {
	return W.WConfigResetStat()
}
func (W _github_com_go_redis_redis_UniversalClient) ConfigRewrite() *redis.StatusCmd {
	return W.WConfigRewrite()
}
func (W _github_com_go_redis_redis_UniversalClient) ConfigSet(parameter string, value string) *redis.StatusCmd {
	return W.WConfigSet(parameter, value)
}
func (W _github_com_go_redis_redis_UniversalClient) Context() context.Context { return W.WContext() }
func (W _github_com_go_redis_redis_UniversalClient) DBSize() *redis.IntCmd    { return W.WDBSize() }
func (W _github_com_go_redis_redis_UniversalClient) DebugObject(key string) *redis.StringCmd {
	return W.WDebugObject(key)
}
func (W _github_com_go_redis_redis_UniversalClient) Decr(key string) *redis.IntCmd {
	return W.WDecr(key)
}
func (W _github_com_go_redis_redis_UniversalClient) DecrBy(key string, decrement int64) *redis.IntCmd {
	return W.WDecrBy(key, decrement)
}
func (W _github_com_go_redis_redis_UniversalClient) Del(keys []string) *redis.IntCmd {
	return W.WDel(keys)
}
func (W _github_com_go_redis_redis_UniversalClient) Do(args []interface{}) *redis.Cmd {
	return W.WDo(args)
}
func (W _github_com_go_redis_redis_UniversalClient) DoContext(ctx context.Context, args []interface{}) *redis.Cmd {
	return W.WDoContext(ctx, args)
}
func (W _github_com_go_redis_redis_UniversalClient) Dump(key string) *redis.StringCmd {
	return W.WDump(key)
}
func (W _github_com_go_redis_redis_UniversalClient) Echo(message interface{}) *redis.StringCmd {
	return W.WEcho(message)
}
func (W _github_com_go_redis_redis_UniversalClient) Eval(script string, keys []string, args []interface{}) *redis.Cmd {
	return W.WEval(script, keys, args)
}
func (W _github_com_go_redis_redis_UniversalClient) EvalSha(sha1 string, keys []string, args []interface{}) *redis.Cmd {
	return W.WEvalSha(sha1, keys, args)
}
func (W _github_com_go_redis_redis_UniversalClient) Exists(keys []string) *redis.IntCmd {
	return W.WExists(keys)
}
func (W _github_com_go_redis_redis_UniversalClient) Expire(key string, expiration time.Duration) *redis.BoolCmd {
	return W.WExpire(key, expiration)
}
func (W _github_com_go_redis_redis_UniversalClient) ExpireAt(key string, tm time.Time) *redis.BoolCmd {
	return W.WExpireAt(key, tm)
}
func (W _github_com_go_redis_redis_UniversalClient) FlushAll() *redis.StatusCmd {
	return W.WFlushAll()
}
func (W _github_com_go_redis_redis_UniversalClient) FlushAllAsync() *redis.StatusCmd {
	return W.WFlushAllAsync()
}
func (W _github_com_go_redis_redis_UniversalClient) FlushDB() *redis.StatusCmd { return W.WFlushDB() }
func (W _github_com_go_redis_redis_UniversalClient) FlushDBAsync() *redis.StatusCmd {
	return W.WFlushDBAsync()
}
func (W _github_com_go_redis_redis_UniversalClient) GeoAdd(key string, geoLocation []*redis.GeoLocation) *redis.IntCmd {
	return W.WGeoAdd(key, geoLocation)
}
func (W _github_com_go_redis_redis_UniversalClient) GeoDist(key string, member1 string, member2 string, unit string) *redis.FloatCmd {
	return W.WGeoDist(key, member1, member2, unit)
}
func (W _github_com_go_redis_redis_UniversalClient) GeoHash(key string, members []string) *redis.StringSliceCmd {
	return W.WGeoHash(key, members)
}
func (W _github_com_go_redis_redis_UniversalClient) GeoPos(key string, members []string) *redis.GeoPosCmd {
	return W.WGeoPos(key, members)
}
func (W _github_com_go_redis_redis_UniversalClient) GeoRadius(key string, longitude float64, latitude float64, query *redis.GeoRadiusQuery) *redis.GeoLocationCmd {
	return W.WGeoRadius(key, longitude, latitude, query)
}
func (W _github_com_go_redis_redis_UniversalClient) GeoRadiusByMember(key string, member string, query *redis.GeoRadiusQuery) *redis.GeoLocationCmd {
	return W.WGeoRadiusByMember(key, member, query)
}
func (W _github_com_go_redis_redis_UniversalClient) GeoRadiusByMemberStore(key string, member string, query *redis.GeoRadiusQuery) *redis.IntCmd {
	return W.WGeoRadiusByMemberStore(key, member, query)
}
func (W _github_com_go_redis_redis_UniversalClient) GeoRadiusStore(key string, longitude float64, latitude float64, query *redis.GeoRadiusQuery) *redis.IntCmd {
	return W.WGeoRadiusStore(key, longitude, latitude, query)
}
func (W _github_com_go_redis_redis_UniversalClient) Get(key string) *redis.StringCmd {
	return W.WGet(key)
}
func (W _github_com_go_redis_redis_UniversalClient) GetBit(key string, offset int64) *redis.IntCmd {
	return W.WGetBit(key, offset)
}
func (W _github_com_go_redis_redis_UniversalClient) GetRange(key string, start int64, end int64) *redis.StringCmd {
	return W.WGetRange(key, start, end)
}
func (W _github_com_go_redis_redis_UniversalClient) GetSet(key string, value interface{}) *redis.StringCmd {
	return W.WGetSet(key, value)
}
func (W _github_com_go_redis_redis_UniversalClient) HDel(key string, fields []string) *redis.IntCmd {
	return W.WHDel(key, fields)
}
func (W _github_com_go_redis_redis_UniversalClient) HExists(key string, field string) *redis.BoolCmd {
	return W.WHExists(key, field)
}
func (W _github_com_go_redis_redis_UniversalClient) HGet(key string, field string) *redis.StringCmd {
	return W.WHGet(key, field)
}
func (W _github_com_go_redis_redis_UniversalClient) HGetAll(key string) *redis.StringStringMapCmd {
	return W.WHGetAll(key)
}
func (W _github_com_go_redis_redis_UniversalClient) HIncrBy(key string, field string, incr int64) *redis.IntCmd {
	return W.WHIncrBy(key, field, incr)
}
func (W _github_com_go_redis_redis_UniversalClient) HIncrByFloat(key string, field string, incr float64) *redis.FloatCmd {
	return W.WHIncrByFloat(key, field, incr)
}
func (W _github_com_go_redis_redis_UniversalClient) HKeys(key string) *redis.StringSliceCmd {
	return W.WHKeys(key)
}
func (W _github_com_go_redis_redis_UniversalClient) HLen(key string) *redis.IntCmd {
	return W.WHLen(key)
}
func (W _github_com_go_redis_redis_UniversalClient) HMGet(key string, fields []string) *redis.SliceCmd {
	return W.WHMGet(key, fields)
}
func (W _github_com_go_redis_redis_UniversalClient) HMSet(key string, fields map[string]interface{}) *redis.StatusCmd {
	return W.WHMSet(key, fields)
}
func (W _github_com_go_redis_redis_UniversalClient) HScan(key string, cursor uint64, match string, count int64) *redis.ScanCmd {
	return W.WHScan(key, cursor, match, count)
}
func (W _github_com_go_redis_redis_UniversalClient) HSet(key string, field string, value interface{}) *redis.BoolCmd {
	return W.WHSet(key, field, value)
}
func (W _github_com_go_redis_redis_UniversalClient) HSetNX(key string, field string, value interface{}) *redis.BoolCmd {
	return W.WHSetNX(key, field, value)
}
func (W _github_com_go_redis_redis_UniversalClient) HVals(key string) *redis.StringSliceCmd {
	return W.WHVals(key)
}
func (W _github_com_go_redis_redis_UniversalClient) Incr(key string) *redis.IntCmd {
	return W.WIncr(key)
}
func (W _github_com_go_redis_redis_UniversalClient) IncrBy(key string, value int64) *redis.IntCmd {
	return W.WIncrBy(key, value)
}
func (W _github_com_go_redis_redis_UniversalClient) IncrByFloat(key string, value float64) *redis.FloatCmd {
	return W.WIncrByFloat(key, value)
}
func (W _github_com_go_redis_redis_UniversalClient) Info(section []string) *redis.StringCmd {
	return W.WInfo(section)
}
func (W _github_com_go_redis_redis_UniversalClient) Keys(pattern string) *redis.StringSliceCmd {
	return W.WKeys(pattern)
}
func (W _github_com_go_redis_redis_UniversalClient) LIndex(key string, index int64) *redis.StringCmd {
	return W.WLIndex(key, index)
}
func (W _github_com_go_redis_redis_UniversalClient) LInsert(key string, op string, pivot interface{}, value interface{}) *redis.IntCmd {
	return W.WLInsert(key, op, pivot, value)
}
func (W _github_com_go_redis_redis_UniversalClient) LInsertAfter(key string, pivot interface{}, value interface{}) *redis.IntCmd {
	return W.WLInsertAfter(key, pivot, value)
}
func (W _github_com_go_redis_redis_UniversalClient) LInsertBefore(key string, pivot interface{}, value interface{}) *redis.IntCmd {
	return W.WLInsertBefore(key, pivot, value)
}
func (W _github_com_go_redis_redis_UniversalClient) LLen(key string) *redis.IntCmd {
	return W.WLLen(key)
}
func (W _github_com_go_redis_redis_UniversalClient) LPop(key string) *redis.StringCmd {
	return W.WLPop(key)
}
func (W _github_com_go_redis_redis_UniversalClient) LPush(key string, values []interface{}) *redis.IntCmd {
	return W.WLPush(key, values)
}
func (W _github_com_go_redis_redis_UniversalClient) LPushX(key string, values []interface{}) *redis.IntCmd {
	return W.WLPushX(key, values)
}
func (W _github_com_go_redis_redis_UniversalClient) LRange(key string, start int64, stop int64) *redis.StringSliceCmd {
	return W.WLRange(key, start, stop)
}
func (W _github_com_go_redis_redis_UniversalClient) LRem(key string, count int64, value interface{}) *redis.IntCmd {
	return W.WLRem(key, count, value)
}
func (W _github_com_go_redis_redis_UniversalClient) LSet(key string, index int64, value interface{}) *redis.StatusCmd {
	return W.WLSet(key, index, value)
}
func (W _github_com_go_redis_redis_UniversalClient) LTrim(key string, start int64, stop int64) *redis.StatusCmd {
	return W.WLTrim(key, start, stop)
}
func (W _github_com_go_redis_redis_UniversalClient) LastSave() *redis.IntCmd { return W.WLastSave() }
func (W _github_com_go_redis_redis_UniversalClient) MGet(keys []string) *redis.SliceCmd {
	return W.WMGet(keys)
}
func (W _github_com_go_redis_redis_UniversalClient) MSet(pairs []interface{}) *redis.StatusCmd {
	return W.WMSet(pairs)
}
func (W _github_com_go_redis_redis_UniversalClient) MSetNX(pairs []interface{}) *redis.BoolCmd {
	return W.WMSetNX(pairs)
}
func (W _github_com_go_redis_redis_UniversalClient) MemoryUsage(key string, samples []int) *redis.IntCmd {
	return W.WMemoryUsage(key, samples)
}
func (W _github_com_go_redis_redis_UniversalClient) Migrate(host string, port string, key string, db int, timeout time.Duration) *redis.StatusCmd {
	return W.WMigrate(host, port, key, db, timeout)
}
func (W _github_com_go_redis_redis_UniversalClient) Move(key string, db int) *redis.BoolCmd {
	return W.WMove(key, db)
}
func (W _github_com_go_redis_redis_UniversalClient) ObjectEncoding(key string) *redis.StringCmd {
	return W.WObjectEncoding(key)
}
func (W _github_com_go_redis_redis_UniversalClient) ObjectIdleTime(key string) *redis.DurationCmd {
	return W.WObjectIdleTime(key)
}
func (W _github_com_go_redis_redis_UniversalClient) ObjectRefCount(key string) *redis.IntCmd {
	return W.WObjectRefCount(key)
}
func (W _github_com_go_redis_redis_UniversalClient) PExpire(key string, expiration time.Duration) *redis.BoolCmd {
	return W.WPExpire(key, expiration)
}
func (W _github_com_go_redis_redis_UniversalClient) PExpireAt(key string, tm time.Time) *redis.BoolCmd {
	return W.WPExpireAt(key, tm)
}
func (W _github_com_go_redis_redis_UniversalClient) PFAdd(key string, els []interface{}) *redis.IntCmd {
	return W.WPFAdd(key, els)
}
func (W _github_com_go_redis_redis_UniversalClient) PFCount(keys []string) *redis.IntCmd {
	return W.WPFCount(keys)
}
func (W _github_com_go_redis_redis_UniversalClient) PFMerge(dest string, keys []string) *redis.StatusCmd {
	return W.WPFMerge(dest, keys)
}
func (W _github_com_go_redis_redis_UniversalClient) PSubscribe(channels []string) *redis.PubSub {
	return W.WPSubscribe(channels)
}
func (W _github_com_go_redis_redis_UniversalClient) PTTL(key string) *redis.DurationCmd {
	return W.WPTTL(key)
}
func (W _github_com_go_redis_redis_UniversalClient) Persist(key string) *redis.BoolCmd {
	return W.WPersist(key)
}
func (W _github_com_go_redis_redis_UniversalClient) Ping() *redis.StatusCmd    { return W.WPing() }
func (W _github_com_go_redis_redis_UniversalClient) Pipeline() redis.Pipeliner { return W.WPipeline() }
func (W _github_com_go_redis_redis_UniversalClient) Pipelined(fn func(redis.Pipeliner) error) ([]redis.Cmder, error) {
	return W.WPipelined(fn)
}
func (W _github_com_go_redis_redis_UniversalClient) Process(cmd redis.Cmder) error {
	return W.WProcess(cmd)
}
func (W _github_com_go_redis_redis_UniversalClient) ProcessContext(ctx context.Context, cmd redis.Cmder) error {
	return W.WProcessContext(ctx, cmd)
}
func (W _github_com_go_redis_redis_UniversalClient) PubSubChannels(pattern string) *redis.StringSliceCmd {
	return W.WPubSubChannels(pattern)
}
func (W _github_com_go_redis_redis_UniversalClient) PubSubNumPat() *redis.IntCmd {
	return W.WPubSubNumPat()
}
func (W _github_com_go_redis_redis_UniversalClient) PubSubNumSub(channels []string) *redis.StringIntMapCmd {
	return W.WPubSubNumSub(channels)
}
func (W _github_com_go_redis_redis_UniversalClient) Publish(channel string, message interface{}) *redis.IntCmd {
	return W.WPublish(channel, message)
}
func (W _github_com_go_redis_redis_UniversalClient) Quit() *redis.StatusCmd { return W.WQuit() }
func (W _github_com_go_redis_redis_UniversalClient) RPop(key string) *redis.StringCmd {
	return W.WRPop(key)
}
func (W _github_com_go_redis_redis_UniversalClient) RPopLPush(source string, destination string) *redis.StringCmd {
	return W.WRPopLPush(source, destination)
}
func (W _github_com_go_redis_redis_UniversalClient) RPush(key string, values []interface{}) *redis.IntCmd {
	return W.WRPush(key, values)
}
func (W _github_com_go_redis_redis_UniversalClient) RPushX(key string, values []interface{}) *redis.IntCmd {
	return W.WRPushX(key, values)
}
func (W _github_com_go_redis_redis_UniversalClient) RandomKey() *redis.StringCmd {
	return W.WRandomKey()
}
func (W _github_com_go_redis_redis_UniversalClient) ReadOnly() *redis.StatusCmd {
	return W.WReadOnly()
}
func (W _github_com_go_redis_redis_UniversalClient) ReadWrite() *redis.StatusCmd {
	return W.WReadWrite()
}
func (W _github_com_go_redis_redis_UniversalClient) Rename(key string, newkey string) *redis.StatusCmd {
	return W.WRename(key, newkey)
}
func (W _github_com_go_redis_redis_UniversalClient) RenameNX(key string, newkey string) *redis.BoolCmd {
	return W.WRenameNX(key, newkey)
}
func (W _github_com_go_redis_redis_UniversalClient) Restore(key string, ttl time.Duration, value string) *redis.StatusCmd {
	return W.WRestore(key, ttl, value)
}
func (W _github_com_go_redis_redis_UniversalClient) RestoreReplace(key string, ttl time.Duration, value string) *redis.StatusCmd {
	return W.WRestoreReplace(key, ttl, value)
}
func (W _github_com_go_redis_redis_UniversalClient) SAdd(key string, members []interface{}) *redis.IntCmd {
	return W.WSAdd(key, members)
}
func (W _github_com_go_redis_redis_UniversalClient) SCard(key string) *redis.IntCmd {
	return W.WSCard(key)
}
func (W _github_com_go_redis_redis_UniversalClient) SDiff(keys []string) *redis.StringSliceCmd {
	return W.WSDiff(keys)
}
func (W _github_com_go_redis_redis_UniversalClient) SDiffStore(destination string, keys []string) *redis.IntCmd {
	return W.WSDiffStore(destination, keys)
}
func (W _github_com_go_redis_redis_UniversalClient) SInter(keys []string) *redis.StringSliceCmd {
	return W.WSInter(keys)
}
func (W _github_com_go_redis_redis_UniversalClient) SInterStore(destination string, keys []string) *redis.IntCmd {
	return W.WSInterStore(destination, keys)
}
func (W _github_com_go_redis_redis_UniversalClient) SIsMember(key string, member interface{}) *redis.BoolCmd {
	return W.WSIsMember(key, member)
}
func (W _github_com_go_redis_redis_UniversalClient) SMembers(key string) *redis.StringSliceCmd {
	return W.WSMembers(key)
}
func (W _github_com_go_redis_redis_UniversalClient) SMembersMap(key string) *redis.StringStructMapCmd {
	return W.WSMembersMap(key)
}
func (W _github_com_go_redis_redis_UniversalClient) SMove(source string, destination string, member interface{}) *redis.BoolCmd {
	return W.WSMove(source, destination, member)
}
func (W _github_com_go_redis_redis_UniversalClient) SPop(key string) *redis.StringCmd {
	return W.WSPop(key)
}
func (W _github_com_go_redis_redis_UniversalClient) SPopN(key string, count int64) *redis.StringSliceCmd {
	return W.WSPopN(key, count)
}
func (W _github_com_go_redis_redis_UniversalClient) SRandMember(key string) *redis.StringCmd {
	return W.WSRandMember(key)
}
func (W _github_com_go_redis_redis_UniversalClient) SRandMemberN(key string, count int64) *redis.StringSliceCmd {
	return W.WSRandMemberN(key, count)
}
func (W _github_com_go_redis_redis_UniversalClient) SRem(key string, members []interface{}) *redis.IntCmd {
	return W.WSRem(key, members)
}
func (W _github_com_go_redis_redis_UniversalClient) SScan(key string, cursor uint64, match string, count int64) *redis.ScanCmd {
	return W.WSScan(key, cursor, match, count)
}
func (W _github_com_go_redis_redis_UniversalClient) SUnion(keys []string) *redis.StringSliceCmd {
	return W.WSUnion(keys)
}
func (W _github_com_go_redis_redis_UniversalClient) SUnionStore(destination string, keys []string) *redis.IntCmd {
	return W.WSUnionStore(destination, keys)
}
func (W _github_com_go_redis_redis_UniversalClient) Save() *redis.StatusCmd { return W.WSave() }
func (W _github_com_go_redis_redis_UniversalClient) Scan(cursor uint64, match string, count int64) *redis.ScanCmd {
	return W.WScan(cursor, match, count)
}
func (W _github_com_go_redis_redis_UniversalClient) ScriptExists(hashes []string) *redis.BoolSliceCmd {
	return W.WScriptExists(hashes)
}
func (W _github_com_go_redis_redis_UniversalClient) ScriptFlush() *redis.StatusCmd {
	return W.WScriptFlush()
}
func (W _github_com_go_redis_redis_UniversalClient) ScriptKill() *redis.StatusCmd {
	return W.WScriptKill()
}
func (W _github_com_go_redis_redis_UniversalClient) ScriptLoad(script string) *redis.StringCmd {
	return W.WScriptLoad(script)
}
func (W _github_com_go_redis_redis_UniversalClient) Set(key string, value interface{}, expiration time.Duration) *redis.StatusCmd {
	return W.WSet(key, value, expiration)
}
func (W _github_com_go_redis_redis_UniversalClient) SetBit(key string, offset int64, value int) *redis.IntCmd {
	return W.WSetBit(key, offset, value)
}
func (W _github_com_go_redis_redis_UniversalClient) SetNX(key string, value interface{}, expiration time.Duration) *redis.BoolCmd {
	return W.WSetNX(key, value, expiration)
}
func (W _github_com_go_redis_redis_UniversalClient) SetRange(key string, offset int64, value string) *redis.IntCmd {
	return W.WSetRange(key, offset, value)
}
func (W _github_com_go_redis_redis_UniversalClient) SetXX(key string, value interface{}, expiration time.Duration) *redis.BoolCmd {
	return W.WSetXX(key, value, expiration)
}
func (W _github_com_go_redis_redis_UniversalClient) Shutdown() *redis.StatusCmd {
	return W.WShutdown()
}
func (W _github_com_go_redis_redis_UniversalClient) ShutdownNoSave() *redis.StatusCmd {
	return W.WShutdownNoSave()
}
func (W _github_com_go_redis_redis_UniversalClient) ShutdownSave() *redis.StatusCmd {
	return W.WShutdownSave()
}
func (W _github_com_go_redis_redis_UniversalClient) SlaveOf(host string, port string) *redis.StatusCmd {
	return W.WSlaveOf(host, port)
}
func (W _github_com_go_redis_redis_UniversalClient) Sort(key string, sort *redis.Sort) *redis.StringSliceCmd {
	return W.WSort(key, sort)
}
func (W _github_com_go_redis_redis_UniversalClient) SortInterfaces(key string, sort *redis.Sort) *redis.SliceCmd {
	return W.WSortInterfaces(key, sort)
}
func (W _github_com_go_redis_redis_UniversalClient) SortStore(key string, store string, sort *redis.Sort) *redis.IntCmd {
	return W.WSortStore(key, store, sort)
}
func (W _github_com_go_redis_redis_UniversalClient) StrLen(key string) *redis.IntCmd {
	return W.WStrLen(key)
}
func (W _github_com_go_redis_redis_UniversalClient) Subscribe(channels []string) *redis.PubSub {
	return W.WSubscribe(channels)
}
func (W _github_com_go_redis_redis_UniversalClient) TTL(key string) *redis.DurationCmd {
	return W.WTTL(key)
}
func (W _github_com_go_redis_redis_UniversalClient) Time() *redis.TimeCmd { return W.WTime() }
func (W _github_com_go_redis_redis_UniversalClient) Touch(keys []string) *redis.IntCmd {
	return W.WTouch(keys)
}
func (W _github_com_go_redis_redis_UniversalClient) TxPipeline() redis.Pipeliner {
	return W.WTxPipeline()
}
func (W _github_com_go_redis_redis_UniversalClient) TxPipelined(fn func(redis.Pipeliner) error) ([]redis.Cmder, error) {
	return W.WTxPipelined(fn)
}
func (W _github_com_go_redis_redis_UniversalClient) Type(key string) *redis.StatusCmd {
	return W.WType(key)
}
func (W _github_com_go_redis_redis_UniversalClient) Unlink(keys []string) *redis.IntCmd {
	return W.WUnlink(keys)
}
func (W _github_com_go_redis_redis_UniversalClient) Watch(fn func(*redis.Tx) error, keys []string) error {
	return W.WWatch(fn, keys)
}
func (W _github_com_go_redis_redis_UniversalClient) XAck(stream string, group string, ids []string) *redis.IntCmd {
	return W.WXAck(stream, group, ids)
}
func (W _github_com_go_redis_redis_UniversalClient) XAdd(a *redis.XAddArgs) *redis.StringCmd {
	return W.WXAdd(a)
}
func (W _github_com_go_redis_redis_UniversalClient) XClaim(a *redis.XClaimArgs) *redis.XMessageSliceCmd {
	return W.WXClaim(a)
}
func (W _github_com_go_redis_redis_UniversalClient) XClaimJustID(a *redis.XClaimArgs) *redis.StringSliceCmd {
	return W.WXClaimJustID(a)
}
func (W _github_com_go_redis_redis_UniversalClient) XDel(stream string, ids []string) *redis.IntCmd {
	return W.WXDel(stream, ids)
}
func (W _github_com_go_redis_redis_UniversalClient) XGroupCreate(stream string, group string, start string) *redis.StatusCmd {
	return W.WXGroupCreate(stream, group, start)
}
func (W _github_com_go_redis_redis_UniversalClient) XGroupCreateMkStream(stream string, group string, start string) *redis.StatusCmd {
	return W.WXGroupCreateMkStream(stream, group, start)
}
func (W _github_com_go_redis_redis_UniversalClient) XGroupDelConsumer(stream string, group string, consumer string) *redis.IntCmd {
	return W.WXGroupDelConsumer(stream, group, consumer)
}
func (W _github_com_go_redis_redis_UniversalClient) XGroupDestroy(stream string, group string) *redis.IntCmd {
	return W.WXGroupDestroy(stream, group)
}
func (W _github_com_go_redis_redis_UniversalClient) XGroupSetID(stream string, group string, start string) *redis.StatusCmd {
	return W.WXGroupSetID(stream, group, start)
}
func (W _github_com_go_redis_redis_UniversalClient) XLen(stream string) *redis.IntCmd {
	return W.WXLen(stream)
}
func (W _github_com_go_redis_redis_UniversalClient) XPending(stream string, group string) *redis.XPendingCmd {
	return W.WXPending(stream, group)
}
func (W _github_com_go_redis_redis_UniversalClient) XPendingExt(a *redis.XPendingExtArgs) *redis.XPendingExtCmd {
	return W.WXPendingExt(a)
}
func (W _github_com_go_redis_redis_UniversalClient) XRange(stream string, start string, stop string) *redis.XMessageSliceCmd {
	return W.WXRange(stream, start, stop)
}
func (W _github_com_go_redis_redis_UniversalClient) XRangeN(stream string, start string, stop string, count int64) *redis.XMessageSliceCmd {
	return W.WXRangeN(stream, start, stop, count)
}
func (W _github_com_go_redis_redis_UniversalClient) XRead(a *redis.XReadArgs) *redis.XStreamSliceCmd {
	return W.WXRead(a)
}
func (W _github_com_go_redis_redis_UniversalClient) XReadGroup(a *redis.XReadGroupArgs) *redis.XStreamSliceCmd {
	return W.WXReadGroup(a)
}
func (W _github_com_go_redis_redis_UniversalClient) XReadStreams(streams []string) *redis.XStreamSliceCmd {
	return W.WXReadStreams(streams)
}
func (W _github_com_go_redis_redis_UniversalClient) XRevRange(stream string, start string, stop string) *redis.XMessageSliceCmd {
	return W.WXRevRange(stream, start, stop)
}
func (W _github_com_go_redis_redis_UniversalClient) XRevRangeN(stream string, start string, stop string, count int64) *redis.XMessageSliceCmd {
	return W.WXRevRangeN(stream, start, stop, count)
}
func (W _github_com_go_redis_redis_UniversalClient) XTrim(key string, maxLen int64) *redis.IntCmd {
	return W.WXTrim(key, maxLen)
}
func (W _github_com_go_redis_redis_UniversalClient) XTrimApprox(key string, maxLen int64) *redis.IntCmd {
	return W.WXTrimApprox(key, maxLen)
}
func (W _github_com_go_redis_redis_UniversalClient) ZAdd(key string, members []*redis.Z) *redis.IntCmd {
	return W.WZAdd(key, members)
}
func (W _github_com_go_redis_redis_UniversalClient) ZAddCh(key string, members []*redis.Z) *redis.IntCmd {
	return W.WZAddCh(key, members)
}
func (W _github_com_go_redis_redis_UniversalClient) ZAddNX(key string, members []*redis.Z) *redis.IntCmd {
	return W.WZAddNX(key, members)
}
func (W _github_com_go_redis_redis_UniversalClient) ZAddNXCh(key string, members []*redis.Z) *redis.IntCmd {
	return W.WZAddNXCh(key, members)
}
func (W _github_com_go_redis_redis_UniversalClient) ZAddXX(key string, members []*redis.Z) *redis.IntCmd {
	return W.WZAddXX(key, members)
}
func (W _github_com_go_redis_redis_UniversalClient) ZAddXXCh(key string, members []*redis.Z) *redis.IntCmd {
	return W.WZAddXXCh(key, members)
}
func (W _github_com_go_redis_redis_UniversalClient) ZCard(key string) *redis.IntCmd {
	return W.WZCard(key)
}
func (W _github_com_go_redis_redis_UniversalClient) ZCount(key string, min string, max string) *redis.IntCmd {
	return W.WZCount(key, min, max)
}
func (W _github_com_go_redis_redis_UniversalClient) ZIncr(key string, member *redis.Z) *redis.FloatCmd {
	return W.WZIncr(key, member)
}
func (W _github_com_go_redis_redis_UniversalClient) ZIncrBy(key string, increment float64, member string) *redis.FloatCmd {
	return W.WZIncrBy(key, increment, member)
}
func (W _github_com_go_redis_redis_UniversalClient) ZIncrNX(key string, member *redis.Z) *redis.FloatCmd {
	return W.WZIncrNX(key, member)
}
func (W _github_com_go_redis_redis_UniversalClient) ZIncrXX(key string, member *redis.Z) *redis.FloatCmd {
	return W.WZIncrXX(key, member)
}
func (W _github_com_go_redis_redis_UniversalClient) ZInterStore(destination string, store *redis.ZStore) *redis.IntCmd {
	return W.WZInterStore(destination, store)
}
func (W _github_com_go_redis_redis_UniversalClient) ZLexCount(key string, min string, max string) *redis.IntCmd {
	return W.WZLexCount(key, min, max)
}
func (W _github_com_go_redis_redis_UniversalClient) ZPopMax(key string, count []int64) *redis.ZSliceCmd {
	return W.WZPopMax(key, count)
}
func (W _github_com_go_redis_redis_UniversalClient) ZPopMin(key string, count []int64) *redis.ZSliceCmd {
	return W.WZPopMin(key, count)
}
func (W _github_com_go_redis_redis_UniversalClient) ZRange(key string, start int64, stop int64) *redis.StringSliceCmd {
	return W.WZRange(key, start, stop)
}
func (W _github_com_go_redis_redis_UniversalClient) ZRangeByLex(key string, opt *redis.ZRangeBy) *redis.StringSliceCmd {
	return W.WZRangeByLex(key, opt)
}
func (W _github_com_go_redis_redis_UniversalClient) ZRangeByScore(key string, opt *redis.ZRangeBy) *redis.StringSliceCmd {
	return W.WZRangeByScore(key, opt)
}
func (W _github_com_go_redis_redis_UniversalClient) ZRangeByScoreWithScores(key string, opt *redis.ZRangeBy) *redis.ZSliceCmd {
	return W.WZRangeByScoreWithScores(key, opt)
}
func (W _github_com_go_redis_redis_UniversalClient) ZRangeWithScores(key string, start int64, stop int64) *redis.ZSliceCmd {
	return W.WZRangeWithScores(key, start, stop)
}
func (W _github_com_go_redis_redis_UniversalClient) ZRank(key string, member string) *redis.IntCmd {
	return W.WZRank(key, member)
}
func (W _github_com_go_redis_redis_UniversalClient) ZRem(key string, members []interface{}) *redis.IntCmd {
	return W.WZRem(key, members)
}
func (W _github_com_go_redis_redis_UniversalClient) ZRemRangeByLex(key string, min string, max string) *redis.IntCmd {
	return W.WZRemRangeByLex(key, min, max)
}
func (W _github_com_go_redis_redis_UniversalClient) ZRemRangeByRank(key string, start int64, stop int64) *redis.IntCmd {
	return W.WZRemRangeByRank(key, start, stop)
}
func (W _github_com_go_redis_redis_UniversalClient) ZRemRangeByScore(key string, min string, max string) *redis.IntCmd {
	return W.WZRemRangeByScore(key, min, max)
}
func (W _github_com_go_redis_redis_UniversalClient) ZRevRange(key string, start int64, stop int64) *redis.StringSliceCmd {
	return W.WZRevRange(key, start, stop)
}
func (W _github_com_go_redis_redis_UniversalClient) ZRevRangeByLex(key string, opt *redis.ZRangeBy) *redis.StringSliceCmd {
	return W.WZRevRangeByLex(key, opt)
}
func (W _github_com_go_redis_redis_UniversalClient) ZRevRangeByScore(key string, opt *redis.ZRangeBy) *redis.StringSliceCmd {
	return W.WZRevRangeByScore(key, opt)
}
func (W _github_com_go_redis_redis_UniversalClient) ZRevRangeByScoreWithScores(key string, opt *redis.ZRangeBy) *redis.ZSliceCmd {
	return W.WZRevRangeByScoreWithScores(key, opt)
}
func (W _github_com_go_redis_redis_UniversalClient) ZRevRangeWithScores(key string, start int64, stop int64) *redis.ZSliceCmd {
	return W.WZRevRangeWithScores(key, start, stop)
}
func (W _github_com_go_redis_redis_UniversalClient) ZRevRank(key string, member string) *redis.IntCmd {
	return W.WZRevRank(key, member)
}
func (W _github_com_go_redis_redis_UniversalClient) ZScan(key string, cursor uint64, match string, count int64) *redis.ScanCmd {
	return W.WZScan(key, cursor, match, count)
}
func (W _github_com_go_redis_redis_UniversalClient) ZScore(key string, member string) *redis.FloatCmd {
	return W.WZScore(key, member)
}
func (W _github_com_go_redis_redis_UniversalClient) ZUnionStore(dest string, store *redis.ZStore) *redis.IntCmd {
	return W.WZUnionStore(dest, store)
}
