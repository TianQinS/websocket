// Code generated by automatic for 'github.com/tidwall/btree'. DO NOT EDIT.

// +build go1.12,!go1.13

package stdlibs

import (
	"github.com/tidwall/btree"
	"reflect"
)

func init() {
	Symbols["github.com/tidwall/btree"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"DefaultFreeListSize": reflect.ValueOf(btree.DefaultFreeListSize),
		"New":                 reflect.ValueOf(btree.New),
		"NewFreeList":         reflect.ValueOf(btree.NewFreeList),
		"NewWithFreeList":     reflect.ValueOf(btree.NewWithFreeList),

		// type definitions
		"BTree":        reflect.ValueOf((*btree.BTree)(nil)),
		"Cursor":       reflect.ValueOf((*btree.Cursor)(nil)),
		"FreeList":     reflect.ValueOf((*btree.FreeList)(nil)),
		"Int":          reflect.ValueOf((*btree.Int)(nil)),
		"Item":         reflect.ValueOf((*btree.Item)(nil)),
		"ItemIterator": reflect.ValueOf((*btree.ItemIterator)(nil)),

		// interface wrapper definitions
		"_Item": reflect.ValueOf((*_github_com_tidwall_btree_Item)(nil)),
	}
}

// _github_com_tidwall_btree_Item is an interface wrapper for Item type
type _github_com_tidwall_btree_Item struct {
	WLess func(than btree.Item, ctx interface{}) bool
}

func (W _github_com_tidwall_btree_Item) Less(than btree.Item, ctx interface{}) bool {
	return W.WLess(than, ctx)
}
